/**
 * Shotstack
 * Official Node SDK for the Shotstack Cloud Video Editing API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ShotstackTextToImageOptions model module.
 * @module model/ShotstackTextToImageOptions
 * @version 0.2.6
 */
class ShotstackTextToImageOptions {
    /**
     * Constructs a new <code>ShotstackTextToImageOptions</code>.
     * Options for the Shotstack text-to-image service. Set a text prompt to generate an image from. The output will be  generated as a PNG file available at the URL returned in the response.
     * @alias module:model/ShotstackTextToImageOptions
     * @param type {module:model/ShotstackTextToImageOptions.TypeEnum} The type of asset to generate - set to `text-to-image` for text-to-image.
     * @param prompt {String} The text prompt to generate an image from.
     * @param width {Number} The width of the image in pixels.
     * @param height {Number} The height of the image in pixels.
     */
    constructor(type, prompt, width, height) { 
        
        ShotstackTextToImageOptions.initialize(this, type, prompt, width, height);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, prompt, width, height) { 
        obj['type'] = type || 'text-to-image';
        obj['prompt'] = prompt;
        obj['width'] = width;
        obj['height'] = height;
    }

    /**
     * Constructs a <code>ShotstackTextToImageOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ShotstackTextToImageOptions} obj Optional instance to populate.
     * @return {module:model/ShotstackTextToImageOptions} The populated <code>ShotstackTextToImageOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ShotstackTextToImageOptions();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('prompt')) {
                obj['prompt'] = ApiClient.convertToType(data['prompt'], 'String');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ShotstackTextToImageOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ShotstackTextToImageOptions</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ShotstackTextToImageOptions.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['prompt'] && !(typeof data['prompt'] === 'string' || data['prompt'] instanceof String)) {
            throw new Error("Expected the field `prompt` to be a primitive type in the JSON string but got " + data['prompt']);
        }

        return true;
    }

/**
     * Returns The type of asset to generate - set to `text-to-image` for text-to-image.
     * @return {module:model/ShotstackTextToImageOptions.TypeEnum}
     */
    getType() {
        return this.type;
    }

    /**
     * Sets The type of asset to generate - set to `text-to-image` for text-to-image.
     * @param {module:model/ShotstackTextToImageOptions.TypeEnum} type The type of asset to generate - set to `text-to-image` for text-to-image.
     */
    setType(type) {
        this['type'] = type;
        return this;
    }
/**
     * Returns The text prompt to generate an image from.
     * @return {String}
     */
    getPrompt() {
        return this.prompt;
    }

    /**
     * Sets The text prompt to generate an image from.
     * @param {String} prompt The text prompt to generate an image from.
     */
    setPrompt(prompt) {
        this['prompt'] = prompt;
        return this;
    }
/**
     * Returns The width of the image in pixels.
     * @return {Number}
     */
    getWidth() {
        return this.width;
    }

    /**
     * Sets The width of the image in pixels.
     * @param {Number} width The width of the image in pixels.
     */
    setWidth(width) {
        this['width'] = width;
        return this;
    }
/**
     * Returns The height of the image in pixels.
     * @return {Number}
     */
    getHeight() {
        return this.height;
    }

    /**
     * Sets The height of the image in pixels.
     * @param {Number} height The height of the image in pixels.
     */
    setHeight(height) {
        this['height'] = height;
        return this;
    }

}

ShotstackTextToImageOptions.RequiredProperties = ["type", "prompt", "width", "height"];

/**
 * The type of asset to generate - set to `text-to-image` for text-to-image.
 * @member {module:model/ShotstackTextToImageOptions.TypeEnum} type
 * @default 'text-to-image'
 */
ShotstackTextToImageOptions.prototype['type'] = 'text-to-image';

/**
 * The text prompt to generate an image from.
 * @member {String} prompt
 */
ShotstackTextToImageOptions.prototype['prompt'] = undefined;

/**
 * The width of the image in pixels.
 * @member {Number} width
 */
ShotstackTextToImageOptions.prototype['width'] = undefined;

/**
 * The height of the image in pixels.
 * @member {Number} height
 */
ShotstackTextToImageOptions.prototype['height'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ShotstackTextToImageOptions['TypeEnum'] = {

    /**
     * value: "text-to-image"
     * @const
     */
    "text-to-image": "text-to-image"
};



export default ShotstackTextToImageOptions;

