/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.io/docs/guide/) documentation.  There are three API's, one for editing and generating assets (Edit API), one for managing hosted assets (Serve API) and one for ingesting and transforming source assets (Ingest API).  Each API has it's own base URL and collection of endpoints. Each API uses the same set of API keys.  **[Edit API](#shotstack-edit)** - [https://api.shotstack.io/edit/{version}](#)<br> Edit videos, images and audio assets in the cloud using a simple JSON schema and templates.  **[Serve API](#shotstack-serve)** - [https://api.shotstack.io/serve/{version}](#)<br> Inspect and manage the hosting of assets generated by the Edit and Ingest APIs.  **[Ingest API](#shotstack-ingest)** - [https://api.shotstack.io/ingest/{version}](#)<br> Ingest (upload, store and transform) source footage, images, audio and fonts to be used by the Edit API.  **[Create API](#shotstack-create)** - [https://api.shotstack.io/create/{version}](#)<br> Generate images, videos, voice overs and text using built in and third party generative AI providers. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Destinations from './Destinations';
import Poster from './Poster';
import Range from './Range';
import Size from './Size';
import Thumbnail from './Thumbnail';

/**
 * The Output model module.
 * @module model/Output
 * @version 0.2.6
 */
class Output {
    /**
     * Constructs a new <code>Output</code>.
     * The output format, render range and type of media to generate.
     * @alias module:model/Output
     * @param format {module:model/Output.FormatEnum} The output format and type of media file to generate. <ul>   <li>`mp4` - mp4 video file</li>   <li>`gif` - animated gif</li>   <li>`jpg` - jpg image file</li>   <li>`png` - png image file</li>   <li>`bmp` - bmp image file</li>   <li>`mp3` - mp3 audio file (audio only)</li> </ul>
     */
    constructor(format) { 
        
        Output.initialize(this, format);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, format) { 
        obj['format'] = format;
    }

    /**
     * Constructs a <code>Output</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Output} obj Optional instance to populate.
     * @return {module:model/Output} The populated <code>Output</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Output();

            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('resolution')) {
                obj['resolution'] = ApiClient.convertToType(data['resolution'], 'String');
            }
            if (data.hasOwnProperty('aspectRatio')) {
                obj['aspectRatio'] = ApiClient.convertToType(data['aspectRatio'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = Size.constructFromObject(data['size']);
            }
            if (data.hasOwnProperty('fps')) {
                obj['fps'] = ApiClient.convertToType(data['fps'], 'Number');
            }
            if (data.hasOwnProperty('scaleTo')) {
                obj['scaleTo'] = ApiClient.convertToType(data['scaleTo'], 'String');
            }
            if (data.hasOwnProperty('quality')) {
                obj['quality'] = ApiClient.convertToType(data['quality'], 'String');
            }
            if (data.hasOwnProperty('repeat')) {
                obj['repeat'] = ApiClient.convertToType(data['repeat'], 'Boolean');
            }
            if (data.hasOwnProperty('mute')) {
                obj['mute'] = ApiClient.convertToType(data['mute'], 'Boolean');
            }
            if (data.hasOwnProperty('range')) {
                obj['range'] = Range.constructFromObject(data['range']);
            }
            if (data.hasOwnProperty('poster')) {
                obj['poster'] = Poster.constructFromObject(data['poster']);
            }
            if (data.hasOwnProperty('thumbnail')) {
                obj['thumbnail'] = Thumbnail.constructFromObject(data['thumbnail']);
            }
            if (data.hasOwnProperty('destinations')) {
                obj['destinations'] = ApiClient.convertToType(data['destinations'], [Destinations]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Output</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Output</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Output.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // ensure the json data is a string
        if (data['resolution'] && !(typeof data['resolution'] === 'string' || data['resolution'] instanceof String)) {
            throw new Error("Expected the field `resolution` to be a primitive type in the JSON string but got " + data['resolution']);
        }
        // ensure the json data is a string
        if (data['aspectRatio'] && !(typeof data['aspectRatio'] === 'string' || data['aspectRatio'] instanceof String)) {
            throw new Error("Expected the field `aspectRatio` to be a primitive type in the JSON string but got " + data['aspectRatio']);
        }
        // validate the optional field `size`
        if (data['size']) { // data not null
          Size.validateJSON(data['size']);
        }
        // ensure the json data is a string
        if (data['scaleTo'] && !(typeof data['scaleTo'] === 'string' || data['scaleTo'] instanceof String)) {
            throw new Error("Expected the field `scaleTo` to be a primitive type in the JSON string but got " + data['scaleTo']);
        }
        // ensure the json data is a string
        if (data['quality'] && !(typeof data['quality'] === 'string' || data['quality'] instanceof String)) {
            throw new Error("Expected the field `quality` to be a primitive type in the JSON string but got " + data['quality']);
        }
        // validate the optional field `range`
        if (data['range']) { // data not null
          Range.validateJSON(data['range']);
        }
        // validate the optional field `poster`
        if (data['poster']) { // data not null
          Poster.validateJSON(data['poster']);
        }
        // validate the optional field `thumbnail`
        if (data['thumbnail']) { // data not null
          Thumbnail.validateJSON(data['thumbnail']);
        }
        if (data['destinations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['destinations'])) {
                throw new Error("Expected the field `destinations` to be an array in the JSON data but got " + data['destinations']);
            }
            // validate the optional field `destinations` (array)
            for (const item of data['destinations']) {
                Destinations.validateJSON(item);
            };
        }

        return true;
    }

/**
     * Returns The output format and type of media file to generate. <ul>   <li>`mp4` - mp4 video file</li>   <li>`gif` - animated gif</li>   <li>`jpg` - jpg image file</li>   <li>`png` - png image file</li>   <li>`bmp` - bmp image file</li>   <li>`mp3` - mp3 audio file (audio only)</li> </ul>
     * @return {module:model/Output.FormatEnum}
     */
    getFormat() {
        return this.format;
    }

    /**
     * Sets The output format and type of media file to generate. <ul>   <li>`mp4` - mp4 video file</li>   <li>`gif` - animated gif</li>   <li>`jpg` - jpg image file</li>   <li>`png` - png image file</li>   <li>`bmp` - bmp image file</li>   <li>`mp3` - mp3 audio file (audio only)</li> </ul>
     * @param {module:model/Output.FormatEnum} format The output format and type of media file to generate. <ul>   <li>`mp4` - mp4 video file</li>   <li>`gif` - animated gif</li>   <li>`jpg` - jpg image file</li>   <li>`png` - png image file</li>   <li>`bmp` - bmp image file</li>   <li>`mp3` - mp3 audio file (audio only)</li> </ul>
     */
    setFormat(format) {
        this['format'] = format;
        return this;
    }
/**
     * Returns The preset output resolution of the video or image. For custom sizes use the `size` property. <ul>   <li>`preview` - 512px x 288px @ 15fps</li>   <li>`mobile` - 640px x 360px @ 25fps</li>   <li>`sd` - 1024px x 576px @ 25fps</li>   <li>`hd` - 1280px x 720px @ 25fps</li>   <li>`1080` - 1920px x 1080px @ 25fps</li>   <li>`4k` - 3840px x 2160px @ 25fps</li> </ul>
     * @return {module:model/Output.ResolutionEnum}
     */
    getResolution() {
        return this.resolution;
    }

    /**
     * Sets The preset output resolution of the video or image. For custom sizes use the `size` property. <ul>   <li>`preview` - 512px x 288px @ 15fps</li>   <li>`mobile` - 640px x 360px @ 25fps</li>   <li>`sd` - 1024px x 576px @ 25fps</li>   <li>`hd` - 1280px x 720px @ 25fps</li>   <li>`1080` - 1920px x 1080px @ 25fps</li>   <li>`4k` - 3840px x 2160px @ 25fps</li> </ul>
     * @param {module:model/Output.ResolutionEnum} resolution The preset output resolution of the video or image. For custom sizes use the `size` property. <ul>   <li>`preview` - 512px x 288px @ 15fps</li>   <li>`mobile` - 640px x 360px @ 25fps</li>   <li>`sd` - 1024px x 576px @ 25fps</li>   <li>`hd` - 1280px x 720px @ 25fps</li>   <li>`1080` - 1920px x 1080px @ 25fps</li>   <li>`4k` - 3840px x 2160px @ 25fps</li> </ul>
     */
    setResolution(resolution) {
        this['resolution'] = resolution;
        return this;
    }
/**
     * Returns The aspect ratio (shape) of the video or image. Useful for social media output formats. Options are: <ul>   <li>`16:9` (default) - regular landscape/horizontal aspect ratio</li>   <li>`9:16` - vertical/portrait aspect ratio</li>   <li>`1:1` - square aspect ratio</li>   <li>`4:5` - short vertical/portrait aspect ratio</li>   <li>`4:3` - legacy TV aspect ratio</li> </ul>
     * @return {module:model/Output.AspectRatioEnum}
     */
    getAspectRatio() {
        return this.aspectRatio;
    }

    /**
     * Sets The aspect ratio (shape) of the video or image. Useful for social media output formats. Options are: <ul>   <li>`16:9` (default) - regular landscape/horizontal aspect ratio</li>   <li>`9:16` - vertical/portrait aspect ratio</li>   <li>`1:1` - square aspect ratio</li>   <li>`4:5` - short vertical/portrait aspect ratio</li>   <li>`4:3` - legacy TV aspect ratio</li> </ul>
     * @param {module:model/Output.AspectRatioEnum} aspectRatio The aspect ratio (shape) of the video or image. Useful for social media output formats. Options are: <ul>   <li>`16:9` (default) - regular landscape/horizontal aspect ratio</li>   <li>`9:16` - vertical/portrait aspect ratio</li>   <li>`1:1` - square aspect ratio</li>   <li>`4:5` - short vertical/portrait aspect ratio</li>   <li>`4:3` - legacy TV aspect ratio</li> </ul>
     */
    setAspectRatio(aspectRatio) {
        this['aspectRatio'] = aspectRatio;
        return this;
    }
/**
     * @return {module:model/Size}
     */
    getSize() {
        return this.size;
    }

    /**
     * @param {module:model/Size} size
     */
    setSize(size) {
        this['size'] = size;
        return this;
    }
/**
     * Returns Override the default frames per second. Useful for when the source footage is recorded at 30fps, i.e. on  mobile devices. Lower frame rates can be used to add cinematic quality (24fps) or to create smaller file size/faster render times or animated gifs (12 or 15fps). Default is 25fps. <ul>   <li>`12` - 12fps</li>   <li>`15` - 15fps</li>   <li>`24` - 24fps</li>   <li>`23.976` - 23.976fps</li>   <li>`25` (default) - 25fps</li>   <li>`29.97` - 29.97fps</li>   <li>`30` - 30fps</li>   <li>`48` - 48fps</li>   <li>`50` - 50fps</li>   <li>`59.94` - 59.94fps</li>   <li>`60` - 60fps</li> </ul>
     * @return {module:model/Output.FpsEnum}
     */
    getFps() {
        return this.fps;
    }

    /**
     * Sets Override the default frames per second. Useful for when the source footage is recorded at 30fps, i.e. on  mobile devices. Lower frame rates can be used to add cinematic quality (24fps) or to create smaller file size/faster render times or animated gifs (12 or 15fps). Default is 25fps. <ul>   <li>`12` - 12fps</li>   <li>`15` - 15fps</li>   <li>`24` - 24fps</li>   <li>`23.976` - 23.976fps</li>   <li>`25` (default) - 25fps</li>   <li>`29.97` - 29.97fps</li>   <li>`30` - 30fps</li>   <li>`48` - 48fps</li>   <li>`50` - 50fps</li>   <li>`59.94` - 59.94fps</li>   <li>`60` - 60fps</li> </ul>
     * @param {module:model/Output.FpsEnum} fps Override the default frames per second. Useful for when the source footage is recorded at 30fps, i.e. on  mobile devices. Lower frame rates can be used to add cinematic quality (24fps) or to create smaller file size/faster render times or animated gifs (12 or 15fps). Default is 25fps. <ul>   <li>`12` - 12fps</li>   <li>`15` - 15fps</li>   <li>`24` - 24fps</li>   <li>`23.976` - 23.976fps</li>   <li>`25` (default) - 25fps</li>   <li>`29.97` - 29.97fps</li>   <li>`30` - 30fps</li>   <li>`48` - 48fps</li>   <li>`50` - 50fps</li>   <li>`59.94` - 59.94fps</li>   <li>`60` - 60fps</li> </ul>
     */
    setFps(fps) {
        this['fps'] = fps;
        return this;
    }
/**
     * Returns Override the resolution and scale the video or image to render at a different size. When using scaleTo the asset should be edited at the resolution dimensions, i.e. use font sizes that look best at HD, then use scaleTo to output the file at SD and the text will be scaled to the correct size. This is useful if you want to create multiple asset sizes. <ul>   <li>`preview` - 512px x 288px @ 15fps</li>   <li>`mobile` - 640px x 360px @ 25fps</li>   <li>`sd` - 1024px x 576px @25fps</li>   <li>`hd` - 1280px x 720px @25fps</li>   <li>`1080` - 1920px x 1080px @25fps</li> </ul>
     * @return {module:model/Output.ScaleToEnum}
     */
    getScaleTo() {
        return this.scaleTo;
    }

    /**
     * Sets Override the resolution and scale the video or image to render at a different size. When using scaleTo the asset should be edited at the resolution dimensions, i.e. use font sizes that look best at HD, then use scaleTo to output the file at SD and the text will be scaled to the correct size. This is useful if you want to create multiple asset sizes. <ul>   <li>`preview` - 512px x 288px @ 15fps</li>   <li>`mobile` - 640px x 360px @ 25fps</li>   <li>`sd` - 1024px x 576px @25fps</li>   <li>`hd` - 1280px x 720px @25fps</li>   <li>`1080` - 1920px x 1080px @25fps</li> </ul>
     * @param {module:model/Output.ScaleToEnum} scaleTo Override the resolution and scale the video or image to render at a different size. When using scaleTo the asset should be edited at the resolution dimensions, i.e. use font sizes that look best at HD, then use scaleTo to output the file at SD and the text will be scaled to the correct size. This is useful if you want to create multiple asset sizes. <ul>   <li>`preview` - 512px x 288px @ 15fps</li>   <li>`mobile` - 640px x 360px @ 25fps</li>   <li>`sd` - 1024px x 576px @25fps</li>   <li>`hd` - 1280px x 720px @25fps</li>   <li>`1080` - 1920px x 1080px @25fps</li> </ul>
     */
    setScaleTo(scaleTo) {
        this['scaleTo'] = scaleTo;
        return this;
    }
/**
     * Returns Adjust the output quality of the video, image or audio. Adjusting quality affects  render speed, download speeds and storage requirements due to file size. The default `medium` provides the most optimized choice for all three  factors. <ul>   <li>`verylow` - reduced quality, smallest file size</li>   <li>`low` - slightly reduced quality, smaller file size</li>   <li>`medium` (default) - optimized quality, render speeds and file size</li>   <li>`high` - slightly increased quality, larger file size</li>   <li>`veryhigh` - highest quality, largest file size</li> </ul>
     * @return {module:model/Output.QualityEnum}
     */
    getQuality() {
        return this.quality;
    }

    /**
     * Sets Adjust the output quality of the video, image or audio. Adjusting quality affects  render speed, download speeds and storage requirements due to file size. The default `medium` provides the most optimized choice for all three  factors. <ul>   <li>`verylow` - reduced quality, smallest file size</li>   <li>`low` - slightly reduced quality, smaller file size</li>   <li>`medium` (default) - optimized quality, render speeds and file size</li>   <li>`high` - slightly increased quality, larger file size</li>   <li>`veryhigh` - highest quality, largest file size</li> </ul>
     * @param {module:model/Output.QualityEnum} quality Adjust the output quality of the video, image or audio. Adjusting quality affects  render speed, download speeds and storage requirements due to file size. The default `medium` provides the most optimized choice for all three  factors. <ul>   <li>`verylow` - reduced quality, smallest file size</li>   <li>`low` - slightly reduced quality, smaller file size</li>   <li>`medium` (default) - optimized quality, render speeds and file size</li>   <li>`high` - slightly increased quality, larger file size</li>   <li>`veryhigh` - highest quality, largest file size</li> </ul>
     */
    setQuality(quality) {
        this['quality'] = quality;
        return this;
    }
/**
     * Returns Loop settings for gif files. Set to `true` to loop, `false` to play only once.
     * @return {Boolean}
     */
    getRepeat() {
        return this.repeat;
    }

    /**
     * Sets Loop settings for gif files. Set to `true` to loop, `false` to play only once.
     * @param {Boolean} repeat Loop settings for gif files. Set to `true` to loop, `false` to play only once.
     */
    setRepeat(repeat) {
        this['repeat'] = repeat;
        return this;
    }
/**
     * Returns Mute the audio track of the output video. Set to `true` to mute, `false` to un-mute.
     * @return {Boolean}
     */
    getMute() {
        return this.mute;
    }

    /**
     * Sets Mute the audio track of the output video. Set to `true` to mute, `false` to un-mute.
     * @param {Boolean} mute Mute the audio track of the output video. Set to `true` to mute, `false` to un-mute.
     */
    setMute(mute) {
        this['mute'] = mute;
        return this;
    }
/**
     * @return {module:model/Range}
     */
    getRange() {
        return this.range;
    }

    /**
     * @param {module:model/Range} range
     */
    setRange(range) {
        this['range'] = range;
        return this;
    }
/**
     * @return {module:model/Poster}
     */
    getPoster() {
        return this.poster;
    }

    /**
     * @param {module:model/Poster} poster
     */
    setPoster(poster) {
        this['poster'] = poster;
        return this;
    }
/**
     * @return {module:model/Thumbnail}
     */
    getThumbnail() {
        return this.thumbnail;
    }

    /**
     * @param {module:model/Thumbnail} thumbnail
     */
    setThumbnail(thumbnail) {
        this['thumbnail'] = thumbnail;
        return this;
    }
/**
     * Returns Specify the storage locations and hosting services to send rendered videos to.
     * @return {Array.<module:model/Destinations>}
     */
    getDestinations() {
        return this.destinations;
    }

    /**
     * Sets Specify the storage locations and hosting services to send rendered videos to.
     * @param {Array.<module:model/Destinations>} destinations Specify the storage locations and hosting services to send rendered videos to.
     */
    setDestinations(destinations) {
        this['destinations'] = destinations;
        return this;
    }

}

Output.RequiredProperties = ["format"];

/**
 * The output format and type of media file to generate. <ul>   <li>`mp4` - mp4 video file</li>   <li>`gif` - animated gif</li>   <li>`jpg` - jpg image file</li>   <li>`png` - png image file</li>   <li>`bmp` - bmp image file</li>   <li>`mp3` - mp3 audio file (audio only)</li> </ul>
 * @member {module:model/Output.FormatEnum} format
 */
Output.prototype['format'] = undefined;

/**
 * The preset output resolution of the video or image. For custom sizes use the `size` property. <ul>   <li>`preview` - 512px x 288px @ 15fps</li>   <li>`mobile` - 640px x 360px @ 25fps</li>   <li>`sd` - 1024px x 576px @ 25fps</li>   <li>`hd` - 1280px x 720px @ 25fps</li>   <li>`1080` - 1920px x 1080px @ 25fps</li>   <li>`4k` - 3840px x 2160px @ 25fps</li> </ul>
 * @member {module:model/Output.ResolutionEnum} resolution
 */
Output.prototype['resolution'] = undefined;

/**
 * The aspect ratio (shape) of the video or image. Useful for social media output formats. Options are: <ul>   <li>`16:9` (default) - regular landscape/horizontal aspect ratio</li>   <li>`9:16` - vertical/portrait aspect ratio</li>   <li>`1:1` - square aspect ratio</li>   <li>`4:5` - short vertical/portrait aspect ratio</li>   <li>`4:3` - legacy TV aspect ratio</li> </ul>
 * @member {module:model/Output.AspectRatioEnum} aspectRatio
 */
Output.prototype['aspectRatio'] = undefined;

/**
 * @member {module:model/Size} size
 */
Output.prototype['size'] = undefined;

/**
 * Override the default frames per second. Useful for when the source footage is recorded at 30fps, i.e. on  mobile devices. Lower frame rates can be used to add cinematic quality (24fps) or to create smaller file size/faster render times or animated gifs (12 or 15fps). Default is 25fps. <ul>   <li>`12` - 12fps</li>   <li>`15` - 15fps</li>   <li>`24` - 24fps</li>   <li>`23.976` - 23.976fps</li>   <li>`25` (default) - 25fps</li>   <li>`29.97` - 29.97fps</li>   <li>`30` - 30fps</li>   <li>`48` - 48fps</li>   <li>`50` - 50fps</li>   <li>`59.94` - 59.94fps</li>   <li>`60` - 60fps</li> </ul>
 * @member {module:model/Output.FpsEnum} fps
 */
Output.prototype['fps'] = undefined;

/**
 * Override the resolution and scale the video or image to render at a different size. When using scaleTo the asset should be edited at the resolution dimensions, i.e. use font sizes that look best at HD, then use scaleTo to output the file at SD and the text will be scaled to the correct size. This is useful if you want to create multiple asset sizes. <ul>   <li>`preview` - 512px x 288px @ 15fps</li>   <li>`mobile` - 640px x 360px @ 25fps</li>   <li>`sd` - 1024px x 576px @25fps</li>   <li>`hd` - 1280px x 720px @25fps</li>   <li>`1080` - 1920px x 1080px @25fps</li> </ul>
 * @member {module:model/Output.ScaleToEnum} scaleTo
 */
Output.prototype['scaleTo'] = undefined;

/**
 * Adjust the output quality of the video, image or audio. Adjusting quality affects  render speed, download speeds and storage requirements due to file size. The default `medium` provides the most optimized choice for all three  factors. <ul>   <li>`verylow` - reduced quality, smallest file size</li>   <li>`low` - slightly reduced quality, smaller file size</li>   <li>`medium` (default) - optimized quality, render speeds and file size</li>   <li>`high` - slightly increased quality, larger file size</li>   <li>`veryhigh` - highest quality, largest file size</li> </ul>
 * @member {module:model/Output.QualityEnum} quality
 */
Output.prototype['quality'] = undefined;

/**
 * Loop settings for gif files. Set to `true` to loop, `false` to play only once.
 * @member {Boolean} repeat
 */
Output.prototype['repeat'] = undefined;

/**
 * Mute the audio track of the output video. Set to `true` to mute, `false` to un-mute.
 * @member {Boolean} mute
 */
Output.prototype['mute'] = undefined;

/**
 * @member {module:model/Range} range
 */
Output.prototype['range'] = undefined;

/**
 * @member {module:model/Poster} poster
 */
Output.prototype['poster'] = undefined;

/**
 * @member {module:model/Thumbnail} thumbnail
 */
Output.prototype['thumbnail'] = undefined;

/**
 * Specify the storage locations and hosting services to send rendered videos to.
 * @member {Array.<module:model/Destinations>} destinations
 */
Output.prototype['destinations'] = undefined;





/**
 * Allowed values for the <code>format</code> property.
 * @enum {String}
 * @readonly
 */
Output['FormatEnum'] = {

    /**
     * value: "mp4"
     * @const
     */
    "mp4": "mp4",

    /**
     * value: "gif"
     * @const
     */
    "gif": "gif",

    /**
     * value: "mp3"
     * @const
     */
    "mp3": "mp3",

    /**
     * value: "jpg"
     * @const
     */
    "jpg": "jpg",

    /**
     * value: "png"
     * @const
     */
    "png": "png",

    /**
     * value: "bmp"
     * @const
     */
    "bmp": "bmp"
};


/**
 * Allowed values for the <code>resolution</code> property.
 * @enum {String}
 * @readonly
 */
Output['ResolutionEnum'] = {

    /**
     * value: "preview"
     * @const
     */
    "preview": "preview",

    /**
     * value: "mobile"
     * @const
     */
    "mobile": "mobile",

    /**
     * value: "sd"
     * @const
     */
    "sd": "sd",

    /**
     * value: "hd"
     * @const
     */
    "hd": "hd",

    /**
     * value: "1080"
     * @const
     */
    "1080": "1080",

    /**
     * value: "4k"
     * @const
     */
    "4k": "4k"
};


/**
 * Allowed values for the <code>aspectRatio</code> property.
 * @enum {String}
 * @readonly
 */
Output['AspectRatioEnum'] = {

    /**
     * value: "16:9"
     * @const
     */
    "16:9": "16:9",

    /**
     * value: "9:16"
     * @const
     */
    "9:16": "9:16",

    /**
     * value: "1:1"
     * @const
     */
    "1:1": "1:1",

    /**
     * value: "4:5"
     * @const
     */
    "4:5": "4:5",

    /**
     * value: "4:3"
     * @const
     */
    "4:3": "4:3"
};


/**
 * Allowed values for the <code>fps</code> property.
 * @enum {Number}
 * @readonly
 */
Output['FpsEnum'] = {

    /**
     * value: 12
     * @const
     */
    "12": 12,

    /**
     * value: 15
     * @const
     */
    "15": 15,

    /**
     * value: 23.976
     * @const
     */
    "23.976": 23.976,

    /**
     * value: 24
     * @const
     */
    "24": 24,

    /**
     * value: 25
     * @const
     */
    "25": 25,

    /**
     * value: 29.97
     * @const
     */
    "29.97": 29.97,

    /**
     * value: 30
     * @const
     */
    "30": 30,

    /**
     * value: 48
     * @const
     */
    "48": 48,

    /**
     * value: 50
     * @const
     */
    "50": 50,

    /**
     * value: 59.94
     * @const
     */
    "59.94": 59.94,

    /**
     * value: 60
     * @const
     */
    "60": 60
};


/**
 * Allowed values for the <code>scaleTo</code> property.
 * @enum {String}
 * @readonly
 */
Output['ScaleToEnum'] = {

    /**
     * value: "preview"
     * @const
     */
    "preview": "preview",

    /**
     * value: "mobile"
     * @const
     */
    "mobile": "mobile",

    /**
     * value: "sd"
     * @const
     */
    "sd": "sd",

    /**
     * value: "hd"
     * @const
     */
    "hd": "hd",

    /**
     * value: "1080"
     * @const
     */
    "1080": "1080"
};


/**
 * Allowed values for the <code>quality</code> property.
 * @enum {String}
 * @readonly
 */
Output['QualityEnum'] = {

    /**
     * value: "verylow"
     * @const
     */
    "verylow": "verylow",

    /**
     * value: "low"
     * @const
     */
    "low": "low",

    /**
     * value: "medium"
     * @const
     */
    "medium": "medium",

    /**
     * value: "high"
     * @const
     */
    "high": "high",

    /**
     * value: "veryhigh"
     * @const
     */
    "veryhigh": "veryhigh"
};



export default Output;

