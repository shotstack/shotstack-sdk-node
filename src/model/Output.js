"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _Destinations = _interopRequireDefault(require("./Destinations"));
var _Poster = _interopRequireDefault(require("./Poster"));
var _Range = _interopRequireDefault(require("./Range"));
var _Size = _interopRequireDefault(require("./Size"));
var _Thumbnail = _interopRequireDefault(require("./Thumbnail"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Shotstack
 * Official Node SDK for the Shotstack Cloud Video Editing API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
 * The Output model module.
 * @module model/Output
 * @version 0.2.9
 */
var Output = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>Output</code>.
   * The output format, render range and type of media to generate.
   * @alias module:model/Output
   * @param format {module:model/Output.FormatEnum} The output format and type of media file to generate. <ul>   <li>`mp4` - mp4 video file</li>   <li>`gif` - animated gif</li>   <li>`jpg` - jpg image file</li>   <li>`png` - png image file</li>   <li>`bmp` - bmp image file</li>   <li>`mp3` - mp3 audio file (audio only)</li> </ul>
   */
  function Output(format) {
    _classCallCheck(this, Output);
    Output.initialize(this, format);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  return _createClass(Output, [{
    key: "getFormat",
    value:
    /**
         * Returns The output format and type of media file to generate. <ul>   <li>`mp4` - mp4 video file</li>   <li>`gif` - animated gif</li>   <li>`jpg` - jpg image file</li>   <li>`png` - png image file</li>   <li>`bmp` - bmp image file</li>   <li>`mp3` - mp3 audio file (audio only)</li> </ul>
         * @return {module:model/Output.FormatEnum}
         */
    function getFormat() {
      return this.format;
    }

    /**
     * Sets The output format and type of media file to generate. <ul>   <li>`mp4` - mp4 video file</li>   <li>`gif` - animated gif</li>   <li>`jpg` - jpg image file</li>   <li>`png` - png image file</li>   <li>`bmp` - bmp image file</li>   <li>`mp3` - mp3 audio file (audio only)</li> </ul>
     * @param {module:model/Output.FormatEnum} format The output format and type of media file to generate. <ul>   <li>`mp4` - mp4 video file</li>   <li>`gif` - animated gif</li>   <li>`jpg` - jpg image file</li>   <li>`png` - png image file</li>   <li>`bmp` - bmp image file</li>   <li>`mp3` - mp3 audio file (audio only)</li> </ul>
     */
  }, {
    key: "setFormat",
    value: function setFormat(format) {
      this['format'] = format;
      return this;
    }
    /**
         * Returns The preset output resolution of the video or image. For custom sizes use the `size` property. <ul>   <li>`preview` - 512px x 288px @ 15fps</li>   <li>`mobile` - 640px x 360px @ 25fps</li>   <li>`sd` - 1024px x 576px @ 25fps</li>   <li>`hd` - 1280px x 720px @ 25fps</li>   <li>`1080` - 1920px x 1080px @ 25fps</li>   <li>`4k` - 3840px x 2160px @ 25fps</li> </ul>
         * @return {module:model/Output.ResolutionEnum}
         */
  }, {
    key: "getResolution",
    value: function getResolution() {
      return this.resolution;
    }

    /**
     * Sets The preset output resolution of the video or image. For custom sizes use the `size` property. <ul>   <li>`preview` - 512px x 288px @ 15fps</li>   <li>`mobile` - 640px x 360px @ 25fps</li>   <li>`sd` - 1024px x 576px @ 25fps</li>   <li>`hd` - 1280px x 720px @ 25fps</li>   <li>`1080` - 1920px x 1080px @ 25fps</li>   <li>`4k` - 3840px x 2160px @ 25fps</li> </ul>
     * @param {module:model/Output.ResolutionEnum} resolution The preset output resolution of the video or image. For custom sizes use the `size` property. <ul>   <li>`preview` - 512px x 288px @ 15fps</li>   <li>`mobile` - 640px x 360px @ 25fps</li>   <li>`sd` - 1024px x 576px @ 25fps</li>   <li>`hd` - 1280px x 720px @ 25fps</li>   <li>`1080` - 1920px x 1080px @ 25fps</li>   <li>`4k` - 3840px x 2160px @ 25fps</li> </ul>
     */
  }, {
    key: "setResolution",
    value: function setResolution(resolution) {
      this['resolution'] = resolution;
      return this;
    }
    /**
         * Returns The aspect ratio (shape) of the video or image. Useful for social media output formats. Options are: <ul>   <li>`16:9` (default) - regular landscape/horizontal aspect ratio</li>   <li>`9:16` - vertical/portrait aspect ratio</li>   <li>`1:1` - square aspect ratio</li>   <li>`4:5` - short vertical/portrait aspect ratio</li>   <li>`4:3` - legacy TV aspect ratio</li> </ul>
         * @return {module:model/Output.AspectRatioEnum}
         */
  }, {
    key: "getAspectRatio",
    value: function getAspectRatio() {
      return this.aspectRatio;
    }

    /**
     * Sets The aspect ratio (shape) of the video or image. Useful for social media output formats. Options are: <ul>   <li>`16:9` (default) - regular landscape/horizontal aspect ratio</li>   <li>`9:16` - vertical/portrait aspect ratio</li>   <li>`1:1` - square aspect ratio</li>   <li>`4:5` - short vertical/portrait aspect ratio</li>   <li>`4:3` - legacy TV aspect ratio</li> </ul>
     * @param {module:model/Output.AspectRatioEnum} aspectRatio The aspect ratio (shape) of the video or image. Useful for social media output formats. Options are: <ul>   <li>`16:9` (default) - regular landscape/horizontal aspect ratio</li>   <li>`9:16` - vertical/portrait aspect ratio</li>   <li>`1:1` - square aspect ratio</li>   <li>`4:5` - short vertical/portrait aspect ratio</li>   <li>`4:3` - legacy TV aspect ratio</li> </ul>
     */
  }, {
    key: "setAspectRatio",
    value: function setAspectRatio(aspectRatio) {
      this['aspectRatio'] = aspectRatio;
      return this;
    }
    /**
         * @return {module:model/Size}
         */
  }, {
    key: "getSize",
    value: function getSize() {
      return this.size;
    }

    /**
     * @param {module:model/Size} size
     */
  }, {
    key: "setSize",
    value: function setSize(size) {
      this['size'] = size;
      return this;
    }
    /**
         * Returns Override the default frames per second. Useful for when the source footage is recorded at 30fps, i.e. on  mobile devices. Lower frame rates can be used to add cinematic quality (24fps) or to create smaller file size/faster render times or animated gifs (12 or 15fps). Default is 25fps. <ul>   <li>`12` - 12fps</li>   <li>`15` - 15fps</li>   <li>`24` - 24fps</li>   <li>`23.976` - 23.976fps</li>   <li>`25` (default) - 25fps</li>   <li>`29.97` - 29.97fps</li>   <li>`30` - 30fps</li>   <li>`48` - 48fps</li>   <li>`50` - 50fps</li>   <li>`59.94` - 59.94fps</li>   <li>`60` - 60fps</li> </ul>
         * @return {module:model/Output.FpsEnum}
         */
  }, {
    key: "getFps",
    value: function getFps() {
      return this.fps;
    }

    /**
     * Sets Override the default frames per second. Useful for when the source footage is recorded at 30fps, i.e. on  mobile devices. Lower frame rates can be used to add cinematic quality (24fps) or to create smaller file size/faster render times or animated gifs (12 or 15fps). Default is 25fps. <ul>   <li>`12` - 12fps</li>   <li>`15` - 15fps</li>   <li>`24` - 24fps</li>   <li>`23.976` - 23.976fps</li>   <li>`25` (default) - 25fps</li>   <li>`29.97` - 29.97fps</li>   <li>`30` - 30fps</li>   <li>`48` - 48fps</li>   <li>`50` - 50fps</li>   <li>`59.94` - 59.94fps</li>   <li>`60` - 60fps</li> </ul>
     * @param {module:model/Output.FpsEnum} fps Override the default frames per second. Useful for when the source footage is recorded at 30fps, i.e. on  mobile devices. Lower frame rates can be used to add cinematic quality (24fps) or to create smaller file size/faster render times or animated gifs (12 or 15fps). Default is 25fps. <ul>   <li>`12` - 12fps</li>   <li>`15` - 15fps</li>   <li>`24` - 24fps</li>   <li>`23.976` - 23.976fps</li>   <li>`25` (default) - 25fps</li>   <li>`29.97` - 29.97fps</li>   <li>`30` - 30fps</li>   <li>`48` - 48fps</li>   <li>`50` - 50fps</li>   <li>`59.94` - 59.94fps</li>   <li>`60` - 60fps</li> </ul>
     */
  }, {
    key: "setFps",
    value: function setFps(fps) {
      this['fps'] = fps;
      return this;
    }
    /**
         * Returns Override the resolution and scale the video or image to render at a different size. When using scaleTo the asset should be edited at the resolution dimensions, i.e. use font sizes that look best at HD, then use scaleTo to output the file at SD and the text will be scaled to the correct size. This is useful if you want to create multiple asset sizes. <ul>   <li>`preview` - 512px x 288px @ 15fps</li>   <li>`mobile` - 640px x 360px @ 25fps</li>   <li>`sd` - 1024px x 576px @25fps</li>   <li>`hd` - 1280px x 720px @25fps</li>   <li>`1080` - 1920px x 1080px @25fps</li> </ul>
         * @return {module:model/Output.ScaleToEnum}
         */
  }, {
    key: "getScaleTo",
    value: function getScaleTo() {
      return this.scaleTo;
    }

    /**
     * Sets Override the resolution and scale the video or image to render at a different size. When using scaleTo the asset should be edited at the resolution dimensions, i.e. use font sizes that look best at HD, then use scaleTo to output the file at SD and the text will be scaled to the correct size. This is useful if you want to create multiple asset sizes. <ul>   <li>`preview` - 512px x 288px @ 15fps</li>   <li>`mobile` - 640px x 360px @ 25fps</li>   <li>`sd` - 1024px x 576px @25fps</li>   <li>`hd` - 1280px x 720px @25fps</li>   <li>`1080` - 1920px x 1080px @25fps</li> </ul>
     * @param {module:model/Output.ScaleToEnum} scaleTo Override the resolution and scale the video or image to render at a different size. When using scaleTo the asset should be edited at the resolution dimensions, i.e. use font sizes that look best at HD, then use scaleTo to output the file at SD and the text will be scaled to the correct size. This is useful if you want to create multiple asset sizes. <ul>   <li>`preview` - 512px x 288px @ 15fps</li>   <li>`mobile` - 640px x 360px @ 25fps</li>   <li>`sd` - 1024px x 576px @25fps</li>   <li>`hd` - 1280px x 720px @25fps</li>   <li>`1080` - 1920px x 1080px @25fps</li> </ul>
     */
  }, {
    key: "setScaleTo",
    value: function setScaleTo(scaleTo) {
      this['scaleTo'] = scaleTo;
      return this;
    }
    /**
         * Returns Adjust the output quality of the video, image or audio. Adjusting quality affects  render speed, download speeds and storage requirements due to file size. The default `medium` provides the most optimized choice for all three  factors. <ul>   <li>`verylow` - reduced quality, smallest file size</li>   <li>`low` - slightly reduced quality, smaller file size</li>   <li>`medium` (default) - optimized quality, render speeds and file size</li>   <li>`high` - slightly increased quality, larger file size</li>   <li>`veryhigh` - highest quality, largest file size</li> </ul>
         * @return {module:model/Output.QualityEnum}
         */
  }, {
    key: "getQuality",
    value: function getQuality() {
      return this.quality;
    }

    /**
     * Sets Adjust the output quality of the video, image or audio. Adjusting quality affects  render speed, download speeds and storage requirements due to file size. The default `medium` provides the most optimized choice for all three  factors. <ul>   <li>`verylow` - reduced quality, smallest file size</li>   <li>`low` - slightly reduced quality, smaller file size</li>   <li>`medium` (default) - optimized quality, render speeds and file size</li>   <li>`high` - slightly increased quality, larger file size</li>   <li>`veryhigh` - highest quality, largest file size</li> </ul>
     * @param {module:model/Output.QualityEnum} quality Adjust the output quality of the video, image or audio. Adjusting quality affects  render speed, download speeds and storage requirements due to file size. The default `medium` provides the most optimized choice for all three  factors. <ul>   <li>`verylow` - reduced quality, smallest file size</li>   <li>`low` - slightly reduced quality, smaller file size</li>   <li>`medium` (default) - optimized quality, render speeds and file size</li>   <li>`high` - slightly increased quality, larger file size</li>   <li>`veryhigh` - highest quality, largest file size</li> </ul>
     */
  }, {
    key: "setQuality",
    value: function setQuality(quality) {
      this['quality'] = quality;
      return this;
    }
    /**
         * Returns Loop settings for gif files. Set to `true` to loop, `false` to play only once.
         * @return {Boolean}
         */
  }, {
    key: "getRepeat",
    value: function getRepeat() {
      return this.repeat;
    }

    /**
     * Sets Loop settings for gif files. Set to `true` to loop, `false` to play only once.
     * @param {Boolean} repeat Loop settings for gif files. Set to `true` to loop, `false` to play only once.
     */
  }, {
    key: "setRepeat",
    value: function setRepeat(repeat) {
      this['repeat'] = repeat;
      return this;
    }
    /**
         * Returns Mute the audio track of the output video. Set to `true` to mute, `false` to un-mute.
         * @return {Boolean}
         */
  }, {
    key: "getMute",
    value: function getMute() {
      return this.mute;
    }

    /**
     * Sets Mute the audio track of the output video. Set to `true` to mute, `false` to un-mute.
     * @param {Boolean} mute Mute the audio track of the output video. Set to `true` to mute, `false` to un-mute.
     */
  }, {
    key: "setMute",
    value: function setMute(mute) {
      this['mute'] = mute;
      return this;
    }
    /**
         * @return {module:model/Range}
         */
  }, {
    key: "getRange",
    value: function getRange() {
      return this.range;
    }

    /**
     * @param {module:model/Range} range
     */
  }, {
    key: "setRange",
    value: function setRange(range) {
      this['range'] = range;
      return this;
    }
    /**
         * @return {module:model/Poster}
         */
  }, {
    key: "getPoster",
    value: function getPoster() {
      return this.poster;
    }

    /**
     * @param {module:model/Poster} poster
     */
  }, {
    key: "setPoster",
    value: function setPoster(poster) {
      this['poster'] = poster;
      return this;
    }
    /**
         * @return {module:model/Thumbnail}
         */
  }, {
    key: "getThumbnail",
    value: function getThumbnail() {
      return this.thumbnail;
    }

    /**
     * @param {module:model/Thumbnail} thumbnail
     */
  }, {
    key: "setThumbnail",
    value: function setThumbnail(thumbnail) {
      this['thumbnail'] = thumbnail;
      return this;
    }
    /**
         * Returns Specify the storage locations and hosting services to send rendered videos to.
         * @return {Array.<module:model/Destinations>}
         */
  }, {
    key: "getDestinations",
    value: function getDestinations() {
      return this.destinations;
    }

    /**
     * Sets Specify the storage locations and hosting services to send rendered videos to.
     * @param {Array.<module:model/Destinations>} destinations Specify the storage locations and hosting services to send rendered videos to.
     */
  }, {
    key: "setDestinations",
    value: function setDestinations(destinations) {
      this['destinations'] = destinations;
      return this;
    }
  }], [{
    key: "initialize",
    value: function initialize(obj, format) {
      obj['format'] = format;
    }

    /**
     * Constructs a <code>Output</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Output} obj Optional instance to populate.
     * @return {module:model/Output} The populated <code>Output</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new Output();
        if (data.hasOwnProperty('format')) {
          obj['format'] = _ApiClient["default"].convertToType(data['format'], 'String');
        }
        if (data.hasOwnProperty('resolution')) {
          obj['resolution'] = _ApiClient["default"].convertToType(data['resolution'], 'String');
        }
        if (data.hasOwnProperty('aspectRatio')) {
          obj['aspectRatio'] = _ApiClient["default"].convertToType(data['aspectRatio'], 'String');
        }
        if (data.hasOwnProperty('size')) {
          obj['size'] = _Size["default"].constructFromObject(data['size']);
        }
        if (data.hasOwnProperty('fps')) {
          obj['fps'] = _ApiClient["default"].convertToType(data['fps'], 'Number');
        }
        if (data.hasOwnProperty('scaleTo')) {
          obj['scaleTo'] = _ApiClient["default"].convertToType(data['scaleTo'], 'String');
        }
        if (data.hasOwnProperty('quality')) {
          obj['quality'] = _ApiClient["default"].convertToType(data['quality'], 'String');
        }
        if (data.hasOwnProperty('repeat')) {
          obj['repeat'] = _ApiClient["default"].convertToType(data['repeat'], 'Boolean');
        }
        if (data.hasOwnProperty('mute')) {
          obj['mute'] = _ApiClient["default"].convertToType(data['mute'], 'Boolean');
        }
        if (data.hasOwnProperty('range')) {
          obj['range'] = _Range["default"].constructFromObject(data['range']);
        }
        if (data.hasOwnProperty('poster')) {
          obj['poster'] = _Poster["default"].constructFromObject(data['poster']);
        }
        if (data.hasOwnProperty('thumbnail')) {
          obj['thumbnail'] = _Thumbnail["default"].constructFromObject(data['thumbnail']);
        }
        if (data.hasOwnProperty('destinations')) {
          obj['destinations'] = _ApiClient["default"].convertToType(data['destinations'], [_Destinations["default"]]);
        }
      }
      return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Output</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Output</code>.
     */
  }, {
    key: "validateJSON",
    value: function validateJSON(data) {
      // check to make sure all required properties are present in the JSON string
      var _iterator = _createForOfIteratorHelper(Output.RequiredProperties),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var property = _step.value;
          if (!data.hasOwnProperty(property)) {
            throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
          }
        }
        // ensure the json data is a string
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
        throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
      }
      // ensure the json data is a string
      if (data['resolution'] && !(typeof data['resolution'] === 'string' || data['resolution'] instanceof String)) {
        throw new Error("Expected the field `resolution` to be a primitive type in the JSON string but got " + data['resolution']);
      }
      // ensure the json data is a string
      if (data['aspectRatio'] && !(typeof data['aspectRatio'] === 'string' || data['aspectRatio'] instanceof String)) {
        throw new Error("Expected the field `aspectRatio` to be a primitive type in the JSON string but got " + data['aspectRatio']);
      }
      // validate the optional field `size`
      if (data['size']) {
        // data not null
        _Size["default"].validateJSON(data['size']);
      }
      // ensure the json data is a string
      if (data['scaleTo'] && !(typeof data['scaleTo'] === 'string' || data['scaleTo'] instanceof String)) {
        throw new Error("Expected the field `scaleTo` to be a primitive type in the JSON string but got " + data['scaleTo']);
      }
      // ensure the json data is a string
      if (data['quality'] && !(typeof data['quality'] === 'string' || data['quality'] instanceof String)) {
        throw new Error("Expected the field `quality` to be a primitive type in the JSON string but got " + data['quality']);
      }
      // validate the optional field `range`
      if (data['range']) {
        // data not null
        _Range["default"].validateJSON(data['range']);
      }
      // validate the optional field `poster`
      if (data['poster']) {
        // data not null
        _Poster["default"].validateJSON(data['poster']);
      }
      // validate the optional field `thumbnail`
      if (data['thumbnail']) {
        // data not null
        _Thumbnail["default"].validateJSON(data['thumbnail']);
      }
      if (data['destinations']) {
        // data not null
        // ensure the json data is an array
        if (!Array.isArray(data['destinations'])) {
          throw new Error("Expected the field `destinations` to be an array in the JSON data but got " + data['destinations']);
        }
        // validate the optional field `destinations` (array)
        var _iterator2 = _createForOfIteratorHelper(data['destinations']),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var item = _step2.value;
            _Destinations["default"].validateJSON(item);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
        ;
      }
      return true;
    }
  }]);
}();
Output.RequiredProperties = ["format"];

/**
 * The output format and type of media file to generate. <ul>   <li>`mp4` - mp4 video file</li>   <li>`gif` - animated gif</li>   <li>`jpg` - jpg image file</li>   <li>`png` - png image file</li>   <li>`bmp` - bmp image file</li>   <li>`mp3` - mp3 audio file (audio only)</li> </ul>
 * @member {module:model/Output.FormatEnum} format
 */
Output.prototype['format'] = undefined;

/**
 * The preset output resolution of the video or image. For custom sizes use the `size` property. <ul>   <li>`preview` - 512px x 288px @ 15fps</li>   <li>`mobile` - 640px x 360px @ 25fps</li>   <li>`sd` - 1024px x 576px @ 25fps</li>   <li>`hd` - 1280px x 720px @ 25fps</li>   <li>`1080` - 1920px x 1080px @ 25fps</li>   <li>`4k` - 3840px x 2160px @ 25fps</li> </ul>
 * @member {module:model/Output.ResolutionEnum} resolution
 */
Output.prototype['resolution'] = undefined;

/**
 * The aspect ratio (shape) of the video or image. Useful for social media output formats. Options are: <ul>   <li>`16:9` (default) - regular landscape/horizontal aspect ratio</li>   <li>`9:16` - vertical/portrait aspect ratio</li>   <li>`1:1` - square aspect ratio</li>   <li>`4:5` - short vertical/portrait aspect ratio</li>   <li>`4:3` - legacy TV aspect ratio</li> </ul>
 * @member {module:model/Output.AspectRatioEnum} aspectRatio
 */
Output.prototype['aspectRatio'] = undefined;

/**
 * @member {module:model/Size} size
 */
Output.prototype['size'] = undefined;

/**
 * Override the default frames per second. Useful for when the source footage is recorded at 30fps, i.e. on  mobile devices. Lower frame rates can be used to add cinematic quality (24fps) or to create smaller file size/faster render times or animated gifs (12 or 15fps). Default is 25fps. <ul>   <li>`12` - 12fps</li>   <li>`15` - 15fps</li>   <li>`24` - 24fps</li>   <li>`23.976` - 23.976fps</li>   <li>`25` (default) - 25fps</li>   <li>`29.97` - 29.97fps</li>   <li>`30` - 30fps</li>   <li>`48` - 48fps</li>   <li>`50` - 50fps</li>   <li>`59.94` - 59.94fps</li>   <li>`60` - 60fps</li> </ul>
 * @member {module:model/Output.FpsEnum} fps
 */
Output.prototype['fps'] = undefined;

/**
 * Override the resolution and scale the video or image to render at a different size. When using scaleTo the asset should be edited at the resolution dimensions, i.e. use font sizes that look best at HD, then use scaleTo to output the file at SD and the text will be scaled to the correct size. This is useful if you want to create multiple asset sizes. <ul>   <li>`preview` - 512px x 288px @ 15fps</li>   <li>`mobile` - 640px x 360px @ 25fps</li>   <li>`sd` - 1024px x 576px @25fps</li>   <li>`hd` - 1280px x 720px @25fps</li>   <li>`1080` - 1920px x 1080px @25fps</li> </ul>
 * @member {module:model/Output.ScaleToEnum} scaleTo
 */
Output.prototype['scaleTo'] = undefined;

/**
 * Adjust the output quality of the video, image or audio. Adjusting quality affects  render speed, download speeds and storage requirements due to file size. The default `medium` provides the most optimized choice for all three  factors. <ul>   <li>`verylow` - reduced quality, smallest file size</li>   <li>`low` - slightly reduced quality, smaller file size</li>   <li>`medium` (default) - optimized quality, render speeds and file size</li>   <li>`high` - slightly increased quality, larger file size</li>   <li>`veryhigh` - highest quality, largest file size</li> </ul>
 * @member {module:model/Output.QualityEnum} quality
 */
Output.prototype['quality'] = undefined;

/**
 * Loop settings for gif files. Set to `true` to loop, `false` to play only once.
 * @member {Boolean} repeat
 */
Output.prototype['repeat'] = undefined;

/**
 * Mute the audio track of the output video. Set to `true` to mute, `false` to un-mute.
 * @member {Boolean} mute
 */
Output.prototype['mute'] = undefined;

/**
 * @member {module:model/Range} range
 */
Output.prototype['range'] = undefined;

/**
 * @member {module:model/Poster} poster
 */
Output.prototype['poster'] = undefined;

/**
 * @member {module:model/Thumbnail} thumbnail
 */
Output.prototype['thumbnail'] = undefined;

/**
 * Specify the storage locations and hosting services to send rendered videos to.
 * @member {Array.<module:model/Destinations>} destinations
 */
Output.prototype['destinations'] = undefined;

/**
 * Allowed values for the <code>format</code> property.
 * @enum {String}
 * @readonly
 */
Output['FormatEnum'] = {
  /**
   * value: "mp4"
   * @const
   */
  "mp4": "mp4",
  /**
   * value: "gif"
   * @const
   */
  "gif": "gif",
  /**
   * value: "mp3"
   * @const
   */
  "mp3": "mp3",
  /**
   * value: "jpg"
   * @const
   */
  "jpg": "jpg",
  /**
   * value: "png"
   * @const
   */
  "png": "png",
  /**
   * value: "bmp"
   * @const
   */
  "bmp": "bmp"
};

/**
 * Allowed values for the <code>resolution</code> property.
 * @enum {String}
 * @readonly
 */
Output['ResolutionEnum'] = {
  /**
   * value: "preview"
   * @const
   */
  "preview": "preview",
  /**
   * value: "mobile"
   * @const
   */
  "mobile": "mobile",
  /**
   * value: "sd"
   * @const
   */
  "sd": "sd",
  /**
   * value: "hd"
   * @const
   */
  "hd": "hd",
  /**
   * value: "1080"
   * @const
   */
  "1080": "1080",
  /**
   * value: "4k"
   * @const
   */
  "4k": "4k"
};

/**
 * Allowed values for the <code>aspectRatio</code> property.
 * @enum {String}
 * @readonly
 */
Output['AspectRatioEnum'] = {
  /**
   * value: "16:9"
   * @const
   */
  "16:9": "16:9",
  /**
   * value: "9:16"
   * @const
   */
  "9:16": "9:16",
  /**
   * value: "1:1"
   * @const
   */
  "1:1": "1:1",
  /**
   * value: "4:5"
   * @const
   */
  "4:5": "4:5",
  /**
   * value: "4:3"
   * @const
   */
  "4:3": "4:3"
};

/**
 * Allowed values for the <code>fps</code> property.
 * @enum {Number}
 * @readonly
 */
Output['FpsEnum'] = {
  /**
   * value: 12
   * @const
   */
  "12": 12,
  /**
   * value: 15
   * @const
   */
  "15": 15,
  /**
   * value: 23.976
   * @const
   */
  "23.976": 23.976,
  /**
   * value: 24
   * @const
   */
  "24": 24,
  /**
   * value: 25
   * @const
   */
  "25": 25,
  /**
   * value: 29.97
   * @const
   */
  "29.97": 29.97,
  /**
   * value: 30
   * @const
   */
  "30": 30,
  /**
   * value: 48
   * @const
   */
  "48": 48,
  /**
   * value: 50
   * @const
   */
  "50": 50,
  /**
   * value: 59.94
   * @const
   */
  "59.94": 59.94,
  /**
   * value: 60
   * @const
   */
  "60": 60
};

/**
 * Allowed values for the <code>scaleTo</code> property.
 * @enum {String}
 * @readonly
 */
Output['ScaleToEnum'] = {
  /**
   * value: "preview"
   * @const
   */
  "preview": "preview",
  /**
   * value: "mobile"
   * @const
   */
  "mobile": "mobile",
  /**
   * value: "sd"
   * @const
   */
  "sd": "sd",
  /**
   * value: "hd"
   * @const
   */
  "hd": "hd",
  /**
   * value: "1080"
   * @const
   */
  "1080": "1080"
};

/**
 * Allowed values for the <code>quality</code> property.
 * @enum {String}
 * @readonly
 */
Output['QualityEnum'] = {
  /**
   * value: "verylow"
   * @const
   */
  "verylow": "verylow",
  /**
   * value: "low"
   * @const
   */
  "low": "low",
  /**
   * value: "medium"
   * @const
   */
  "medium": "medium",
  /**
   * value: "high"
   * @const
   */
  "high": "high",
  /**
   * value: "veryhigh"
   * @const
   */
  "veryhigh": "veryhigh"
};
var _default = exports["default"] = Output;