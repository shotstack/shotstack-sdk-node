/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.io/docs/guide/) documentation.  There are three API's, one for editing and generating assets (Edit API), one for managing hosted assets (Serve API) and one for ingesting and transforming source assets (Ingest API).  Each API has it's own base URL and collection of endpoints. Each API uses the same set of API keys.  **[Edit API](#shotstack-edit)** - [https://api.shotstack.io/edit/{version}](#)<br> Edit videos, images and audio assets in the cloud using a simple JSON schema and templates.  **[Serve API](#shotstack-serve)** - [https://api.shotstack.io/serve/{version}](#)<br> Inspect and manage the hosting of assets generated by the Edit and Ingest APIs.  **[Ingest API](#shotstack-ingest)** - [https://api.shotstack.io/ingest/{version}](#)<br> Ingest (upload, store and transform) source footage, images, audio and fonts to be used by the Edit API.  **[Create API](#shotstack-create)** - [https://api.shotstack.io/create/{version}](#)<br> Generate images, videos, voice overs and text using built in and third party generative AI providers. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OutputsResponse from './OutputsResponse';

/**
 * The SourceResponseAttributes model module.
 * @module model/SourceResponseAttributes
 * @version 0.2.6
 */
class SourceResponseAttributes {
    /**
     * Constructs a new <code>SourceResponseAttributes</code>.
     * The id and attributes of the source file.
     * @alias module:model/SourceResponseAttributes
     * @param id {String} The source id.
     * @param owner {String} The owner id of the source file.
     */
    constructor(id, owner) { 
        
        SourceResponseAttributes.initialize(this, id, owner);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, owner) { 
        obj['id'] = id;
        obj['owner'] = owner;
    }

    /**
     * Constructs a <code>SourceResponseAttributes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SourceResponseAttributes} obj Optional instance to populate.
     * @return {module:model/SourceResponseAttributes} The populated <code>SourceResponseAttributes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SourceResponseAttributes();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], 'String');
            }
            if (data.hasOwnProperty('input')) {
                obj['input'] = ApiClient.convertToType(data['input'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('outputs')) {
                obj['outputs'] = OutputsResponse.constructFromObject(data['outputs']);
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'String');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('fps')) {
                obj['fps'] = ApiClient.convertToType(data['fps'], 'Number');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'String');
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SourceResponseAttributes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SourceResponseAttributes</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SourceResponseAttributes.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['owner'] && !(typeof data['owner'] === 'string' || data['owner'] instanceof String)) {
            throw new Error("Expected the field `owner` to be a primitive type in the JSON string but got " + data['owner']);
        }
        // ensure the json data is a string
        if (data['input'] && !(typeof data['input'] === 'string' || data['input'] instanceof String)) {
            throw new Error("Expected the field `input` to be a primitive type in the JSON string but got " + data['input']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `outputs`
        if (data['outputs']) { // data not null
          OutputsResponse.validateJSON(data['outputs']);
        }
        // ensure the json data is a string
        if (data['height'] && !(typeof data['height'] === 'string' || data['height'] instanceof String)) {
            throw new Error("Expected the field `height` to be a primitive type in the JSON string but got " + data['height']);
        }
        // ensure the json data is a string
        if (data['created'] && !(typeof data['created'] === 'string' || data['created'] instanceof String)) {
            throw new Error("Expected the field `created` to be a primitive type in the JSON string but got " + data['created']);
        }
        // ensure the json data is a string
        if (data['updated'] && !(typeof data['updated'] === 'string' || data['updated'] instanceof String)) {
            throw new Error("Expected the field `updated` to be a primitive type in the JSON string but got " + data['updated']);
        }

        return true;
    }

/**
     * Returns The source id.
     * @return {String}
     */
    getId() {
        return this.id;
    }

    /**
     * Sets The source id.
     * @param {String} id The source id.
     */
    setId(id) {
        this['id'] = id;
        return this;
    }
/**
     * Returns The owner id of the source file.
     * @return {String}
     */
    getOwner() {
        return this.owner;
    }

    /**
     * Sets The owner id of the source file.
     * @param {String} owner The owner id of the source file.
     */
    setOwner(owner) {
        this['owner'] = owner;
        return this;
    }
/**
     * Returns The original URL of an ingested source file, where it originated. Only displayed for files ingested using the [fetch source](#fetch-source) endpoint. Not displayed for direct uploads.
     * @return {String}
     */
    getInput() {
        return this.input;
    }

    /**
     * Sets The original URL of an ingested source file, where it originated. Only displayed for files ingested using the [fetch source](#fetch-source) endpoint. Not displayed for direct uploads.
     * @param {String} input The original URL of an ingested source file, where it originated. Only displayed for files ingested using the [fetch source](#fetch-source) endpoint. Not displayed for direct uploads.
     */
    setInput(input) {
        this['input'] = input;
        return this;
    }
/**
     * Returns The URL of the source file hosted by Shotstack. The file at the URL can be used by the Edit API. Source file URL's consist of a base URL (AWS bucket), owner id, source id and a file named source. The extension varies depending on the type of file ingested.
     * @return {String}
     */
    getSource() {
        return this.source;
    }

    /**
     * Sets The URL of the source file hosted by Shotstack. The file at the URL can be used by the Edit API. Source file URL's consist of a base URL (AWS bucket), owner id, source id and a file named source. The extension varies depending on the type of file ingested.
     * @param {String} source The URL of the source file hosted by Shotstack. The file at the URL can be used by the Edit API. Source file URL's consist of a base URL (AWS bucket), owner id, source id and a file named source. The extension varies depending on the type of file ingested.
     */
    setSource(source) {
        this['source'] = source;
        return this;
    }
/**
     * Returns The status of the source file ingestion task. <ul>   <li>`queued` - ingestion task is queued waiting to be fetched</li>   <li>`importing` - the source file is being downloaded</li>   <li>`ready` - the source file has been ingested and stored</li>   <li>`failed` - there was an error ingesting the source file</li>   <li>`deleted` - the source file has been deleted</li> </ul>
     * @return {module:model/SourceResponseAttributes.StatusEnum}
     */
    getStatus() {
        return this.status;
    }

    /**
     * Sets The status of the source file ingestion task. <ul>   <li>`queued` - ingestion task is queued waiting to be fetched</li>   <li>`importing` - the source file is being downloaded</li>   <li>`ready` - the source file has been ingested and stored</li>   <li>`failed` - there was an error ingesting the source file</li>   <li>`deleted` - the source file has been deleted</li> </ul>
     * @param {module:model/SourceResponseAttributes.StatusEnum} status The status of the source file ingestion task. <ul>   <li>`queued` - ingestion task is queued waiting to be fetched</li>   <li>`importing` - the source file is being downloaded</li>   <li>`ready` - the source file has been ingested and stored</li>   <li>`failed` - there was an error ingesting the source file</li>   <li>`deleted` - the source file has been deleted</li> </ul>
     */
    setStatus(status) {
        this['status'] = status;
        return this;
    }
/**
     * @return {module:model/OutputsResponse}
     */
    getOutputs() {
        return this.outputs;
    }

    /**
     * @param {module:model/OutputsResponse} outputs
     */
    setOutputs(outputs) {
        this['outputs'] = outputs;
        return this;
    }
/**
     * Returns The width in pixels of the ingested source file, if a video or image.
     * @return {Number}
     */
    getWidth() {
        return this.width;
    }

    /**
     * Sets The width in pixels of the ingested source file, if a video or image.
     * @param {Number} width The width in pixels of the ingested source file, if a video or image.
     */
    setWidth(width) {
        this['width'] = width;
        return this;
    }
/**
     * Returns The height in pixels of the ingested source file, if a video or image.
     * @return {String}
     */
    getHeight() {
        return this.height;
    }

    /**
     * Sets The height in pixels of the ingested source file, if a video or image.
     * @param {String} height The height in pixels of the ingested source file, if a video or image.
     */
    setHeight(height) {
        this['height'] = height;
        return this;
    }
/**
     * Returns The duration in seconds of the ingested source file, if a video or audio file.
     * @return {Number}
     */
    getDuration() {
        return this.duration;
    }

    /**
     * Sets The duration in seconds of the ingested source file, if a video or audio file.
     * @param {Number} duration The duration in seconds of the ingested source file, if a video or audio file.
     */
    setDuration(duration) {
        this['duration'] = duration;
        return this;
    }
/**
     * Returns The frame rate in frames per second of the source file, if a video file.
     * @return {Number}
     */
    getFps() {
        return this.fps;
    }

    /**
     * Sets The frame rate in frames per second of the source file, if a video file.
     * @param {Number} fps The frame rate in frames per second of the source file, if a video file.
     */
    setFps(fps) {
        this['fps'] = fps;
        return this;
    }
/**
     * Returns The time the ingestion task was initially queued.
     * @return {String}
     */
    getCreated() {
        return this.created;
    }

    /**
     * Sets The time the ingestion task was initially queued.
     * @param {String} created The time the ingestion task was initially queued.
     */
    setCreated(created) {
        this['created'] = created;
        return this;
    }
/**
     * Returns The time the ingestion status was last updated.
     * @return {String}
     */
    getUpdated() {
        return this.updated;
    }

    /**
     * Sets The time the ingestion status was last updated.
     * @param {String} updated The time the ingestion status was last updated.
     */
    setUpdated(updated) {
        this['updated'] = updated;
        return this;
    }

}

SourceResponseAttributes.RequiredProperties = ["id", "owner"];

/**
 * The source id.
 * @member {String} id
 */
SourceResponseAttributes.prototype['id'] = undefined;

/**
 * The owner id of the source file.
 * @member {String} owner
 */
SourceResponseAttributes.prototype['owner'] = undefined;

/**
 * The original URL of an ingested source file, where it originated. Only displayed for files ingested using the [fetch source](#fetch-source) endpoint. Not displayed for direct uploads.
 * @member {String} input
 */
SourceResponseAttributes.prototype['input'] = undefined;

/**
 * The URL of the source file hosted by Shotstack. The file at the URL can be used by the Edit API. Source file URL's consist of a base URL (AWS bucket), owner id, source id and a file named source. The extension varies depending on the type of file ingested.
 * @member {String} source
 */
SourceResponseAttributes.prototype['source'] = undefined;

/**
 * The status of the source file ingestion task. <ul>   <li>`queued` - ingestion task is queued waiting to be fetched</li>   <li>`importing` - the source file is being downloaded</li>   <li>`ready` - the source file has been ingested and stored</li>   <li>`failed` - there was an error ingesting the source file</li>   <li>`deleted` - the source file has been deleted</li> </ul>
 * @member {module:model/SourceResponseAttributes.StatusEnum} status
 */
SourceResponseAttributes.prototype['status'] = undefined;

/**
 * @member {module:model/OutputsResponse} outputs
 */
SourceResponseAttributes.prototype['outputs'] = undefined;

/**
 * The width in pixels of the ingested source file, if a video or image.
 * @member {Number} width
 */
SourceResponseAttributes.prototype['width'] = undefined;

/**
 * The height in pixels of the ingested source file, if a video or image.
 * @member {String} height
 */
SourceResponseAttributes.prototype['height'] = undefined;

/**
 * The duration in seconds of the ingested source file, if a video or audio file.
 * @member {Number} duration
 */
SourceResponseAttributes.prototype['duration'] = undefined;

/**
 * The frame rate in frames per second of the source file, if a video file.
 * @member {Number} fps
 */
SourceResponseAttributes.prototype['fps'] = undefined;

/**
 * The time the ingestion task was initially queued.
 * @member {String} created
 */
SourceResponseAttributes.prototype['created'] = undefined;

/**
 * The time the ingestion status was last updated.
 * @member {String} updated
 */
SourceResponseAttributes.prototype['updated'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
SourceResponseAttributes['StatusEnum'] = {

    /**
     * value: "queued"
     * @const
     */
    "queued": "queued",

    /**
     * value: "importing"
     * @const
     */
    "importing": "importing",

    /**
     * value: "ready"
     * @const
     */
    "ready": "ready",

    /**
     * value: "failed"
     * @const
     */
    "failed": "failed",

    /**
     * value: "deleted"
     * @const
     */
    "deleted": "deleted",

    /**
     * value: "overwritten"
     * @const
     */
    "overwritten": "overwritten"
};



export default SourceResponseAttributes;

