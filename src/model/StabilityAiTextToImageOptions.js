/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.io/docs/guide/) documentation.  There are three API's, one for editing and generating assets (Edit API), one for managing hosted assets (Serve API) and one for ingesting and transforming source assets (Ingest API).  Each API has it's own base URL and collection of endpoints. Each API uses the same set of API keys.  **[Edit API](#shotstack-edit)** - [https://api.shotstack.io/edit/{version}](#)<br> Edit videos, images and audio assets in the cloud using a simple JSON schema and templates.  **[Serve API](#shotstack-serve)** - [https://api.shotstack.io/serve/{version}](#)<br> Inspect and manage the hosting of assets generated by the Edit and Ingest APIs.  **[Ingest API](#shotstack-ingest)** - [https://api.shotstack.io/ingest/{version}](#)<br> Ingest (upload, store and transform) source footage, images, audio and fonts to be used by the Edit API.  **[Create API](#shotstack-create)** - [https://api.shotstack.io/create/{version}](#)<br> Generate images, videos, voice overs and text using built in and third party generative AI providers. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The StabilityAiTextToImageOptions model module.
 * @module model/StabilityAiTextToImageOptions
 * @version 0.2.6
 */
class StabilityAiTextToImageOptions {
    /**
     * Constructs a new <code>StabilityAiTextToImageOptions</code>.
     * Options for the Stability AI text-to-image service. Set a text prompt to generate an image from plus other engine and configuration options. The output will be generated as a JPG file available at the URL returned in the response.
     * @alias module:model/StabilityAiTextToImageOptions
     * @param type {module:model/StabilityAiTextToImageOptions.TypeEnum} The type of asset to generate - set to `text-to-image` for text-to-image.
     * @param prompt {String} The text prompt to generate an image from.
     * @param width {Number} The width of the image in pixels. Must be divisible by 64.
     * @param height {Number} The height of the image in pixels. Must be divisible by 64.
     */
    constructor(type, prompt, width, height) { 
        
        StabilityAiTextToImageOptions.initialize(this, type, prompt, width, height);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, prompt, width, height) { 
        obj['type'] = type || 'text-to-image';
        obj['prompt'] = prompt;
        obj['width'] = width;
        obj['height'] = height;
    }

    /**
     * Constructs a <code>StabilityAiTextToImageOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StabilityAiTextToImageOptions} obj Optional instance to populate.
     * @return {module:model/StabilityAiTextToImageOptions} The populated <code>StabilityAiTextToImageOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StabilityAiTextToImageOptions();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('prompt')) {
                obj['prompt'] = ApiClient.convertToType(data['prompt'], 'String');
            }
            if (data.hasOwnProperty('engine')) {
                obj['engine'] = ApiClient.convertToType(data['engine'], 'String');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('steps')) {
                obj['steps'] = ApiClient.convertToType(data['steps'], 'Number');
            }
            if (data.hasOwnProperty('seed')) {
                obj['seed'] = ApiClient.convertToType(data['seed'], 'Number');
            }
            if (data.hasOwnProperty('cfgScale')) {
                obj['cfgScale'] = ApiClient.convertToType(data['cfgScale'], 'Number');
            }
            if (data.hasOwnProperty('stylePreset')) {
                obj['stylePreset'] = ApiClient.convertToType(data['stylePreset'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StabilityAiTextToImageOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StabilityAiTextToImageOptions</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StabilityAiTextToImageOptions.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['prompt'] && !(typeof data['prompt'] === 'string' || data['prompt'] instanceof String)) {
            throw new Error("Expected the field `prompt` to be a primitive type in the JSON string but got " + data['prompt']);
        }
        // ensure the json data is a string
        if (data['engine'] && !(typeof data['engine'] === 'string' || data['engine'] instanceof String)) {
            throw new Error("Expected the field `engine` to be a primitive type in the JSON string but got " + data['engine']);
        }
        // ensure the json data is a string
        if (data['stylePreset'] && !(typeof data['stylePreset'] === 'string' || data['stylePreset'] instanceof String)) {
            throw new Error("Expected the field `stylePreset` to be a primitive type in the JSON string but got " + data['stylePreset']);
        }

        return true;
    }

/**
     * Returns The type of asset to generate - set to `text-to-image` for text-to-image.
     * @return {module:model/StabilityAiTextToImageOptions.TypeEnum}
     */
    getType() {
        return this.type;
    }

    /**
     * Sets The type of asset to generate - set to `text-to-image` for text-to-image.
     * @param {module:model/StabilityAiTextToImageOptions.TypeEnum} type The type of asset to generate - set to `text-to-image` for text-to-image.
     */
    setType(type) {
        this['type'] = type;
        return this;
    }
/**
     * Returns The text prompt to generate an image from.
     * @return {String}
     */
    getPrompt() {
        return this.prompt;
    }

    /**
     * Sets The text prompt to generate an image from.
     * @param {String} prompt The text prompt to generate an image from.
     */
    setPrompt(prompt) {
        this['prompt'] = prompt;
        return this;
    }
/**
     * Returns The engine (model) to use for generating the image. Select from the list of available engines: <ul>   <li>`stable-diffusion-xl-1024-v0-9`</li>   <li>`stable-diffusion-xl-1024-v1-0`</li>   <li>`stable-diffusion-v1-6`</li>   <li>`stable-diffusion-512-v2-1`</li>   <li>`stable-diffusion-xl-beta-v2-2-2`</li> </ul>
     * @return {module:model/StabilityAiTextToImageOptions.EngineEnum}
     */
    getEngine() {
        return this.engine;
    }

    /**
     * Sets The engine (model) to use for generating the image. Select from the list of available engines: <ul>   <li>`stable-diffusion-xl-1024-v0-9`</li>   <li>`stable-diffusion-xl-1024-v1-0`</li>   <li>`stable-diffusion-v1-6`</li>   <li>`stable-diffusion-512-v2-1`</li>   <li>`stable-diffusion-xl-beta-v2-2-2`</li> </ul>
     * @param {module:model/StabilityAiTextToImageOptions.EngineEnum} engine The engine (model) to use for generating the image. Select from the list of available engines: <ul>   <li>`stable-diffusion-xl-1024-v0-9`</li>   <li>`stable-diffusion-xl-1024-v1-0`</li>   <li>`stable-diffusion-v1-6`</li>   <li>`stable-diffusion-512-v2-1`</li>   <li>`stable-diffusion-xl-beta-v2-2-2`</li> </ul>
     */
    setEngine(engine) {
        this['engine'] = engine;
        return this;
    }
/**
     * Returns The width of the image in pixels. Must be divisible by 64.
     * @return {Number}
     */
    getWidth() {
        return this.width;
    }

    /**
     * Sets The width of the image in pixels. Must be divisible by 64.
     * @param {Number} width The width of the image in pixels. Must be divisible by 64.
     */
    setWidth(width) {
        this['width'] = width;
        return this;
    }
/**
     * Returns The height of the image in pixels. Must be divisible by 64.
     * @return {Number}
     */
    getHeight() {
        return this.height;
    }

    /**
     * Sets The height of the image in pixels. Must be divisible by 64.
     * @param {Number} height The height of the image in pixels. Must be divisible by 64.
     */
    setHeight(height) {
        this['height'] = height;
        return this;
    }
/**
     * Returns The number of iterative diffusion steps to run. A number between 10 and 50.
     * @return {Number}
     */
    getSteps() {
        return this.steps;
    }

    /**
     * Sets The number of iterative diffusion steps to run. A number between 10 and 50.
     * @param {Number} steps The number of iterative diffusion steps to run. A number between 10 and 50.
     */
    setSteps(steps) {
        this['steps'] = steps;
        return this;
    }
/**
     * Returns Using the same seed can help you create images that look similar. Set to 0 for a random seed. A number between 0 and 4294967295.
     * @return {Number}
     */
    getSeed() {
        return this.seed;
    }

    /**
     * Sets Using the same seed can help you create images that look similar. Set to 0 for a random seed. A number between 0 and 4294967295.
     * @param {Number} seed Using the same seed can help you create images that look similar. Set to 0 for a random seed. A number between 0 and 4294967295.
     */
    setSeed(seed) {
        this['seed'] = seed;
        return this;
    }
/**
     * Returns Determines how closely the generated image will match the prompt. Lower numbers allow for more creative freedom. A number between 0 and 35.
     * @return {Number}
     */
    getCfgScale() {
        return this.cfgScale;
    }

    /**
     * Sets Determines how closely the generated image will match the prompt. Lower numbers allow for more creative freedom. A number between 0 and 35.
     * @param {Number} cfgScale Determines how closely the generated image will match the prompt. Lower numbers allow for more creative freedom. A number between 0 and 35.
     */
    setCfgScale(cfgScale) {
        this['cfgScale'] = cfgScale;
        return this;
    }
/**
     * Returns Apply a preset to generate an image in a particular style. Select from the list of available presets: <ul>   <li>`3d-model`</li>   <li>`analog-film`</li>   <li>`anime`</li>   <li>`cinematic`</li>   <li>`comic-book`</li>   <li>`digital-art`</li>   <li>`enhance`</li>   <li>`fantasy-art`</li>   <li>`isometric`</li>   <li>`line-art`</li>   <li>`low-poly`</li>   <li>`modeling-compound`</li>   <li>`neon-punk`</li>   <li>`origami`</li>   <li>`photographic`</li>   <li>`pixel-art`</li>   <li>`tile-texture`</li> </ul>
     * @return {module:model/StabilityAiTextToImageOptions.StylePresetEnum}
     */
    getStylePreset() {
        return this.stylePreset;
    }

    /**
     * Sets Apply a preset to generate an image in a particular style. Select from the list of available presets: <ul>   <li>`3d-model`</li>   <li>`analog-film`</li>   <li>`anime`</li>   <li>`cinematic`</li>   <li>`comic-book`</li>   <li>`digital-art`</li>   <li>`enhance`</li>   <li>`fantasy-art`</li>   <li>`isometric`</li>   <li>`line-art`</li>   <li>`low-poly`</li>   <li>`modeling-compound`</li>   <li>`neon-punk`</li>   <li>`origami`</li>   <li>`photographic`</li>   <li>`pixel-art`</li>   <li>`tile-texture`</li> </ul>
     * @param {module:model/StabilityAiTextToImageOptions.StylePresetEnum} stylePreset Apply a preset to generate an image in a particular style. Select from the list of available presets: <ul>   <li>`3d-model`</li>   <li>`analog-film`</li>   <li>`anime`</li>   <li>`cinematic`</li>   <li>`comic-book`</li>   <li>`digital-art`</li>   <li>`enhance`</li>   <li>`fantasy-art`</li>   <li>`isometric`</li>   <li>`line-art`</li>   <li>`low-poly`</li>   <li>`modeling-compound`</li>   <li>`neon-punk`</li>   <li>`origami`</li>   <li>`photographic`</li>   <li>`pixel-art`</li>   <li>`tile-texture`</li> </ul>
     */
    setStylePreset(stylePreset) {
        this['stylePreset'] = stylePreset;
        return this;
    }

}

StabilityAiTextToImageOptions.RequiredProperties = ["type", "prompt", "width", "height"];

/**
 * The type of asset to generate - set to `text-to-image` for text-to-image.
 * @member {module:model/StabilityAiTextToImageOptions.TypeEnum} type
 * @default 'text-to-image'
 */
StabilityAiTextToImageOptions.prototype['type'] = 'text-to-image';

/**
 * The text prompt to generate an image from.
 * @member {String} prompt
 */
StabilityAiTextToImageOptions.prototype['prompt'] = undefined;

/**
 * The engine (model) to use for generating the image. Select from the list of available engines: <ul>   <li>`stable-diffusion-xl-1024-v0-9`</li>   <li>`stable-diffusion-xl-1024-v1-0`</li>   <li>`stable-diffusion-v1-6`</li>   <li>`stable-diffusion-512-v2-1`</li>   <li>`stable-diffusion-xl-beta-v2-2-2`</li> </ul>
 * @member {module:model/StabilityAiTextToImageOptions.EngineEnum} engine
 * @default 'stable-diffusion-xl-1024-v1-0'
 */
StabilityAiTextToImageOptions.prototype['engine'] = 'stable-diffusion-xl-1024-v1-0';

/**
 * The width of the image in pixels. Must be divisible by 64.
 * @member {Number} width
 */
StabilityAiTextToImageOptions.prototype['width'] = undefined;

/**
 * The height of the image in pixels. Must be divisible by 64.
 * @member {Number} height
 */
StabilityAiTextToImageOptions.prototype['height'] = undefined;

/**
 * The number of iterative diffusion steps to run. A number between 10 and 50.
 * @member {Number} steps
 * @default 30
 */
StabilityAiTextToImageOptions.prototype['steps'] = 30;

/**
 * Using the same seed can help you create images that look similar. Set to 0 for a random seed. A number between 0 and 4294967295.
 * @member {Number} seed
 * @default 0
 */
StabilityAiTextToImageOptions.prototype['seed'] = 0;

/**
 * Determines how closely the generated image will match the prompt. Lower numbers allow for more creative freedom. A number between 0 and 35.
 * @member {Number} cfgScale
 * @default 7
 */
StabilityAiTextToImageOptions.prototype['cfgScale'] = 7;

/**
 * Apply a preset to generate an image in a particular style. Select from the list of available presets: <ul>   <li>`3d-model`</li>   <li>`analog-film`</li>   <li>`anime`</li>   <li>`cinematic`</li>   <li>`comic-book`</li>   <li>`digital-art`</li>   <li>`enhance`</li>   <li>`fantasy-art`</li>   <li>`isometric`</li>   <li>`line-art`</li>   <li>`low-poly`</li>   <li>`modeling-compound`</li>   <li>`neon-punk`</li>   <li>`origami`</li>   <li>`photographic`</li>   <li>`pixel-art`</li>   <li>`tile-texture`</li> </ul>
 * @member {module:model/StabilityAiTextToImageOptions.StylePresetEnum} stylePreset
 */
StabilityAiTextToImageOptions.prototype['stylePreset'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
StabilityAiTextToImageOptions['TypeEnum'] = {

    /**
     * value: "text-to-image"
     * @const
     */
    "text-to-image": "text-to-image"
};


/**
 * Allowed values for the <code>engine</code> property.
 * @enum {String}
 * @readonly
 */
StabilityAiTextToImageOptions['EngineEnum'] = {

    /**
     * value: "stable-diffusion-xl-1024-v0-9"
     * @const
     */
    "xl-1024-v0-9": "stable-diffusion-xl-1024-v0-9",

    /**
     * value: "stable-diffusion-xl-1024-v1-0"
     * @const
     */
    "xl-1024-v1-0": "stable-diffusion-xl-1024-v1-0",

    /**
     * value: "stable-diffusion-v1-6"
     * @const
     */
    "v1-6": "stable-diffusion-v1-6",

    /**
     * value: "stable-diffusion-512-v2-1"
     * @const
     */
    "512-v2-1": "stable-diffusion-512-v2-1",

    /**
     * value: "stable-diffusion-xl-beta-v2-2-2"
     * @const
     */
    "xl-beta-v2-2-2": "stable-diffusion-xl-beta-v2-2-2"
};


/**
 * Allowed values for the <code>stylePreset</code> property.
 * @enum {String}
 * @readonly
 */
StabilityAiTextToImageOptions['StylePresetEnum'] = {

    /**
     * value: "3d-model"
     * @const
     */
    "3d-model": "3d-model",

    /**
     * value: "analog-film"
     * @const
     */
    "analog-film": "analog-film",

    /**
     * value: "anime"
     * @const
     */
    "anime": "anime",

    /**
     * value: "cinematic"
     * @const
     */
    "cinematic": "cinematic",

    /**
     * value: "comic-book"
     * @const
     */
    "comic-book": "comic-book",

    /**
     * value: "digital-art"
     * @const
     */
    "digital-art": "digital-art",

    /**
     * value: "enhance"
     * @const
     */
    "enhance": "enhance",

    /**
     * value: "fantasy-art"
     * @const
     */
    "fantasy-art": "fantasy-art",

    /**
     * value: "isometric"
     * @const
     */
    "isometric": "isometric",

    /**
     * value: "line-art"
     * @const
     */
    "line-art": "line-art",

    /**
     * value: "low-poly"
     * @const
     */
    "low-poly": "low-poly",

    /**
     * value: "modeling-compound"
     * @const
     */
    "modeling-compound": "modeling-compound",

    /**
     * value: "neon-punk"
     * @const
     */
    "neon-punk": "neon-punk",

    /**
     * value: "origami"
     * @const
     */
    "origami": "origami",

    /**
     * value: "photographic"
     * @const
     */
    "photographic": "photographic",

    /**
     * value: "pixel-art"
     * @const
     */
    "pixel-art": "pixel-art",

    /**
     * value: "tile-texture"
     * @const
     */
    "tile-texture": "tile-texture"
};



export default StabilityAiTextToImageOptions;

