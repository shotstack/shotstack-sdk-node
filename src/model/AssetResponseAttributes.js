"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Shotstack
 * Official Node SDK for the Shotstack Cloud Video Editing API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
 * The AssetResponseAttributes model module.
 * @module model/AssetResponseAttributes
 * @version 0.2.9
 */
var AssetResponseAttributes = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>AssetResponseAttributes</code>.
   * The list of asset attributes and their values.
   * @alias module:model/AssetResponseAttributes
   * @param id {String} The unique id of the hosted asset in UUID format.
   * @param owner {String} The owner id of the asset.
   * @param status {module:model/AssetResponseAttributes.StatusEnum} The status of the asset. <ul>   <li>`importing` - the asset is being copied to the hosting service</li>   <li>`ready` - the asset is ready to be served to users</li>   <li>`failed` - the asset failed to copy or delete</li>   <li>`deleted` - the asset has been deleted</li> </ul>
   */
  function AssetResponseAttributes(id, owner, status) {
    _classCallCheck(this, AssetResponseAttributes);
    AssetResponseAttributes.initialize(this, id, owner, status);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  return _createClass(AssetResponseAttributes, [{
    key: "getId",
    value:
    /**
         * Returns The unique id of the hosted asset in UUID format.
         * @return {String}
         */
    function getId() {
      return this.id;
    }

    /**
     * Sets The unique id of the hosted asset in UUID format.
     * @param {String} id The unique id of the hosted asset in UUID format.
     */
  }, {
    key: "setId",
    value: function setId(id) {
      this['id'] = id;
      return this;
    }
    /**
         * Returns The owner id of the asset.
         * @return {String}
         */
  }, {
    key: "getOwner",
    value: function getOwner() {
      return this.owner;
    }

    /**
     * Sets The owner id of the asset.
     * @param {String} owner The owner id of the asset.
     */
  }, {
    key: "setOwner",
    value: function setOwner(owner) {
      this['owner'] = owner;
      return this;
    }
    /**
         * Returns The region the asset is hosted, currently only `au` (Australia).
         * @return {String}
         */
  }, {
    key: "getRegion",
    value: function getRegion() {
      return this.region;
    }

    /**
     * Sets The region the asset is hosted, currently only `au` (Australia).
     * @param {String} region The region the asset is hosted, currently only `au` (Australia).
     */
  }, {
    key: "setRegion",
    value: function setRegion(region) {
      this['region'] = region;
      return this;
    }
    /**
         * Returns The original render id that created the asset in UUID format. Multiple assets can share the same render id.
         * @return {String}
         */
  }, {
    key: "getRenderId",
    value: function getRenderId() {
      return this.renderId;
    }

    /**
     * Sets The original render id that created the asset in UUID format. Multiple assets can share the same render id.
     * @param {String} renderId The original render id that created the asset in UUID format. Multiple assets can share the same render id.
     */
  }, {
    key: "setRenderId",
    value: function setRenderId(renderId) {
      this['renderId'] = renderId;
      return this;
    }
    /**
         * Returns The third party id of an asset transferred to an external provider, i.e. Mux, YouTube or S3. If the provider is Shotstack, the providerID is the same as the asset id.
         * @return {String}
         */
  }, {
    key: "getProviderId",
    value: function getProviderId() {
      return this.providerId;
    }

    /**
     * Sets The third party id of an asset transferred to an external provider, i.e. Mux, YouTube or S3. If the provider is Shotstack, the providerID is the same as the asset id.
     * @param {String} providerId The third party id of an asset transferred to an external provider, i.e. Mux, YouTube or S3. If the provider is Shotstack, the providerID is the same as the asset id.
     */
  }, {
    key: "setProviderId",
    value: function setProviderId(providerId) {
      this['providerId'] = providerId;
      return this;
    }
    /**
         * Returns The asset file name.
         * @return {String}
         */
  }, {
    key: "getFilename",
    value: function getFilename() {
      return this.filename;
    }

    /**
     * Sets The asset file name.
     * @param {String} filename The asset file name.
     */
  }, {
    key: "setFilename",
    value: function setFilename(filename) {
      this['filename'] = filename;
      return this;
    }
    /**
         * Returns The asset file name.
         * @return {String}
         */
  }, {
    key: "getUrl",
    value: function getUrl() {
      return this.url;
    }

    /**
     * Sets The asset file name.
     * @param {String} url The asset file name.
     */
  }, {
    key: "setUrl",
    value: function setUrl(url) {
      this['url'] = url;
      return this;
    }
    /**
         * Returns The status of the asset. <ul>   <li>`importing` - the asset is being copied to the hosting service</li>   <li>`ready` - the asset is ready to be served to users</li>   <li>`failed` - the asset failed to copy or delete</li>   <li>`deleted` - the asset has been deleted</li> </ul>
         * @return {module:model/AssetResponseAttributes.StatusEnum}
         */
  }, {
    key: "getStatus",
    value: function getStatus() {
      return this.status;
    }

    /**
     * Sets The status of the asset. <ul>   <li>`importing` - the asset is being copied to the hosting service</li>   <li>`ready` - the asset is ready to be served to users</li>   <li>`failed` - the asset failed to copy or delete</li>   <li>`deleted` - the asset has been deleted</li> </ul>
     * @param {module:model/AssetResponseAttributes.StatusEnum} status The status of the asset. <ul>   <li>`importing` - the asset is being copied to the hosting service</li>   <li>`ready` - the asset is ready to be served to users</li>   <li>`failed` - the asset failed to copy or delete</li>   <li>`deleted` - the asset has been deleted</li> </ul>
     */
  }, {
    key: "setStatus",
    value: function setStatus(status) {
      this['status'] = status;
      return this;
    }
    /**
         * Returns The time the asset was created.
         * @return {String}
         */
  }, {
    key: "getCreated",
    value: function getCreated() {
      return this.created;
    }

    /**
     * Sets The time the asset was created.
     * @param {String} created The time the asset was created.
     */
  }, {
    key: "setCreated",
    value: function setCreated(created) {
      this['created'] = created;
      return this;
    }
    /**
         * Returns The time the asset status was last updated.
         * @return {String}
         */
  }, {
    key: "getUpdated",
    value: function getUpdated() {
      return this.updated;
    }

    /**
     * Sets The time the asset status was last updated.
     * @param {String} updated The time the asset status was last updated.
     */
  }, {
    key: "setUpdated",
    value: function setUpdated(updated) {
      this['updated'] = updated;
      return this;
    }
  }], [{
    key: "initialize",
    value: function initialize(obj, id, owner, status) {
      obj['id'] = id;
      obj['owner'] = owner;
      obj['status'] = status;
    }

    /**
     * Constructs a <code>AssetResponseAttributes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AssetResponseAttributes} obj Optional instance to populate.
     * @return {module:model/AssetResponseAttributes} The populated <code>AssetResponseAttributes</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new AssetResponseAttributes();
        if (data.hasOwnProperty('id')) {
          obj['id'] = _ApiClient["default"].convertToType(data['id'], 'String');
        }
        if (data.hasOwnProperty('owner')) {
          obj['owner'] = _ApiClient["default"].convertToType(data['owner'], 'String');
        }
        if (data.hasOwnProperty('region')) {
          obj['region'] = _ApiClient["default"].convertToType(data['region'], 'String');
        }
        if (data.hasOwnProperty('renderId')) {
          obj['renderId'] = _ApiClient["default"].convertToType(data['renderId'], 'String');
        }
        if (data.hasOwnProperty('providerId')) {
          obj['providerId'] = _ApiClient["default"].convertToType(data['providerId'], 'String');
        }
        if (data.hasOwnProperty('filename')) {
          obj['filename'] = _ApiClient["default"].convertToType(data['filename'], 'String');
        }
        if (data.hasOwnProperty('url')) {
          obj['url'] = _ApiClient["default"].convertToType(data['url'], 'String');
        }
        if (data.hasOwnProperty('status')) {
          obj['status'] = _ApiClient["default"].convertToType(data['status'], 'String');
        }
        if (data.hasOwnProperty('created')) {
          obj['created'] = _ApiClient["default"].convertToType(data['created'], 'String');
        }
        if (data.hasOwnProperty('updated')) {
          obj['updated'] = _ApiClient["default"].convertToType(data['updated'], 'String');
        }
      }
      return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AssetResponseAttributes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AssetResponseAttributes</code>.
     */
  }, {
    key: "validateJSON",
    value: function validateJSON(data) {
      // check to make sure all required properties are present in the JSON string
      var _iterator = _createForOfIteratorHelper(AssetResponseAttributes.RequiredProperties),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var property = _step.value;
          if (!data.hasOwnProperty(property)) {
            throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
          }
        }
        // ensure the json data is a string
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
        throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
      }
      // ensure the json data is a string
      if (data['owner'] && !(typeof data['owner'] === 'string' || data['owner'] instanceof String)) {
        throw new Error("Expected the field `owner` to be a primitive type in the JSON string but got " + data['owner']);
      }
      // ensure the json data is a string
      if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
        throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
      }
      // ensure the json data is a string
      if (data['renderId'] && !(typeof data['renderId'] === 'string' || data['renderId'] instanceof String)) {
        throw new Error("Expected the field `renderId` to be a primitive type in the JSON string but got " + data['renderId']);
      }
      // ensure the json data is a string
      if (data['providerId'] && !(typeof data['providerId'] === 'string' || data['providerId'] instanceof String)) {
        throw new Error("Expected the field `providerId` to be a primitive type in the JSON string but got " + data['providerId']);
      }
      // ensure the json data is a string
      if (data['filename'] && !(typeof data['filename'] === 'string' || data['filename'] instanceof String)) {
        throw new Error("Expected the field `filename` to be a primitive type in the JSON string but got " + data['filename']);
      }
      // ensure the json data is a string
      if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
        throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
      }
      // ensure the json data is a string
      if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
        throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
      }
      // ensure the json data is a string
      if (data['created'] && !(typeof data['created'] === 'string' || data['created'] instanceof String)) {
        throw new Error("Expected the field `created` to be a primitive type in the JSON string but got " + data['created']);
      }
      // ensure the json data is a string
      if (data['updated'] && !(typeof data['updated'] === 'string' || data['updated'] instanceof String)) {
        throw new Error("Expected the field `updated` to be a primitive type in the JSON string but got " + data['updated']);
      }
      return true;
    }
  }]);
}();
AssetResponseAttributes.RequiredProperties = ["id", "owner", "status"];

/**
 * The unique id of the hosted asset in UUID format.
 * @member {String} id
 */
AssetResponseAttributes.prototype['id'] = undefined;

/**
 * The owner id of the asset.
 * @member {String} owner
 */
AssetResponseAttributes.prototype['owner'] = undefined;

/**
 * The region the asset is hosted, currently only `au` (Australia).
 * @member {String} region
 */
AssetResponseAttributes.prototype['region'] = undefined;

/**
 * The original render id that created the asset in UUID format. Multiple assets can share the same render id.
 * @member {String} renderId
 */
AssetResponseAttributes.prototype['renderId'] = undefined;

/**
 * The third party id of an asset transferred to an external provider, i.e. Mux, YouTube or S3. If the provider is Shotstack, the providerID is the same as the asset id.
 * @member {String} providerId
 */
AssetResponseAttributes.prototype['providerId'] = undefined;

/**
 * The asset file name.
 * @member {String} filename
 */
AssetResponseAttributes.prototype['filename'] = undefined;

/**
 * The asset file name.
 * @member {String} url
 */
AssetResponseAttributes.prototype['url'] = undefined;

/**
 * The status of the asset. <ul>   <li>`importing` - the asset is being copied to the hosting service</li>   <li>`ready` - the asset is ready to be served to users</li>   <li>`failed` - the asset failed to copy or delete</li>   <li>`deleted` - the asset has been deleted</li> </ul>
 * @member {module:model/AssetResponseAttributes.StatusEnum} status
 */
AssetResponseAttributes.prototype['status'] = undefined;

/**
 * The time the asset was created.
 * @member {String} created
 */
AssetResponseAttributes.prototype['created'] = undefined;

/**
 * The time the asset status was last updated.
 * @member {String} updated
 */
AssetResponseAttributes.prototype['updated'] = undefined;

/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
AssetResponseAttributes['StatusEnum'] = {
  /**
   * value: "importing"
   * @const
   */
  "importing": "importing",
  /**
   * value: "ready"
   * @const
   */
  "ready": "ready",
  /**
   * value: "failed"
   * @const
   */
  "failed": "failed",
  /**
   * value: "deleted"
   * @const
   */
  "deleted": "deleted"
};
var _default = exports["default"] = AssetResponseAttributes;