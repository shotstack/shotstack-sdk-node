/**
 * Shotstack
 * Official Node SDK for the Shotstack Cloud Video Editing API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AssetResponseAttributes model module.
 * @module model/AssetResponseAttributes
 * @version 0.2.6
 */
class AssetResponseAttributes {
    /**
     * Constructs a new <code>AssetResponseAttributes</code>.
     * The list of asset attributes and their values.
     * @alias module:model/AssetResponseAttributes
     * @param id {String} The unique id of the hosted asset in UUID format.
     * @param owner {String} The owner id of the asset.
     * @param status {module:model/AssetResponseAttributes.StatusEnum} The status of the asset. <ul>   <li>`importing` - the asset is being copied to the hosting service</li>   <li>`ready` - the asset is ready to be served to users</li>   <li>`failed` - the asset failed to copy or delete</li>   <li>`deleted` - the asset has been deleted</li> </ul>
     */
    constructor(id, owner, status) { 
        
        AssetResponseAttributes.initialize(this, id, owner, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, owner, status) { 
        obj['id'] = id;
        obj['owner'] = owner;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>AssetResponseAttributes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AssetResponseAttributes} obj Optional instance to populate.
     * @return {module:model/AssetResponseAttributes} The populated <code>AssetResponseAttributes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AssetResponseAttributes();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], 'String');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('renderId')) {
                obj['renderId'] = ApiClient.convertToType(data['renderId'], 'String');
            }
            if (data.hasOwnProperty('providerId')) {
                obj['providerId'] = ApiClient.convertToType(data['providerId'], 'String');
            }
            if (data.hasOwnProperty('filename')) {
                obj['filename'] = ApiClient.convertToType(data['filename'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'String');
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AssetResponseAttributes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AssetResponseAttributes</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AssetResponseAttributes.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['owner'] && !(typeof data['owner'] === 'string' || data['owner'] instanceof String)) {
            throw new Error("Expected the field `owner` to be a primitive type in the JSON string but got " + data['owner']);
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }
        // ensure the json data is a string
        if (data['renderId'] && !(typeof data['renderId'] === 'string' || data['renderId'] instanceof String)) {
            throw new Error("Expected the field `renderId` to be a primitive type in the JSON string but got " + data['renderId']);
        }
        // ensure the json data is a string
        if (data['providerId'] && !(typeof data['providerId'] === 'string' || data['providerId'] instanceof String)) {
            throw new Error("Expected the field `providerId` to be a primitive type in the JSON string but got " + data['providerId']);
        }
        // ensure the json data is a string
        if (data['filename'] && !(typeof data['filename'] === 'string' || data['filename'] instanceof String)) {
            throw new Error("Expected the field `filename` to be a primitive type in the JSON string but got " + data['filename']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['created'] && !(typeof data['created'] === 'string' || data['created'] instanceof String)) {
            throw new Error("Expected the field `created` to be a primitive type in the JSON string but got " + data['created']);
        }
        // ensure the json data is a string
        if (data['updated'] && !(typeof data['updated'] === 'string' || data['updated'] instanceof String)) {
            throw new Error("Expected the field `updated` to be a primitive type in the JSON string but got " + data['updated']);
        }

        return true;
    }

/**
     * Returns The unique id of the hosted asset in UUID format.
     * @return {String}
     */
    getId() {
        return this.id;
    }

    /**
     * Sets The unique id of the hosted asset in UUID format.
     * @param {String} id The unique id of the hosted asset in UUID format.
     */
    setId(id) {
        this['id'] = id;
        return this;
    }
/**
     * Returns The owner id of the asset.
     * @return {String}
     */
    getOwner() {
        return this.owner;
    }

    /**
     * Sets The owner id of the asset.
     * @param {String} owner The owner id of the asset.
     */
    setOwner(owner) {
        this['owner'] = owner;
        return this;
    }
/**
     * Returns The region the asset is hosted, currently only `au` (Australia).
     * @return {String}
     */
    getRegion() {
        return this.region;
    }

    /**
     * Sets The region the asset is hosted, currently only `au` (Australia).
     * @param {String} region The region the asset is hosted, currently only `au` (Australia).
     */
    setRegion(region) {
        this['region'] = region;
        return this;
    }
/**
     * Returns The original render id that created the asset in UUID format. Multiple assets can share the same render id.
     * @return {String}
     */
    getRenderId() {
        return this.renderId;
    }

    /**
     * Sets The original render id that created the asset in UUID format. Multiple assets can share the same render id.
     * @param {String} renderId The original render id that created the asset in UUID format. Multiple assets can share the same render id.
     */
    setRenderId(renderId) {
        this['renderId'] = renderId;
        return this;
    }
/**
     * Returns The third party id of an asset transferred to an external provider, i.e. Mux, YouTube or S3. If the provider is Shotstack, the providerID is the same as the asset id.
     * @return {String}
     */
    getProviderId() {
        return this.providerId;
    }

    /**
     * Sets The third party id of an asset transferred to an external provider, i.e. Mux, YouTube or S3. If the provider is Shotstack, the providerID is the same as the asset id.
     * @param {String} providerId The third party id of an asset transferred to an external provider, i.e. Mux, YouTube or S3. If the provider is Shotstack, the providerID is the same as the asset id.
     */
    setProviderId(providerId) {
        this['providerId'] = providerId;
        return this;
    }
/**
     * Returns The asset file name.
     * @return {String}
     */
    getFilename() {
        return this.filename;
    }

    /**
     * Sets The asset file name.
     * @param {String} filename The asset file name.
     */
    setFilename(filename) {
        this['filename'] = filename;
        return this;
    }
/**
     * Returns The asset file name.
     * @return {String}
     */
    getUrl() {
        return this.url;
    }

    /**
     * Sets The asset file name.
     * @param {String} url The asset file name.
     */
    setUrl(url) {
        this['url'] = url;
        return this;
    }
/**
     * Returns The status of the asset. <ul>   <li>`importing` - the asset is being copied to the hosting service</li>   <li>`ready` - the asset is ready to be served to users</li>   <li>`failed` - the asset failed to copy or delete</li>   <li>`deleted` - the asset has been deleted</li> </ul>
     * @return {module:model/AssetResponseAttributes.StatusEnum}
     */
    getStatus() {
        return this.status;
    }

    /**
     * Sets The status of the asset. <ul>   <li>`importing` - the asset is being copied to the hosting service</li>   <li>`ready` - the asset is ready to be served to users</li>   <li>`failed` - the asset failed to copy or delete</li>   <li>`deleted` - the asset has been deleted</li> </ul>
     * @param {module:model/AssetResponseAttributes.StatusEnum} status The status of the asset. <ul>   <li>`importing` - the asset is being copied to the hosting service</li>   <li>`ready` - the asset is ready to be served to users</li>   <li>`failed` - the asset failed to copy or delete</li>   <li>`deleted` - the asset has been deleted</li> </ul>
     */
    setStatus(status) {
        this['status'] = status;
        return this;
    }
/**
     * Returns The time the asset was created.
     * @return {String}
     */
    getCreated() {
        return this.created;
    }

    /**
     * Sets The time the asset was created.
     * @param {String} created The time the asset was created.
     */
    setCreated(created) {
        this['created'] = created;
        return this;
    }
/**
     * Returns The time the asset status was last updated.
     * @return {String}
     */
    getUpdated() {
        return this.updated;
    }

    /**
     * Sets The time the asset status was last updated.
     * @param {String} updated The time the asset status was last updated.
     */
    setUpdated(updated) {
        this['updated'] = updated;
        return this;
    }

}

AssetResponseAttributes.RequiredProperties = ["id", "owner", "status"];

/**
 * The unique id of the hosted asset in UUID format.
 * @member {String} id
 */
AssetResponseAttributes.prototype['id'] = undefined;

/**
 * The owner id of the asset.
 * @member {String} owner
 */
AssetResponseAttributes.prototype['owner'] = undefined;

/**
 * The region the asset is hosted, currently only `au` (Australia).
 * @member {String} region
 */
AssetResponseAttributes.prototype['region'] = undefined;

/**
 * The original render id that created the asset in UUID format. Multiple assets can share the same render id.
 * @member {String} renderId
 */
AssetResponseAttributes.prototype['renderId'] = undefined;

/**
 * The third party id of an asset transferred to an external provider, i.e. Mux, YouTube or S3. If the provider is Shotstack, the providerID is the same as the asset id.
 * @member {String} providerId
 */
AssetResponseAttributes.prototype['providerId'] = undefined;

/**
 * The asset file name.
 * @member {String} filename
 */
AssetResponseAttributes.prototype['filename'] = undefined;

/**
 * The asset file name.
 * @member {String} url
 */
AssetResponseAttributes.prototype['url'] = undefined;

/**
 * The status of the asset. <ul>   <li>`importing` - the asset is being copied to the hosting service</li>   <li>`ready` - the asset is ready to be served to users</li>   <li>`failed` - the asset failed to copy or delete</li>   <li>`deleted` - the asset has been deleted</li> </ul>
 * @member {module:model/AssetResponseAttributes.StatusEnum} status
 */
AssetResponseAttributes.prototype['status'] = undefined;

/**
 * The time the asset was created.
 * @member {String} created
 */
AssetResponseAttributes.prototype['created'] = undefined;

/**
 * The time the asset status was last updated.
 * @member {String} updated
 */
AssetResponseAttributes.prototype['updated'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
AssetResponseAttributes['StatusEnum'] = {

    /**
     * value: "importing"
     * @const
     */
    "importing": "importing",

    /**
     * value: "ready"
     * @const
     */
    "ready": "ready",

    /**
     * value: "failed"
     * @const
     */
    "failed": "failed",

    /**
     * value: "deleted"
     * @const
     */
    "deleted": "deleted"
};



export default AssetResponseAttributes;

