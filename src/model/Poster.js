/**
 * Shotstack
 * Official Node SDK for the Shotstack Cloud Video Editing API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Poster model module.
 * @module model/Poster
 * @version 0.2.6
 */
class Poster {
    /**
     * Constructs a new <code>Poster</code>.
     * Generate a poster image for the video at a specific point from the timeline. The poster image size will match the size of the output video.
     * @alias module:model/Poster
     * @param capture {Number} The point on the timeline in seconds to capture a single frame to use as the poster image.
     */
    constructor(capture) { 
        
        Poster.initialize(this, capture);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, capture) { 
        obj['capture'] = capture;
    }

    /**
     * Constructs a <code>Poster</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Poster} obj Optional instance to populate.
     * @return {module:model/Poster} The populated <code>Poster</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Poster();

            if (data.hasOwnProperty('capture')) {
                obj['capture'] = ApiClient.convertToType(data['capture'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Poster</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Poster</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Poster.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }

/**
     * Returns The point on the timeline in seconds to capture a single frame to use as the poster image.
     * @return {Number}
     */
    getCapture() {
        return this.capture;
    }

    /**
     * Sets The point on the timeline in seconds to capture a single frame to use as the poster image.
     * @param {Number} capture The point on the timeline in seconds to capture a single frame to use as the poster image.
     */
    setCapture(capture) {
        this['capture'] = capture;
        return this;
    }

}

Poster.RequiredProperties = ["capture"];

/**
 * The point on the timeline in seconds to capture a single frame to use as the poster image.
 * @member {Number} capture
 */
Poster.prototype['capture'] = undefined;






export default Poster;

