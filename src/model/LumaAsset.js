/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.gitbook.io/docs/guides/getting-started) documentation. There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>  The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 5.4.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.ShotstackSdk) {
      root.ShotstackSdk = {};
    }
    root.ShotstackSdk.LumaAsset = factory(root.ShotstackSdk.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';



  /**
   * The LumaAsset model module.
   * @module model/LumaAsset
   * @version v1
   */

  /**
   * Constructs a new <code>LumaAsset</code>.
   * The LumaAsset is used to create luma matte masks, transitions and effects between other assets. A luma matte is a grey scale image or animated video where the black areas are transparent and the white areas solid. The luma matte animation should be provided as an mp4 video file. The src must be a publicly accessible URL to the file.
   * @alias module:model/LumaAsset
   * @class
   * @param type {String} The type of asset - set to `luma` for luma mattes.
   * @param src {String} The luma matte source URL. The URL must be publicly accessible or include credentials.
   */
  var exports = function(type, src) {
    var _this = this;

    _this['type'] = type || 'luma';
    _this['src'] = src;
  };

  /**
   * Constructs a <code>LumaAsset</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/LumaAsset} obj Optional instance to populate.
   * @return {module:model/LumaAsset} The populated <code>LumaAsset</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('src')) {
        obj['src'] = ApiClient.convertToType(data['src'], 'String');
      }
      if (data.hasOwnProperty('trim')) {
        obj['trim'] = ApiClient.convertToType(data['trim'], 'Number');
      }
    }
    return obj;
  }

  /**
   * The type of asset - set to `luma` for luma mattes.
   * @member {String} type
   * @default 'luma'
   */
  exports.prototype['type'] = 'luma';
  /**
   * The luma matte source URL. The URL must be publicly accessible or include credentials.
   * @member {String} src
   */
  exports.prototype['src'] = undefined;
  /**
   * The start trim point of the luma matte clip, in seconds (defaults to 0). Videos will start from the in trim point. A luma matte video will play until the file ends or the Clip length is reached.
   * @member {Number} trim
   */
  exports.prototype['trim'] = undefined;


  /**
   * Returns The type of asset - set to `luma` for luma mattes.
   * @return {String}
   */
  exports.prototype.getType = function() {
    return this['type'];
  }

  /**
   * Sets The type of asset - set to `luma` for luma mattes.
   * @param {String} type The type of asset - set to `luma` for luma mattes.
   */
  exports.prototype.setType = function(type) {
    this['type'] = type;
    return this;
  }


  /**
   * Returns The luma matte source URL. The URL must be publicly accessible or include credentials.
   * @return {String}
   */
  exports.prototype.getSrc = function() {
    return this['src'];
  }

  /**
   * Sets The luma matte source URL. The URL must be publicly accessible or include credentials.
   * @param {String} src The luma matte source URL. The URL must be publicly accessible or include credentials.
   */
  exports.prototype.setSrc = function(src) {
    this['src'] = src;
    return this;
  }


  /**
   * Returns The start trim point of the luma matte clip, in seconds (defaults to 0). Videos will start from the in trim point. A luma matte video will play until the file ends or the Clip length is reached.
   * @return {Number}
   */
  exports.prototype.getTrim = function() {
    return this['trim'];
  }

  /**
   * Sets The start trim point of the luma matte clip, in seconds (defaults to 0). Videos will start from the in trim point. A luma matte video will play until the file ends or the Clip length is reached.
   * @param {Number} trim The start trim point of the luma matte clip, in seconds (defaults to 0). Videos will start from the in trim point. A luma matte video will play until the file ends or the Clip length is reached.
   */
  exports.prototype.setTrim = function(trim) {
    this['trim'] = trim;
    return this;
  }



  return exports;
}));


