/**
 * Shotstack
 * Official Node SDK for the Shotstack Cloud Video Editing API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OpenAiTextGeneratorOptions model module.
 * @module model/OpenAiTextGeneratorOptions
 * @version 0.2.6
 */
class OpenAiTextGeneratorOptions {
    /**
     * Constructs a new <code>OpenAiTextGeneratorOptions</code>.
     * Options for the OpenAI text-generator service. Set a text prompt that will be used to generate a new body of text. The output will be generated as a text (txt) file available at the URL returned in the response.
     * @alias module:model/OpenAiTextGeneratorOptions
     * @param type {module:model/OpenAiTextGeneratorOptions.TypeEnum} The type of asset to generate - set to `text-generator` for text generation.
     * @param prompt {String} The text prompt to generate text from.
     * @param model {module:model/OpenAiTextGeneratorOptions.ModelEnum} The model to use for generating the text. Select from the list of available models: <ul>   <li>`gpt-3.5-turbo`</li>   <li>`gpt-4`</li> </ul>
     */
    constructor(type, prompt, model) { 
        
        OpenAiTextGeneratorOptions.initialize(this, type, prompt, model);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, prompt, model) { 
        obj['type'] = type || 'text-generator';
        obj['prompt'] = prompt;
        obj['model'] = model;
    }

    /**
     * Constructs a <code>OpenAiTextGeneratorOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OpenAiTextGeneratorOptions} obj Optional instance to populate.
     * @return {module:model/OpenAiTextGeneratorOptions} The populated <code>OpenAiTextGeneratorOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OpenAiTextGeneratorOptions();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('prompt')) {
                obj['prompt'] = ApiClient.convertToType(data['prompt'], 'String');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('systemPrompt')) {
                obj['systemPrompt'] = ApiClient.convertToType(data['systemPrompt'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OpenAiTextGeneratorOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OpenAiTextGeneratorOptions</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OpenAiTextGeneratorOptions.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['prompt'] && !(typeof data['prompt'] === 'string' || data['prompt'] instanceof String)) {
            throw new Error("Expected the field `prompt` to be a primitive type in the JSON string but got " + data['prompt']);
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }
        // ensure the json data is a string
        if (data['systemPrompt'] && !(typeof data['systemPrompt'] === 'string' || data['systemPrompt'] instanceof String)) {
            throw new Error("Expected the field `systemPrompt` to be a primitive type in the JSON string but got " + data['systemPrompt']);
        }

        return true;
    }

/**
     * Returns The type of asset to generate - set to `text-generator` for text generation.
     * @return {module:model/OpenAiTextGeneratorOptions.TypeEnum}
     */
    getType() {
        return this.type;
    }

    /**
     * Sets The type of asset to generate - set to `text-generator` for text generation.
     * @param {module:model/OpenAiTextGeneratorOptions.TypeEnum} type The type of asset to generate - set to `text-generator` for text generation.
     */
    setType(type) {
        this['type'] = type;
        return this;
    }
/**
     * Returns The text prompt to generate text from.
     * @return {String}
     */
    getPrompt() {
        return this.prompt;
    }

    /**
     * Sets The text prompt to generate text from.
     * @param {String} prompt The text prompt to generate text from.
     */
    setPrompt(prompt) {
        this['prompt'] = prompt;
        return this;
    }
/**
     * Returns The model to use for generating the text. Select from the list of available models: <ul>   <li>`gpt-3.5-turbo`</li>   <li>`gpt-4`</li> </ul>
     * @return {module:model/OpenAiTextGeneratorOptions.ModelEnum}
     */
    getModel() {
        return this.model;
    }

    /**
     * Sets The model to use for generating the text. Select from the list of available models: <ul>   <li>`gpt-3.5-turbo`</li>   <li>`gpt-4`</li> </ul>
     * @param {module:model/OpenAiTextGeneratorOptions.ModelEnum} model The model to use for generating the text. Select from the list of available models: <ul>   <li>`gpt-3.5-turbo`</li>   <li>`gpt-4`</li> </ul>
     */
    setModel(model) {
        this['model'] = model;
        return this;
    }
/**
     * Returns The system prompt to use for generating the text. This is an optional prompt that can be used to provide context or additional information to the model.
     * @return {String}
     */
    getSystemPrompt() {
        return this.systemPrompt;
    }

    /**
     * Sets The system prompt to use for generating the text. This is an optional prompt that can be used to provide context or additional information to the model.
     * @param {String} systemPrompt The system prompt to use for generating the text. This is an optional prompt that can be used to provide context or additional information to the model.
     */
    setSystemPrompt(systemPrompt) {
        this['systemPrompt'] = systemPrompt;
        return this;
    }

}

OpenAiTextGeneratorOptions.RequiredProperties = ["type", "prompt", "model"];

/**
 * The type of asset to generate - set to `text-generator` for text generation.
 * @member {module:model/OpenAiTextGeneratorOptions.TypeEnum} type
 * @default 'text-generator'
 */
OpenAiTextGeneratorOptions.prototype['type'] = 'text-generator';

/**
 * The text prompt to generate text from.
 * @member {String} prompt
 */
OpenAiTextGeneratorOptions.prototype['prompt'] = undefined;

/**
 * The model to use for generating the text. Select from the list of available models: <ul>   <li>`gpt-3.5-turbo`</li>   <li>`gpt-4`</li> </ul>
 * @member {module:model/OpenAiTextGeneratorOptions.ModelEnum} model
 */
OpenAiTextGeneratorOptions.prototype['model'] = undefined;

/**
 * The system prompt to use for generating the text. This is an optional prompt that can be used to provide context or additional information to the model.
 * @member {String} systemPrompt
 */
OpenAiTextGeneratorOptions.prototype['systemPrompt'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
OpenAiTextGeneratorOptions['TypeEnum'] = {

    /**
     * value: "text-generator"
     * @const
     */
    "text-generator": "text-generator"
};


/**
 * Allowed values for the <code>model</code> property.
 * @enum {String}
 * @readonly
 */
OpenAiTextGeneratorOptions['ModelEnum'] = {

    /**
     * value: "gpt-3.5-turbo"
     * @const
     */
    "3.5-turbo": "gpt-3.5-turbo",

    /**
     * value: "gpt-4"
     * @const
     */
    "4": "gpt-4"
};



export default OpenAiTextGeneratorOptions;

