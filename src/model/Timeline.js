"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _Font = _interopRequireDefault(require("./Font"));
var _Soundtrack = _interopRequireDefault(require("./Soundtrack"));
var _Track = _interopRequireDefault(require("./Track"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Shotstack
 * Official Node SDK for the Shotstack Cloud Video Editing API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
 * The Timeline model module.
 * @module model/Timeline
 * @version 0.2.6
 */
var Timeline = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>Timeline</code>.
   * A timeline represents the contents of a video edit over time, an audio edit over time, in seconds, or an image layout. A timeline consists of layers called tracks. Tracks are composed of titles, images, audio, html or video segments referred to as clips which are placed along the track at specific starting point and lasting for a specific amount of time.
   * @alias module:model/Timeline
   * @param tracks {Array.<module:model/Track>} A timeline consists of an array of tracks, each track containing clips. Tracks are layered on top of each other in the same order they are added to the array with the top most track layered over the top of those below it. Ensure that a track containing titles is the top most track so that it is displayed above videos and images.
   */
  function Timeline(tracks) {
    _classCallCheck(this, Timeline);
    Timeline.initialize(this, tracks);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  return _createClass(Timeline, [{
    key: "getSoundtrack",
    value:
    /**
         * @return {module:model/Soundtrack}
         */
    function getSoundtrack() {
      return this.soundtrack;
    }

    /**
     * @param {module:model/Soundtrack} soundtrack
     */
  }, {
    key: "setSoundtrack",
    value: function setSoundtrack(soundtrack) {
      this['soundtrack'] = soundtrack;
      return this;
    }
    /**
         * Returns A hexadecimal value for the timeline background colour. Defaults to #000000 (black).
         * @return {String}
         */
  }, {
    key: "getBackground",
    value: function getBackground() {
      return this.background;
    }

    /**
     * Sets A hexadecimal value for the timeline background colour. Defaults to #000000 (black).
     * @param {String} background A hexadecimal value for the timeline background colour. Defaults to #000000 (black).
     */
  }, {
    key: "setBackground",
    value: function setBackground(background) {
      this['background'] = background;
      return this;
    }
    /**
         * Returns An array of custom fonts to be downloaded for use by the HTML assets.
         * @return {Array.<module:model/Font>}
         */
  }, {
    key: "getFonts",
    value: function getFonts() {
      return this.fonts;
    }

    /**
     * Sets An array of custom fonts to be downloaded for use by the HTML assets.
     * @param {Array.<module:model/Font>} fonts An array of custom fonts to be downloaded for use by the HTML assets.
     */
  }, {
    key: "setFonts",
    value: function setFonts(fonts) {
      this['fonts'] = fonts;
      return this;
    }
    /**
         * Returns A timeline consists of an array of tracks, each track containing clips. Tracks are layered on top of each other in the same order they are added to the array with the top most track layered over the top of those below it. Ensure that a track containing titles is the top most track so that it is displayed above videos and images.
         * @return {Array.<module:model/Track>}
         */
  }, {
    key: "getTracks",
    value: function getTracks() {
      return this.tracks;
    }

    /**
     * Sets A timeline consists of an array of tracks, each track containing clips. Tracks are layered on top of each other in the same order they are added to the array with the top most track layered over the top of those below it. Ensure that a track containing titles is the top most track so that it is displayed above videos and images.
     * @param {Array.<module:model/Track>} tracks A timeline consists of an array of tracks, each track containing clips. Tracks are layered on top of each other in the same order they are added to the array with the top most track layered over the top of those below it. Ensure that a track containing titles is the top most track so that it is displayed above videos and images.
     */
  }, {
    key: "setTracks",
    value: function setTracks(tracks) {
      this['tracks'] = tracks;
      return this;
    }
    /**
         * Returns Disable the caching of ingested source footage and assets. See  [caching](https://shotstack.io/docs/guide/architecting-an-application/caching/) for more details.
         * @return {Boolean}
         */
  }, {
    key: "getCache",
    value: function getCache() {
      return this.cache;
    }

    /**
     * Sets Disable the caching of ingested source footage and assets. See  [caching](https://shotstack.io/docs/guide/architecting-an-application/caching/) for more details.
     * @param {Boolean} cache Disable the caching of ingested source footage and assets. See  [caching](https://shotstack.io/docs/guide/architecting-an-application/caching/) for more details.
     */
  }, {
    key: "setCache",
    value: function setCache(cache) {
      this['cache'] = cache;
      return this;
    }
  }], [{
    key: "initialize",
    value: function initialize(obj, tracks) {
      obj['tracks'] = tracks;
    }

    /**
     * Constructs a <code>Timeline</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Timeline} obj Optional instance to populate.
     * @return {module:model/Timeline} The populated <code>Timeline</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new Timeline();
        if (data.hasOwnProperty('soundtrack')) {
          obj['soundtrack'] = _Soundtrack["default"].constructFromObject(data['soundtrack']);
        }
        if (data.hasOwnProperty('background')) {
          obj['background'] = _ApiClient["default"].convertToType(data['background'], 'String');
        }
        if (data.hasOwnProperty('fonts')) {
          obj['fonts'] = _ApiClient["default"].convertToType(data['fonts'], [_Font["default"]]);
        }
        if (data.hasOwnProperty('tracks')) {
          obj['tracks'] = _ApiClient["default"].convertToType(data['tracks'], [_Track["default"]]);
        }
        if (data.hasOwnProperty('cache')) {
          obj['cache'] = _ApiClient["default"].convertToType(data['cache'], 'Boolean');
        }
      }
      return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Timeline</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Timeline</code>.
     */
  }, {
    key: "validateJSON",
    value: function validateJSON(data) {
      // check to make sure all required properties are present in the JSON string
      var _iterator = _createForOfIteratorHelper(Timeline.RequiredProperties),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var property = _step.value;
          if (!data.hasOwnProperty(property)) {
            throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
          }
        }
        // validate the optional field `soundtrack`
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      if (data['soundtrack']) {
        // data not null
        _Soundtrack["default"].validateJSON(data['soundtrack']);
      }
      // ensure the json data is a string
      if (data['background'] && !(typeof data['background'] === 'string' || data['background'] instanceof String)) {
        throw new Error("Expected the field `background` to be a primitive type in the JSON string but got " + data['background']);
      }
      if (data['fonts']) {
        // data not null
        // ensure the json data is an array
        if (!Array.isArray(data['fonts'])) {
          throw new Error("Expected the field `fonts` to be an array in the JSON data but got " + data['fonts']);
        }
        // validate the optional field `fonts` (array)
        var _iterator2 = _createForOfIteratorHelper(data['fonts']),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var item = _step2.value;
            _Font["default"].validateJSON(item);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
        ;
      }
      if (data['tracks']) {
        // data not null
        // ensure the json data is an array
        if (!Array.isArray(data['tracks'])) {
          throw new Error("Expected the field `tracks` to be an array in the JSON data but got " + data['tracks']);
        }
        // validate the optional field `tracks` (array)
        var _iterator3 = _createForOfIteratorHelper(data['tracks']),
          _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var _item = _step3.value;
            _Track["default"].validateJSON(_item);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
        ;
      }
      return true;
    }
  }]);
}();
Timeline.RequiredProperties = ["tracks"];

/**
 * @member {module:model/Soundtrack} soundtrack
 */
Timeline.prototype['soundtrack'] = undefined;

/**
 * A hexadecimal value for the timeline background colour. Defaults to #000000 (black).
 * @member {String} background
 */
Timeline.prototype['background'] = undefined;

/**
 * An array of custom fonts to be downloaded for use by the HTML assets.
 * @member {Array.<module:model/Font>} fonts
 */
Timeline.prototype['fonts'] = undefined;

/**
 * A timeline consists of an array of tracks, each track containing clips. Tracks are layered on top of each other in the same order they are added to the array with the top most track layered over the top of those below it. Ensure that a track containing titles is the top most track so that it is displayed above videos and images.
 * @member {Array.<module:model/Track>} tracks
 */
Timeline.prototype['tracks'] = undefined;

/**
 * Disable the caching of ingested source footage and assets. See  [caching](https://shotstack.io/docs/guide/architecting-an-application/caching/) for more details.
 * @member {Boolean} cache
 */
Timeline.prototype['cache'] = undefined;
var _default = exports["default"] = Timeline;