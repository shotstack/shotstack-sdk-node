/**
 * Shotstack
 * Official Node SDK for the Shotstack Cloud Video Editing API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The S3DestinationOptions model module.
 * @module model/S3DestinationOptions
 * @version 0.2.6
 */
class S3DestinationOptions {
    /**
     * Constructs a new <code>S3DestinationOptions</code>.
     * Pass additional options to control how files are stored in S3.
     * @alias module:model/S3DestinationOptions
     * @param region {String} Choose the region to send the file to. Must be a valid  [AWS region](https://docs.aws.amazon.com/general/latest/gr/s3.html#s3_region) string like `us-east-1` or `ap-southeast-2`.
     * @param bucket {String} The bucket name to send files to. The bucket must exist in the AWS account before files can be sent.
     */
    constructor(region, bucket) { 
        
        S3DestinationOptions.initialize(this, region, bucket);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, region, bucket) { 
        obj['region'] = region;
        obj['bucket'] = bucket;
    }

    /**
     * Constructs a <code>S3DestinationOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/S3DestinationOptions} obj Optional instance to populate.
     * @return {module:model/S3DestinationOptions} The populated <code>S3DestinationOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new S3DestinationOptions();

            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('bucket')) {
                obj['bucket'] = ApiClient.convertToType(data['bucket'], 'String');
            }
            if (data.hasOwnProperty('prefix')) {
                obj['prefix'] = ApiClient.convertToType(data['prefix'], 'String');
            }
            if (data.hasOwnProperty('filename')) {
                obj['filename'] = ApiClient.convertToType(data['filename'], 'String');
            }
            if (data.hasOwnProperty('acl')) {
                obj['acl'] = ApiClient.convertToType(data['acl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>S3DestinationOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>S3DestinationOptions</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of S3DestinationOptions.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }
        // ensure the json data is a string
        if (data['bucket'] && !(typeof data['bucket'] === 'string' || data['bucket'] instanceof String)) {
            throw new Error("Expected the field `bucket` to be a primitive type in the JSON string but got " + data['bucket']);
        }
        // ensure the json data is a string
        if (data['prefix'] && !(typeof data['prefix'] === 'string' || data['prefix'] instanceof String)) {
            throw new Error("Expected the field `prefix` to be a primitive type in the JSON string but got " + data['prefix']);
        }
        // ensure the json data is a string
        if (data['filename'] && !(typeof data['filename'] === 'string' || data['filename'] instanceof String)) {
            throw new Error("Expected the field `filename` to be a primitive type in the JSON string but got " + data['filename']);
        }
        // ensure the json data is a string
        if (data['acl'] && !(typeof data['acl'] === 'string' || data['acl'] instanceof String)) {
            throw new Error("Expected the field `acl` to be a primitive type in the JSON string but got " + data['acl']);
        }

        return true;
    }

/**
     * Returns Choose the region to send the file to. Must be a valid  [AWS region](https://docs.aws.amazon.com/general/latest/gr/s3.html#s3_region) string like `us-east-1` or `ap-southeast-2`.
     * @return {String}
     */
    getRegion() {
        return this.region;
    }

    /**
     * Sets Choose the region to send the file to. Must be a valid  [AWS region](https://docs.aws.amazon.com/general/latest/gr/s3.html#s3_region) string like `us-east-1` or `ap-southeast-2`.
     * @param {String} region Choose the region to send the file to. Must be a valid  [AWS region](https://docs.aws.amazon.com/general/latest/gr/s3.html#s3_region) string like `us-east-1` or `ap-southeast-2`.
     */
    setRegion(region) {
        this['region'] = region;
        return this;
    }
/**
     * Returns The bucket name to send files to. The bucket must exist in the AWS account before files can be sent.
     * @return {String}
     */
    getBucket() {
        return this.bucket;
    }

    /**
     * Sets The bucket name to send files to. The bucket must exist in the AWS account before files can be sent.
     * @param {String} bucket The bucket name to send files to. The bucket must exist in the AWS account before files can be sent.
     */
    setBucket(bucket) {
        this['bucket'] = bucket;
        return this;
    }
/**
     * Returns A prefix for the file being sent. This is typically a folder name, i.e. `videos` or `customerId/videos`.
     * @return {String}
     */
    getPrefix() {
        return this.prefix;
    }

    /**
     * Sets A prefix for the file being sent. This is typically a folder name, i.e. `videos` or `customerId/videos`.
     * @param {String} prefix A prefix for the file being sent. This is typically a folder name, i.e. `videos` or `customerId/videos`.
     */
    setPrefix(prefix) {
        this['prefix'] = prefix;
        return this;
    }
/**
     * Returns Use your own filename instead of the default filenames generated by Shotstack. Note: omit the file extension as this will be appended depending on the output format. Also `-poster.jpg` and `-thumb.jpg` will be appended for poster and thumbnail images.
     * @return {String}
     */
    getFilename() {
        return this.filename;
    }

    /**
     * Sets Use your own filename instead of the default filenames generated by Shotstack. Note: omit the file extension as this will be appended depending on the output format. Also `-poster.jpg` and `-thumb.jpg` will be appended for poster and thumbnail images.
     * @param {String} filename Use your own filename instead of the default filenames generated by Shotstack. Note: omit the file extension as this will be appended depending on the output format. Also `-poster.jpg` and `-thumb.jpg` will be appended for poster and thumbnail images.
     */
    setFilename(filename) {
        this['filename'] = filename;
        return this;
    }
/**
     * Returns Sets the S3 Access Control List (acl) permissions. Default is `private`. Must use a valid  S3 [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl).
     * @return {String}
     */
    getAcl() {
        return this.acl;
    }

    /**
     * Sets Sets the S3 Access Control List (acl) permissions. Default is `private`. Must use a valid  S3 [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl).
     * @param {String} acl Sets the S3 Access Control List (acl) permissions. Default is `private`. Must use a valid  S3 [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl).
     */
    setAcl(acl) {
        this['acl'] = acl;
        return this;
    }

}

S3DestinationOptions.RequiredProperties = ["region", "bucket"];

/**
 * Choose the region to send the file to. Must be a valid  [AWS region](https://docs.aws.amazon.com/general/latest/gr/s3.html#s3_region) string like `us-east-1` or `ap-southeast-2`.
 * @member {String} region
 */
S3DestinationOptions.prototype['region'] = undefined;

/**
 * The bucket name to send files to. The bucket must exist in the AWS account before files can be sent.
 * @member {String} bucket
 */
S3DestinationOptions.prototype['bucket'] = undefined;

/**
 * A prefix for the file being sent. This is typically a folder name, i.e. `videos` or `customerId/videos`.
 * @member {String} prefix
 */
S3DestinationOptions.prototype['prefix'] = undefined;

/**
 * Use your own filename instead of the default filenames generated by Shotstack. Note: omit the file extension as this will be appended depending on the output format. Also `-poster.jpg` and `-thumb.jpg` will be appended for poster and thumbnail images.
 * @member {String} filename
 */
S3DestinationOptions.prototype['filename'] = undefined;

/**
 * Sets the S3 Access Control List (acl) permissions. Default is `private`. Must use a valid  S3 [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl).
 * @member {String} acl
 */
S3DestinationOptions.prototype['acl'] = undefined;






export default S3DestinationOptions;

