/**
 * Shotstack
 * Official Node SDK for the Shotstack Cloud Video Editing API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AudioEnhancement from './AudioEnhancement';

/**
 * The Enhancements model module.
 * @module model/Enhancements
 * @version 0.2.6
 */
class Enhancements {
    /**
     * Constructs a new <code>Enhancements</code>.
     * Enhancements that can be applied to a rendition. Currently only supports the Dolby audio enhancement.
     * @alias module:model/Enhancements
     */
    constructor() { 
        
        Enhancements.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Enhancements</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Enhancements} obj Optional instance to populate.
     * @return {module:model/Enhancements} The populated <code>Enhancements</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Enhancements();

            if (data.hasOwnProperty('audio')) {
                obj['audio'] = AudioEnhancement.constructFromObject(data['audio']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Enhancements</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Enhancements</code>.
     */
    static validateJSON(data) {
        // validate the optional field `audio`
        if (data['audio']) { // data not null
          AudioEnhancement.validateJSON(data['audio']);
        }

        return true;
    }

/**
     * @return {module:model/AudioEnhancement}
     */
    getAudio() {
        return this.audio;
    }

    /**
     * @param {module:model/AudioEnhancement} audio
     */
    setAudio(audio) {
        this['audio'] = audio;
        return this;
    }

}



/**
 * @member {module:model/AudioEnhancement} audio
 */
Enhancements.prototype['audio'] = undefined;






export default Enhancements;

