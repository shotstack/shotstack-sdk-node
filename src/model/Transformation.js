/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.gitbook.io/docs/guides/getting-started) documentation. There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>  The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 5.4.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/FlipTransformation', 'model/RotateTransformation', 'model/SkewTransformation'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./FlipTransformation'), require('./RotateTransformation'), require('./SkewTransformation'));
  } else {
    // Browser globals (root is window)
    if (!root.ShotstackSdk) {
      root.ShotstackSdk = {};
    }
    root.ShotstackSdk.Transformation = factory(root.ShotstackSdk.ApiClient, root.ShotstackSdk.FlipTransformation, root.ShotstackSdk.RotateTransformation, root.ShotstackSdk.SkewTransformation);
  }
}(this, function(ApiClient, FlipTransformation, RotateTransformation, SkewTransformation) {
  'use strict';



  /**
   * The Transformation model module.
   * @module model/Transformation
   * @version v1
   */

  /**
   * Constructs a new <code>Transformation</code>.
   * Apply one or more transformations to a clip. Transformations alter the visual properties of a clip and can be combined to create new shapes and effects.
   * @alias module:model/Transformation
   * @class
   */
  var exports = function() {
    var _this = this;

  };

  /**
   * Constructs a <code>Transformation</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Transformation} obj Optional instance to populate.
   * @return {module:model/Transformation} The populated <code>Transformation</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('rotate')) {
        obj['rotate'] = RotateTransformation.constructFromObject(data['rotate']);
      }
      if (data.hasOwnProperty('skew')) {
        obj['skew'] = SkewTransformation.constructFromObject(data['skew']);
      }
      if (data.hasOwnProperty('flip')) {
        obj['flip'] = FlipTransformation.constructFromObject(data['flip']);
      }
    }
    return obj;
  }

  /**
   * @member {module:model/RotateTransformation} rotate
   */
  exports.prototype['rotate'] = undefined;
  /**
   * @member {module:model/SkewTransformation} skew
   */
  exports.prototype['skew'] = undefined;
  /**
   * @member {module:model/FlipTransformation} flip
   */
  exports.prototype['flip'] = undefined;


  /**
   * @return {module:model/RotateTransformation}
   */
  exports.prototype.getRotate = function() {
    return this['rotate'];
  }

  /**
   * @param {module:model/RotateTransformation} rotate
   */
  exports.prototype.setRotate = function(rotate) {
    this['rotate'] = rotate;
    return this;
  }


  /**
   * @return {module:model/SkewTransformation}
   */
  exports.prototype.getSkew = function() {
    return this['skew'];
  }

  /**
   * @param {module:model/SkewTransformation} skew
   */
  exports.prototype.setSkew = function(skew) {
    this['skew'] = skew;
    return this;
  }


  /**
   * @return {module:model/FlipTransformation}
   */
  exports.prototype.getFlip = function() {
    return this['flip'];
  }

  /**
   * @param {module:model/FlipTransformation} flip
   */
  exports.prototype.setFlip = function(flip) {
    this['flip'] = flip;
    return this;
  }



  return exports;
}));


