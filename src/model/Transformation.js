/**
 * Shotstack
 * Official Node SDK for the Shotstack Cloud Video Editing API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FlipTransformation from './FlipTransformation';
import RotateTransformation from './RotateTransformation';
import SkewTransformation from './SkewTransformation';

/**
 * The Transformation model module.
 * @module model/Transformation
 * @version 0.2.6
 */
class Transformation {
    /**
     * Constructs a new <code>Transformation</code>.
     * Apply one or more transformations to a clip. Transformations alter the visual properties of a clip and can be combined to create new shapes and effects.
     * @alias module:model/Transformation
     */
    constructor() { 
        
        Transformation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Transformation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Transformation} obj Optional instance to populate.
     * @return {module:model/Transformation} The populated <code>Transformation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Transformation();

            if (data.hasOwnProperty('rotate')) {
                obj['rotate'] = RotateTransformation.constructFromObject(data['rotate']);
            }
            if (data.hasOwnProperty('skew')) {
                obj['skew'] = SkewTransformation.constructFromObject(data['skew']);
            }
            if (data.hasOwnProperty('flip')) {
                obj['flip'] = FlipTransformation.constructFromObject(data['flip']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Transformation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Transformation</code>.
     */
    static validateJSON(data) {
        // validate the optional field `rotate`
        if (data['rotate']) { // data not null
          RotateTransformation.validateJSON(data['rotate']);
        }
        // validate the optional field `skew`
        if (data['skew']) { // data not null
          SkewTransformation.validateJSON(data['skew']);
        }
        // validate the optional field `flip`
        if (data['flip']) { // data not null
          FlipTransformation.validateJSON(data['flip']);
        }

        return true;
    }

/**
     * @return {module:model/RotateTransformation}
     */
    getRotate() {
        return this.rotate;
    }

    /**
     * @param {module:model/RotateTransformation} rotate
     */
    setRotate(rotate) {
        this['rotate'] = rotate;
        return this;
    }
/**
     * @return {module:model/SkewTransformation}
     */
    getSkew() {
        return this.skew;
    }

    /**
     * @param {module:model/SkewTransformation} skew
     */
    setSkew(skew) {
        this['skew'] = skew;
        return this;
    }
/**
     * @return {module:model/FlipTransformation}
     */
    getFlip() {
        return this.flip;
    }

    /**
     * @param {module:model/FlipTransformation} flip
     */
    setFlip(flip) {
        this['flip'] = flip;
        return this;
    }

}



/**
 * @member {module:model/RotateTransformation} rotate
 */
Transformation.prototype['rotate'] = undefined;

/**
 * @member {module:model/SkewTransformation} skew
 */
Transformation.prototype['skew'] = undefined;

/**
 * @member {module:model/FlipTransformation} flip
 */
Transformation.prototype['flip'] = undefined;






export default Transformation;

