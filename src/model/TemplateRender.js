/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.io/docs/guide/) documentation.  There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>  The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b> 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 5.4.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/MergeField'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./MergeField'));
  } else {
    // Browser globals (root is window)
    if (!root.ShotstackSdk) {
      root.ShotstackSdk = {};
    }
    root.ShotstackSdk.TemplateRender = factory(root.ShotstackSdk.ApiClient, root.ShotstackSdk.MergeField);
  }
}(this, function(ApiClient, MergeField) {
  'use strict';



  /**
   * The TemplateRender model module.
   * @module model/TemplateRender
   * @version v1
   */

  /**
   * Constructs a new <code>TemplateRender</code>.
   * Configure the id and optional merge fields to render a template by id.
   * @alias module:model/TemplateRender
   * @class
   * @param id {String} The id of the template to render in UUID format.
   */
  var exports = function(id) {
    var _this = this;

    _this['id'] = id;
  };

  /**
   * Constructs a <code>TemplateRender</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/TemplateRender} obj Optional instance to populate.
   * @return {module:model/TemplateRender} The populated <code>TemplateRender</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('merge')) {
        obj['merge'] = ApiClient.convertToType(data['merge'], [MergeField]);
      }
    }
    return obj;
  }

  /**
   * The id of the template to render in UUID format.
   * @member {String} id
   */
  exports.prototype['id'] = undefined;
  /**
   * An array of key/value pairs that provides an easy way to create templates with placeholders. The placeholders can be used to find and replace keys with values. For example you can search for the placeholder `{{NAME}}` and replace it with the value `Jane`. 
   * @member {Array.<module:model/MergeField>} merge
   */
  exports.prototype['merge'] = undefined;


  /**
   * Returns The id of the template to render in UUID format.
   * @return {String}
   */
  exports.prototype.getId = function() {
    return this['id'];
  }

  /**
   * Sets The id of the template to render in UUID format.
   * @param {String} id The id of the template to render in UUID format.
   */
  exports.prototype.setId = function(id) {
    this['id'] = id;
    return this;
  }


  /**
   * Returns An array of key/value pairs that provides an easy way to create templates with placeholders. The placeholders can be used to find and replace keys with values. For example you can search for the placeholder `{{NAME}}` and replace it with the value `Jane`. 
   * @return {Array.<module:model/MergeField>}
   */
  exports.prototype.getMerge = function() {
    return this['merge'];
  }

  /**
   * Sets An array of key/value pairs that provides an easy way to create templates with placeholders. The placeholders can be used to find and replace keys with values. For example you can search for the placeholder `{{NAME}}` and replace it with the value `Jane`. 
   * @param {Array.<module:model/MergeField>} merge An array of key/value pairs that provides an easy way to create templates with placeholders. The placeholders can be used to find and replace keys with values. For example you can search for the placeholder `{{NAME}}` and replace it with the value `Jane`. 
   */
  exports.prototype.setMerge = function(merge) {
    this['merge'] = merge;
    return this;
  }



  return exports;
}));


