/**
 * Shotstack
 * Official Node SDK for the Shotstack Cloud Video Editing API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ElevenLabsTextToSpeechOptions model module.
 * @module model/ElevenLabsTextToSpeechOptions
 * @version 0.2.6
 */
class ElevenLabsTextToSpeechOptions {
    /**
     * Constructs a new <code>ElevenLabsTextToSpeechOptions</code>.
     * Options for the ElevenLabs text-to-speech service. Set the text to be converted to speech and choose a voice to set the speaking style. The output will be generated as an MP3 audio file available at the URL returned in the response.
     * @alias module:model/ElevenLabsTextToSpeechOptions
     * @param type {module:model/ElevenLabsTextToSpeechOptions.TypeEnum} The type of asset to generate - set to `text-to-speech` for text-to-speech.
     * @param text {String} The text to convert to speech.
     * @param voice {module:model/ElevenLabsTextToSpeechOptions.VoiceEnum} The voice to use for the text-to-speech conversion. Select a voice from the list of available voices: <ul>   <li>`Adam`</li>   <li>`Antoni`</li>   <li>`Arnold`</li>   <li>`Bella`</li>   <li>`Domi`</li>   <li>`Elli`</li>   <li>`Josh`</li>   <li>`Rachel`</li>   <li>`Sam`</li> </ul>
     */
    constructor(type, text, voice) { 
        
        ElevenLabsTextToSpeechOptions.initialize(this, type, text, voice);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, text, voice) { 
        obj['type'] = type;
        obj['text'] = text;
        obj['voice'] = voice;
    }

    /**
     * Constructs a <code>ElevenLabsTextToSpeechOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ElevenLabsTextToSpeechOptions} obj Optional instance to populate.
     * @return {module:model/ElevenLabsTextToSpeechOptions} The populated <code>ElevenLabsTextToSpeechOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ElevenLabsTextToSpeechOptions();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('voice')) {
                obj['voice'] = ApiClient.convertToType(data['voice'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ElevenLabsTextToSpeechOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ElevenLabsTextToSpeechOptions</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ElevenLabsTextToSpeechOptions.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // ensure the json data is a string
        if (data['voice'] && !(typeof data['voice'] === 'string' || data['voice'] instanceof String)) {
            throw new Error("Expected the field `voice` to be a primitive type in the JSON string but got " + data['voice']);
        }

        return true;
    }

/**
     * Returns The type of asset to generate - set to `text-to-speech` for text-to-speech.
     * @return {module:model/ElevenLabsTextToSpeechOptions.TypeEnum}
     */
    getType() {
        return this.type;
    }

    /**
     * Sets The type of asset to generate - set to `text-to-speech` for text-to-speech.
     * @param {module:model/ElevenLabsTextToSpeechOptions.TypeEnum} type The type of asset to generate - set to `text-to-speech` for text-to-speech.
     */
    setType(type) {
        this['type'] = type;
        return this;
    }
/**
     * Returns The text to convert to speech.
     * @return {String}
     */
    getText() {
        return this.text;
    }

    /**
     * Sets The text to convert to speech.
     * @param {String} text The text to convert to speech.
     */
    setText(text) {
        this['text'] = text;
        return this;
    }
/**
     * Returns The voice to use for the text-to-speech conversion. Select a voice from the list of available voices: <ul>   <li>`Adam`</li>   <li>`Antoni`</li>   <li>`Arnold`</li>   <li>`Bella`</li>   <li>`Domi`</li>   <li>`Elli`</li>   <li>`Josh`</li>   <li>`Rachel`</li>   <li>`Sam`</li> </ul>
     * @return {module:model/ElevenLabsTextToSpeechOptions.VoiceEnum}
     */
    getVoice() {
        return this.voice;
    }

    /**
     * Sets The voice to use for the text-to-speech conversion. Select a voice from the list of available voices: <ul>   <li>`Adam`</li>   <li>`Antoni`</li>   <li>`Arnold`</li>   <li>`Bella`</li>   <li>`Domi`</li>   <li>`Elli`</li>   <li>`Josh`</li>   <li>`Rachel`</li>   <li>`Sam`</li> </ul>
     * @param {module:model/ElevenLabsTextToSpeechOptions.VoiceEnum} voice The voice to use for the text-to-speech conversion. Select a voice from the list of available voices: <ul>   <li>`Adam`</li>   <li>`Antoni`</li>   <li>`Arnold`</li>   <li>`Bella`</li>   <li>`Domi`</li>   <li>`Elli`</li>   <li>`Josh`</li>   <li>`Rachel`</li>   <li>`Sam`</li> </ul>
     */
    setVoice(voice) {
        this['voice'] = voice;
        return this;
    }

}

ElevenLabsTextToSpeechOptions.RequiredProperties = ["type", "text", "voice"];

/**
 * The type of asset to generate - set to `text-to-speech` for text-to-speech.
 * @member {module:model/ElevenLabsTextToSpeechOptions.TypeEnum} type
 */
ElevenLabsTextToSpeechOptions.prototype['type'] = undefined;

/**
 * The text to convert to speech.
 * @member {String} text
 */
ElevenLabsTextToSpeechOptions.prototype['text'] = undefined;

/**
 * The voice to use for the text-to-speech conversion. Select a voice from the list of available voices: <ul>   <li>`Adam`</li>   <li>`Antoni`</li>   <li>`Arnold`</li>   <li>`Bella`</li>   <li>`Domi`</li>   <li>`Elli`</li>   <li>`Josh`</li>   <li>`Rachel`</li>   <li>`Sam`</li> </ul>
 * @member {module:model/ElevenLabsTextToSpeechOptions.VoiceEnum} voice
 */
ElevenLabsTextToSpeechOptions.prototype['voice'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ElevenLabsTextToSpeechOptions['TypeEnum'] = {

    /**
     * value: "text-to-speech"
     * @const
     */
    "text-to-speech": "text-to-speech"
};


/**
 * Allowed values for the <code>voice</code> property.
 * @enum {String}
 * @readonly
 */
ElevenLabsTextToSpeechOptions['VoiceEnum'] = {

    /**
     * value: "Adam"
     * @const
     */
    "Adam": "Adam",

    /**
     * value: "Antoni"
     * @const
     */
    "Antoni": "Antoni",

    /**
     * value: "Arnold"
     * @const
     */
    "Arnold": "Arnold",

    /**
     * value: "Bella"
     * @const
     */
    "Bella": "Bella",

    /**
     * value: "Domi"
     * @const
     */
    "Domi": "Domi",

    /**
     * value: "Elli"
     * @const
     */
    "Elli": "Elli",

    /**
     * value: "Josh"
     * @const
     */
    "Josh": "Josh",

    /**
     * value: "Rachel"
     * @const
     */
    "Rachel": "Rachel",

    /**
     * value: "Sam"
     * @const
     */
    "Sam": "Sam"
};



export default ElevenLabsTextToSpeechOptions;

