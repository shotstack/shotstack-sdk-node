"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Shotstack
 * Official Node SDK for the Shotstack Cloud Video Editing API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
 * The Tween model module.
 * @module model/Tween
 * @version 0.2.9
 */
var Tween = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>Tween</code>.
   * Use a Tween to [animate properties over time](/docs/guide/architecting-an-application/animations/). The following properties are currently supported and can be animated:   &lt;ul&gt;     &lt;li&gt;Opacity - animate the transparency of a clip.&lt;/li&gt;     &lt;li&gt;Offset - animate the x and y position of a clip.&lt;/li&gt;     &lt;li&gt;Rotation - animate the rotation of a clip.&lt;/li&gt;     &lt;li&gt;Skew - animate the horizontal and vertical shearing effect.&lt;/li&gt;     &lt;li&gt;Volume - animate the audio volume of a clip.&lt;/li&gt;   &lt;/ul&gt;
   * @alias module:model/Tween
   */
  function Tween() {
    _classCallCheck(this, Tween);
    Tween.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  return _createClass(Tween, [{
    key: "getFrom",
    value:
    /**
         * Returns The initial property value at the start of the animation.
         * @return {Object}
         */
    function getFrom() {
      return this.from;
    }

    /**
     * Sets The initial property value at the start of the animation.
     * @param {Object} from The initial property value at the start of the animation.
     */
  }, {
    key: "setFrom",
    value: function setFrom(from) {
      this['from'] = from;
      return this;
    }
    /**
         * Returns The final property value at the end of the animation.
         * @return {Object}
         */
  }, {
    key: "getTo",
    value: function getTo() {
      return this.to;
    }

    /**
     * Sets The final property value at the end of the animation.
     * @param {Object} to The final property value at the end of the animation.
     */
  }, {
    key: "setTo",
    value: function setTo(to) {
      this['to'] = to;
      return this;
    }
    /**
         * Returns The time in seconds when the animation starts, relative to the clip, not the timeline.
         * @return {Number}
         */
  }, {
    key: "getStart",
    value: function getStart() {
      return this.start;
    }

    /**
     * Sets The time in seconds when the animation starts, relative to the clip, not the timeline.
     * @param {Number} start The time in seconds when the animation starts, relative to the clip, not the timeline.
     */
  }, {
    key: "setStart",
    value: function setStart(start) {
      this['start'] = start;
      return this;
    }
    /**
         * Returns The duration of the animation in seconds.
         * @return {Number}
         */
  }, {
    key: "getLength",
    value: function getLength() {
      return this.length;
    }

    /**
     * Sets The duration of the animation in seconds.
     * @param {Number} length The duration of the animation in seconds.
     */
  }, {
    key: "setLength",
    value: function setLength(length) {
      this['length'] = length;
      return this;
    }
    /**
         * Returns The interpolation method to use for the animation. Available options are: <ul>   <li>`linear` - a linear interpolation between the start and end values.</li>   <li>`bezier` - a bezier curve interpolation between the start and end values.</li> </ul>
         * @return {module:model/Tween.InterpolationEnum}
         */
  }, {
    key: "getInterpolation",
    value: function getInterpolation() {
      return this.interpolation;
    }

    /**
     * Sets The interpolation method to use for the animation. Available options are: <ul>   <li>`linear` - a linear interpolation between the start and end values.</li>   <li>`bezier` - a bezier curve interpolation between the start and end values.</li> </ul>
     * @param {module:model/Tween.InterpolationEnum} interpolation The interpolation method to use for the animation. Available options are: <ul>   <li>`linear` - a linear interpolation between the start and end values.</li>   <li>`bezier` - a bezier curve interpolation between the start and end values.</li> </ul>
     */
  }, {
    key: "setInterpolation",
    value: function setInterpolation(interpolation) {
      this['interpolation'] = interpolation;
      return this;
    }
  }], [{
    key: "initialize",
    value: function initialize(obj) {}

    /**
     * Constructs a <code>Tween</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Tween} obj Optional instance to populate.
     * @return {module:model/Tween} The populated <code>Tween</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new Tween();
        if (data.hasOwnProperty('from')) {
          obj['from'] = _ApiClient["default"].convertToType(data['from'], Object);
        }
        if (data.hasOwnProperty('to')) {
          obj['to'] = _ApiClient["default"].convertToType(data['to'], Object);
        }
        if (data.hasOwnProperty('start')) {
          obj['start'] = _ApiClient["default"].convertToType(data['start'], 'Number');
        }
        if (data.hasOwnProperty('length')) {
          obj['length'] = _ApiClient["default"].convertToType(data['length'], 'Number');
        }
        if (data.hasOwnProperty('interpolation')) {
          obj['interpolation'] = _ApiClient["default"].convertToType(data['interpolation'], 'String');
        }
      }
      return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Tween</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Tween</code>.
     */
  }, {
    key: "validateJSON",
    value: function validateJSON(data) {
      // ensure the json data is a string
      if (data['interpolation'] && !(typeof data['interpolation'] === 'string' || data['interpolation'] instanceof String)) {
        throw new Error("Expected the field `interpolation` to be a primitive type in the JSON string but got " + data['interpolation']);
      }
      return true;
    }
  }]);
}();
/**
 * The initial property value at the start of the animation.
 * @member {Object} from
 */
Tween.prototype['from'] = undefined;

/**
 * The final property value at the end of the animation.
 * @member {Object} to
 */
Tween.prototype['to'] = undefined;

/**
 * The time in seconds when the animation starts, relative to the clip, not the timeline.
 * @member {Number} start
 */
Tween.prototype['start'] = undefined;

/**
 * The duration of the animation in seconds.
 * @member {Number} length
 */
Tween.prototype['length'] = undefined;

/**
 * The interpolation method to use for the animation. Available options are: <ul>   <li>`linear` - a linear interpolation between the start and end values.</li>   <li>`bezier` - a bezier curve interpolation between the start and end values.</li> </ul>
 * @member {module:model/Tween.InterpolationEnum} interpolation
 */
Tween.prototype['interpolation'] = undefined;

/**
 * Allowed values for the <code>interpolation</code> property.
 * @enum {String}
 * @readonly
 */
Tween['InterpolationEnum'] = {
  /**
   * value: "linear"
   * @const
   */
  "linear": "linear",
  /**
   * value: "bezier"
   * @const
   */
  "bezier": "bezier"
};
var _default = exports["default"] = Tween;