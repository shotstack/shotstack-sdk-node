/**
 * Shotstack
 * Official Node SDK for the Shotstack Cloud Video Editing API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TransferResponseAttributes from './TransferResponseAttributes';

/**
 * The TransferResponseData model module.
 * @module model/TransferResponseData
 * @version 0.2.6
 */
class TransferResponseData {
    /**
     * Constructs a new <code>TransferResponseData</code>.
     * The type of resource (an asset) and the transfer attributes. Returned with [TransferResponse](#tocs_transferresponse).
     * @alias module:model/TransferResponseData
     */
    constructor() { 
        
        TransferResponseData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TransferResponseData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransferResponseData} obj Optional instance to populate.
     * @return {module:model/TransferResponseData} The populated <code>TransferResponseData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransferResponseData();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = TransferResponseAttributes.constructFromObject(data['attributes']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransferResponseData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransferResponseData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // validate the optional field `attributes`
        if (data['attributes']) { // data not null
          TransferResponseAttributes.validateJSON(data['attributes']);
        }

        return true;
    }

/**
     * Returns The type of resource, in this case it is an asset.
     * @return {String}
     */
    getType() {
        return this.type;
    }

    /**
     * Sets The type of resource, in this case it is an asset.
     * @param {String} type The type of resource, in this case it is an asset.
     */
    setType(type) {
        this['type'] = type;
        return this;
    }
/**
     * @return {module:model/TransferResponseAttributes}
     */
    getAttributes() {
        return this.attributes;
    }

    /**
     * @param {module:model/TransferResponseAttributes} attributes
     */
    setAttributes(attributes) {
        this['attributes'] = attributes;
        return this;
    }

}



/**
 * The type of resource, in this case it is an asset.
 * @member {String} type
 */
TransferResponseData.prototype['type'] = undefined;

/**
 * @member {module:model/TransferResponseAttributes} attributes
 */
TransferResponseData.prototype['attributes'] = undefined;






export default TransferResponseData;

