/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.io/docs/guide/) documentation.  There are three API's, one for editing and generating assets (Edit API), one for managing hosted assets (Serve API) and one for ingesting and transforming source assets (Ingest API).  Each API has it's own base URL and collection of endpoints. Each API uses the same set of API keys.  **[Edit API](#shotstack-edit)** - [https://api.shotstack.io/edit/{version}](#)<br> Edit videos, images and audio assets in the cloud using a simple JSON schema and templates.  **[Serve API](#shotstack-serve)** - [https://api.shotstack.io/serve/{version}](#)<br> Inspect and manage the hosting of assets generated by the Edit and Ingest APIs.  **[Ingest API](#shotstack-ingest)** - [https://api.shotstack.io/ingest/{version}](#)<br> Ingest (upload, store and transform) source footage, images, audio and fonts to be used by the Edit API.  **[Create API](#shotstack-create)** - [https://api.shotstack.io/create/{version}](#)<br> Generate images, videos, voice overs and text using built in and third party generative AI providers. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ShotstackImageToVideoOptions model module.
 * @module model/ShotstackImageToVideoOptions
 * @version 0.2.6
 */
class ShotstackImageToVideoOptions {
    /**
     * Constructs a new <code>ShotstackImageToVideoOptions</code>.
     * Options for the Shotstack image-to-video service. Set the URL of an image to convert in to a video. The output will be generated as an MP4 file available at the URL returned in the response.
     * @alias module:model/ShotstackImageToVideoOptions
     * @param type {module:model/ShotstackImageToVideoOptions.TypeEnum} The type of asset to generate - set to `image-to-video` for image-to-video.
     * @param imageUrl {String} The URL of the image to convert to video. The URL must be publicly accessible or include credentials. The image dimensions must exactly match one of the following: 1024px x 576px, 576px x 1024px or 768px x 768px.
     */
    constructor(type, imageUrl) { 
        
        ShotstackImageToVideoOptions.initialize(this, type, imageUrl);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, imageUrl) { 
        obj['type'] = type || 'image-to-video';
        obj['imageUrl'] = imageUrl;
    }

    /**
     * Constructs a <code>ShotstackImageToVideoOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ShotstackImageToVideoOptions} obj Optional instance to populate.
     * @return {module:model/ShotstackImageToVideoOptions} The populated <code>ShotstackImageToVideoOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ShotstackImageToVideoOptions();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('imageUrl')) {
                obj['imageUrl'] = ApiClient.convertToType(data['imageUrl'], 'String');
            }
            if (data.hasOwnProperty('guidanceScale')) {
                obj['guidanceScale'] = ApiClient.convertToType(data['guidanceScale'], 'Number');
            }
            if (data.hasOwnProperty('motion')) {
                obj['motion'] = ApiClient.convertToType(data['motion'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ShotstackImageToVideoOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ShotstackImageToVideoOptions</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ShotstackImageToVideoOptions.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['imageUrl'] && !(typeof data['imageUrl'] === 'string' || data['imageUrl'] instanceof String)) {
            throw new Error("Expected the field `imageUrl` to be a primitive type in the JSON string but got " + data['imageUrl']);
        }

        return true;
    }

/**
     * Returns The type of asset to generate - set to `image-to-video` for image-to-video.
     * @return {module:model/ShotstackImageToVideoOptions.TypeEnum}
     */
    getType() {
        return this.type;
    }

    /**
     * Sets The type of asset to generate - set to `image-to-video` for image-to-video.
     * @param {module:model/ShotstackImageToVideoOptions.TypeEnum} type The type of asset to generate - set to `image-to-video` for image-to-video.
     */
    setType(type) {
        this['type'] = type;
        return this;
    }
/**
     * Returns The URL of the image to convert to video. The URL must be publicly accessible or include credentials. The image dimensions must exactly match one of the following: 1024px x 576px, 576px x 1024px or 768px x 768px.
     * @return {String}
     */
    getImageUrl() {
        return this.imageUrl;
    }

    /**
     * Sets The URL of the image to convert to video. The URL must be publicly accessible or include credentials. The image dimensions must exactly match one of the following: 1024px x 576px, 576px x 1024px or 768px x 768px.
     * @param {String} imageUrl The URL of the image to convert to video. The URL must be publicly accessible or include credentials. The image dimensions must exactly match one of the following: 1024px x 576px, 576px x 1024px or 768px x 768px.
     */
    setImageUrl(imageUrl) {
        this['imageUrl'] = imageUrl;
        return this;
    }
/**
     * Returns The guidance scale determines how closely the generated video will match the image. Lower numbers allow for more creative freedom. A number between 0 and 10.
     * @return {Number}
     */
    getGuidanceScale() {
        return this.guidanceScale;
    }

    /**
     * Sets The guidance scale determines how closely the generated video will match the image. Lower numbers allow for more creative freedom. A number between 0 and 10.
     * @param {Number} guidanceScale The guidance scale determines how closely the generated video will match the image. Lower numbers allow for more creative freedom. A number between 0 and 10.
     */
    setGuidanceScale(guidanceScale) {
        this['guidanceScale'] = guidanceScale;
        return this;
    }
/**
     * Returns The amount of motion in the video. A number between 1 and 255.
     * @return {Number}
     */
    getMotion() {
        return this.motion;
    }

    /**
     * Sets The amount of motion in the video. A number between 1 and 255.
     * @param {Number} motion The amount of motion in the video. A number between 1 and 255.
     */
    setMotion(motion) {
        this['motion'] = motion;
        return this;
    }

}

ShotstackImageToVideoOptions.RequiredProperties = ["type", "imageUrl"];

/**
 * The type of asset to generate - set to `image-to-video` for image-to-video.
 * @member {module:model/ShotstackImageToVideoOptions.TypeEnum} type
 * @default 'image-to-video'
 */
ShotstackImageToVideoOptions.prototype['type'] = 'image-to-video';

/**
 * The URL of the image to convert to video. The URL must be publicly accessible or include credentials. The image dimensions must exactly match one of the following: 1024px x 576px, 576px x 1024px or 768px x 768px.
 * @member {String} imageUrl
 */
ShotstackImageToVideoOptions.prototype['imageUrl'] = undefined;

/**
 * The guidance scale determines how closely the generated video will match the image. Lower numbers allow for more creative freedom. A number between 0 and 10.
 * @member {Number} guidanceScale
 * @default 1.8
 */
ShotstackImageToVideoOptions.prototype['guidanceScale'] = 1.8;

/**
 * The amount of motion in the video. A number between 1 and 255.
 * @member {Number} motion
 * @default 127
 */
ShotstackImageToVideoOptions.prototype['motion'] = 127;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ShotstackImageToVideoOptions['TypeEnum'] = {

    /**
     * value: "image-to-video"
     * @const
     */
    "image-to-video": "image-to-video"
};



export default ShotstackImageToVideoOptions;

