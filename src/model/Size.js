/**
 * Shotstack
 * Official Node SDK for the Shotstack Cloud Video Editing API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Size model module.
 * @module model/Size
 * @version 0.2.6
 */
class Size {
    /**
     * Constructs a new <code>Size</code>.
     * Set a custom size for a video or image in pixels. When using a custom size omit the &#x60;resolution&#x60; and &#x60;aspectRatio&#x60;. Custom sizes must be divisible by 2 based on the encoder specifications.
     * @alias module:model/Size
     */
    constructor() { 
        
        Size.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Size</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Size} obj Optional instance to populate.
     * @return {module:model/Size} The populated <code>Size</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Size();

            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Size</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Size</code>.
     */
    static validateJSON(data) {

        return true;
    }

/**
     * Returns Set a custom width for the video or image file in pixels. Value must be divisible by 2. Maximum video width is 1920px, maximum image width is 4096px.
     * minimum: 1
     * maximum: 4096
     * @return {Number}
     */
    getWidth() {
        return this.width;
    }

    /**
     * Sets Set a custom width for the video or image file in pixels. Value must be divisible by 2. Maximum video width is 1920px, maximum image width is 4096px.
     * @param {Number} width Set a custom width for the video or image file in pixels. Value must be divisible by 2. Maximum video width is 1920px, maximum image width is 4096px.
     */
    setWidth(width) {
        this['width'] = width;
        return this;
    }
/**
     * Returns Set a custom height for the video or image file in pixels. Value must be divisible by 2. Maximum video height is 1920px, maximum image height is 4096px.
     * minimum: 1
     * maximum: 4096
     * @return {Number}
     */
    getHeight() {
        return this.height;
    }

    /**
     * Sets Set a custom height for the video or image file in pixels. Value must be divisible by 2. Maximum video height is 1920px, maximum image height is 4096px.
     * @param {Number} height Set a custom height for the video or image file in pixels. Value must be divisible by 2. Maximum video height is 1920px, maximum image height is 4096px.
     */
    setHeight(height) {
        this['height'] = height;
        return this;
    }

}



/**
 * Set a custom width for the video or image file in pixels. Value must be divisible by 2. Maximum video width is 1920px, maximum image width is 4096px.
 * @member {Number} width
 */
Size.prototype['width'] = undefined;

/**
 * Set a custom height for the video or image file in pixels. Value must be divisible by 2. Maximum video height is 1920px, maximum image height is 4096px.
 * @member {Number} height
 */
Size.prototype['height'] = undefined;






export default Size;

