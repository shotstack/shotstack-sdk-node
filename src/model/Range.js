/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.io/docs/guide/) documentation.  There are three API's, one for editing and generating assets (Edit API), one for managing hosted assets (Serve API) and one for ingesting and transforming source assets (Ingest API).  Each API has it's own base URL and collection of endpoints. Each API uses the same set of API keys.  **[Edit API](#shotstack-edit)** - [https://api.shotstack.io/edit/{version}](#)<br> Edit videos, images and audio assets in the cloud using a simple JSON schema and templates.  **[Serve API](#shotstack-serve)** - [https://api.shotstack.io/serve/{version}](#)<br> Inspect and manage the hosting of assets generated by the Edit and Ingest APIs.  **[Ingest API](#shotstack-ingest)** - [https://api.shotstack.io/ingest/{version}](#)<br> Ingest (upload, store and transform) source footage, images, audio and fonts to be used by the Edit API.  **[Create API](#shotstack-create)** - [https://api.shotstack.io/create/{version}](#)<br> Generate images, videos, voice overs and text using built in and third party generative AI providers. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Range model module.
 * @module model/Range
 * @version 0.2.6
 */
class Range {
    /**
     * Constructs a new <code>Range</code>.
     * Specify a time range to render, i.e. to render only a portion of a video or audio file. Omit this setting to  export the entire video. Range can also be used to render a frame at a specific time point - setting a range and output format as &#x60;jpg&#x60; will output a single frame image at the range &#x60;start&#x60; point.
     * @alias module:model/Range
     */
    constructor() { 
        
        Range.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Range</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Range} obj Optional instance to populate.
     * @return {module:model/Range} The populated <code>Range</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Range();

            if (data.hasOwnProperty('start')) {
                obj['start'] = ApiClient.convertToType(data['start'], 'Number');
            }
            if (data.hasOwnProperty('length')) {
                obj['length'] = ApiClient.convertToType(data['length'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Range</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Range</code>.
     */
    static validateJSON(data) {

        return true;
    }

/**
     * Returns The point on the timeline, in seconds, to start the render from - i.e. start at second 3.
     * minimum: 0
     * @return {Number}
     */
    getStart() {
        return this.start;
    }

    /**
     * Sets The point on the timeline, in seconds, to start the render from - i.e. start at second 3.
     * @param {Number} start The point on the timeline, in seconds, to start the render from - i.e. start at second 3.
     */
    setStart(start) {
        this['start'] = start;
        return this;
    }
/**
     * Returns The length of the portion of the video or audio to render - i.e. render 6 seconds of the video.
     * minimum: 0
     * @return {Number}
     */
    getLength() {
        return this.length;
    }

    /**
     * Sets The length of the portion of the video or audio to render - i.e. render 6 seconds of the video.
     * @param {Number} length The length of the portion of the video or audio to render - i.e. render 6 seconds of the video.
     */
    setLength(length) {
        this['length'] = length;
        return this;
    }

}



/**
 * The point on the timeline, in seconds, to start the render from - i.e. start at second 3.
 * @member {Number} start
 */
Range.prototype['start'] = undefined;

/**
 * The length of the portion of the video or audio to render - i.e. render 6 seconds of the video.
 * @member {Number} length
 */
Range.prototype['length'] = undefined;






export default Range;

