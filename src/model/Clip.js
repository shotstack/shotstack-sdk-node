/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.io/docs/guide/) documentation.  There are three API's, one for editing and generating assets (Edit API), one for managing hosted assets (Serve API) and one for ingesting and transforming source assets (Ingest API).  Each API has it's own base URL and collection of endpoints. Each API uses the same set of API keys.  **[Edit API](#shotstack-edit)** - [https://api.shotstack.io/edit/{version}](#)<br> Edit videos, images and audio assets in the cloud using a simple JSON schema and templates.  **[Serve API](#shotstack-serve)** - [https://api.shotstack.io/serve/{version}](#)<br> Inspect and manage the hosting of assets generated by the Edit and Ingest APIs.  **[Ingest API](#shotstack-ingest)** - [https://api.shotstack.io/ingest/{version}](#)<br> Ingest (upload, store and transform) source footage, images, audio and fonts to be used by the Edit API.  **[Create API](#shotstack-create)** - [https://api.shotstack.io/create/{version}](#)<br> Generate images, videos, voice overs and text using built in and third party generative AI providers. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Asset from './Asset';
import Offset from './Offset';
import Transformation from './Transformation';
import Transition from './Transition';

/**
 * The Clip model module.
 * @module model/Clip
 * @version 0.2.6
 */
class Clip {
    /**
     * Constructs a new <code>Clip</code>.
     * A clip is a container for a specific type of asset, i.e. a title, image, video, audio or html. You use a Clip to define when an asset will display on the timeline, how long it will play for and transitions, filters and effects to apply to it.
     * @alias module:model/Clip
     * @param asset {module:model/Asset} 
     * @param start {Number} The start position of the Clip on the timeline, in seconds.
     * @param length {Number} The length, in seconds, the Clip should play for.
     */
    constructor(asset, start, length) { 
        
        Clip.initialize(this, asset, start, length);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, asset, start, length) { 
        obj['asset'] = asset;
        obj['start'] = start;
        obj['length'] = length;
    }

    /**
     * Constructs a <code>Clip</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Clip} obj Optional instance to populate.
     * @return {module:model/Clip} The populated <code>Clip</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Clip();

            if (data.hasOwnProperty('asset')) {
                obj['asset'] = Asset.constructFromObject(data['asset']);
            }
            if (data.hasOwnProperty('start')) {
                obj['start'] = ApiClient.convertToType(data['start'], 'Number');
            }
            if (data.hasOwnProperty('length')) {
                obj['length'] = ApiClient.convertToType(data['length'], 'Number');
            }
            if (data.hasOwnProperty('fit')) {
                obj['fit'] = ApiClient.convertToType(data['fit'], 'String');
            }
            if (data.hasOwnProperty('scale')) {
                obj['scale'] = ApiClient.convertToType(data['scale'], 'Number');
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = ApiClient.convertToType(data['position'], 'String');
            }
            if (data.hasOwnProperty('offset')) {
                obj['offset'] = Offset.constructFromObject(data['offset']);
            }
            if (data.hasOwnProperty('transition')) {
                obj['transition'] = Transition.constructFromObject(data['transition']);
            }
            if (data.hasOwnProperty('effect')) {
                obj['effect'] = ApiClient.convertToType(data['effect'], 'String');
            }
            if (data.hasOwnProperty('filter')) {
                obj['filter'] = ApiClient.convertToType(data['filter'], 'String');
            }
            if (data.hasOwnProperty('opacity')) {
                obj['opacity'] = ApiClient.convertToType(data['opacity'], 'Number');
            }
            if (data.hasOwnProperty('transform')) {
                obj['transform'] = Transformation.constructFromObject(data['transform']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Clip</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Clip</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Clip.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `asset`
        if (data['asset']) { // data not null
          Asset.validateJSON(data['asset']);
        }
        // ensure the json data is a string
        if (data['fit'] && !(typeof data['fit'] === 'string' || data['fit'] instanceof String)) {
            throw new Error("Expected the field `fit` to be a primitive type in the JSON string but got " + data['fit']);
        }
        // ensure the json data is a string
        if (data['position'] && !(typeof data['position'] === 'string' || data['position'] instanceof String)) {
            throw new Error("Expected the field `position` to be a primitive type in the JSON string but got " + data['position']);
        }
        // validate the optional field `offset`
        if (data['offset']) { // data not null
          Offset.validateJSON(data['offset']);
        }
        // validate the optional field `transition`
        if (data['transition']) { // data not null
          Transition.validateJSON(data['transition']);
        }
        // ensure the json data is a string
        if (data['effect'] && !(typeof data['effect'] === 'string' || data['effect'] instanceof String)) {
            throw new Error("Expected the field `effect` to be a primitive type in the JSON string but got " + data['effect']);
        }
        // ensure the json data is a string
        if (data['filter'] && !(typeof data['filter'] === 'string' || data['filter'] instanceof String)) {
            throw new Error("Expected the field `filter` to be a primitive type in the JSON string but got " + data['filter']);
        }
        // validate the optional field `transform`
        if (data['transform']) { // data not null
          Transformation.validateJSON(data['transform']);
        }

        return true;
    }

/**
     * @return {module:model/Asset}
     */
    getAsset() {
        return this.asset;
    }

    /**
     * @param {module:model/Asset} asset
     */
    setAsset(asset) {
        this['asset'] = asset;
        return this;
    }
/**
     * Returns The start position of the Clip on the timeline, in seconds.
     * @return {Number}
     */
    getStart() {
        return this.start;
    }

    /**
     * Sets The start position of the Clip on the timeline, in seconds.
     * @param {Number} start The start position of the Clip on the timeline, in seconds.
     */
    setStart(start) {
        this['start'] = start;
        return this;
    }
/**
     * Returns The length, in seconds, the Clip should play for.
     * @return {Number}
     */
    getLength() {
        return this.length;
    }

    /**
     * Sets The length, in seconds, the Clip should play for.
     * @param {Number} length The length, in seconds, the Clip should play for.
     */
    setLength(length) {
        this['length'] = length;
        return this;
    }
/**
     * Returns Set how the asset should be scaled to fit the viewport using one of the following options:    <ul>     <li>`crop` <b>(default)</b> - scale the asset to fill the viewport while maintaining the aspect ratio. The asset will be cropped if it exceeds the bounds of the viewport.</li>     <li>`cover` - stretch the asset to fill the viewport without maintaining the aspect ratio.</li>     <li>`contain` - fit the entire asset within the viewport while maintaining the original aspect ratio.</li>     <li>`none` - preserves the original asset dimensions and does not apply any scaling.</li>   </ul>
     * @return {module:model/Clip.FitEnum}
     */
    getFit() {
        return this.fit;
    }

    /**
     * Sets Set how the asset should be scaled to fit the viewport using one of the following options:    <ul>     <li>`crop` <b>(default)</b> - scale the asset to fill the viewport while maintaining the aspect ratio. The asset will be cropped if it exceeds the bounds of the viewport.</li>     <li>`cover` - stretch the asset to fill the viewport without maintaining the aspect ratio.</li>     <li>`contain` - fit the entire asset within the viewport while maintaining the original aspect ratio.</li>     <li>`none` - preserves the original asset dimensions and does not apply any scaling.</li>   </ul>
     * @param {module:model/Clip.FitEnum} fit Set how the asset should be scaled to fit the viewport using one of the following options:    <ul>     <li>`crop` <b>(default)</b> - scale the asset to fill the viewport while maintaining the aspect ratio. The asset will be cropped if it exceeds the bounds of the viewport.</li>     <li>`cover` - stretch the asset to fill the viewport without maintaining the aspect ratio.</li>     <li>`contain` - fit the entire asset within the viewport while maintaining the original aspect ratio.</li>     <li>`none` - preserves the original asset dimensions and does not apply any scaling.</li>   </ul>
     */
    setFit(fit) {
        this['fit'] = fit;
        return this;
    }
/**
     * Returns Scale the asset to a fraction of the viewport size - i.e. setting the scale to 0.5 will scale asset to half the size of the viewport. This is useful for picture-in-picture video and  scaling images such as logos and watermarks.
     * @return {Number}
     */
    getScale() {
        return this.scale;
    }

    /**
     * Sets Scale the asset to a fraction of the viewport size - i.e. setting the scale to 0.5 will scale asset to half the size of the viewport. This is useful for picture-in-picture video and  scaling images such as logos and watermarks.
     * @param {Number} scale Scale the asset to a fraction of the viewport size - i.e. setting the scale to 0.5 will scale asset to half the size of the viewport. This is useful for picture-in-picture video and  scaling images such as logos and watermarks.
     */
    setScale(scale) {
        this['scale'] = scale;
        return this;
    }
/**
     * Returns Place the asset in one of nine predefined positions of the viewport. This is most effective for when the asset is scaled and you want to position the element to a specific position. <ul>   <li>`top` - top (center)</li>   <li>`topRight` - top right</li>   <li>`right` - right (center)</li>   <li>`bottomRight` - bottom right</li>   <li>`bottom` - bottom (center)</li>   <li>`bottomLeft` - bottom left</li>   <li>`left` - left (center)</li>   <li>`topLeft` - top left</li>   <li>`center` - center</li> </ul>
     * @return {module:model/Clip.PositionEnum}
     */
    getPosition() {
        return this.position;
    }

    /**
     * Sets Place the asset in one of nine predefined positions of the viewport. This is most effective for when the asset is scaled and you want to position the element to a specific position. <ul>   <li>`top` - top (center)</li>   <li>`topRight` - top right</li>   <li>`right` - right (center)</li>   <li>`bottomRight` - bottom right</li>   <li>`bottom` - bottom (center)</li>   <li>`bottomLeft` - bottom left</li>   <li>`left` - left (center)</li>   <li>`topLeft` - top left</li>   <li>`center` - center</li> </ul>
     * @param {module:model/Clip.PositionEnum} position Place the asset in one of nine predefined positions of the viewport. This is most effective for when the asset is scaled and you want to position the element to a specific position. <ul>   <li>`top` - top (center)</li>   <li>`topRight` - top right</li>   <li>`right` - right (center)</li>   <li>`bottomRight` - bottom right</li>   <li>`bottom` - bottom (center)</li>   <li>`bottomLeft` - bottom left</li>   <li>`left` - left (center)</li>   <li>`topLeft` - top left</li>   <li>`center` - center</li> </ul>
     */
    setPosition(position) {
        this['position'] = position;
        return this;
    }
/**
     * @return {module:model/Offset}
     */
    getOffset() {
        return this.offset;
    }

    /**
     * @param {module:model/Offset} offset
     */
    setOffset(offset) {
        this['offset'] = offset;
        return this;
    }
/**
     * @return {module:model/Transition}
     */
    getTransition() {
        return this.transition;
    }

    /**
     * @param {module:model/Transition} transition
     */
    setTransition(transition) {
        this['transition'] = transition;
        return this;
    }
/**
     * Returns A motion effect to apply to the Clip. <ul>   <li>`zoomIn` - slow zoom in</li>   <li>`zoomOut` - slow zoom out</li>   <li>`slideLeft` - slow slide (pan) left</li>   <li>`slideRight` - slow slide (pan) right</li>   <li>`slideUp` - slow slide (pan) up</li>   <li>`slideDown` - slow slide (pan) down</li> </ul> The motion effect speed can also be controlled by appending `Fast` or `Slow` to the effect, e.g. `zoomInFast` or `slideRightSlow`.
     * @return {module:model/Clip.EffectEnum}
     */
    getEffect() {
        return this.effect;
    }

    /**
     * Sets A motion effect to apply to the Clip. <ul>   <li>`zoomIn` - slow zoom in</li>   <li>`zoomOut` - slow zoom out</li>   <li>`slideLeft` - slow slide (pan) left</li>   <li>`slideRight` - slow slide (pan) right</li>   <li>`slideUp` - slow slide (pan) up</li>   <li>`slideDown` - slow slide (pan) down</li> </ul> The motion effect speed can also be controlled by appending `Fast` or `Slow` to the effect, e.g. `zoomInFast` or `slideRightSlow`.
     * @param {module:model/Clip.EffectEnum} effect A motion effect to apply to the Clip. <ul>   <li>`zoomIn` - slow zoom in</li>   <li>`zoomOut` - slow zoom out</li>   <li>`slideLeft` - slow slide (pan) left</li>   <li>`slideRight` - slow slide (pan) right</li>   <li>`slideUp` - slow slide (pan) up</li>   <li>`slideDown` - slow slide (pan) down</li> </ul> The motion effect speed can also be controlled by appending `Fast` or `Slow` to the effect, e.g. `zoomInFast` or `slideRightSlow`.
     */
    setEffect(effect) {
        this['effect'] = effect;
        return this;
    }
/**
     * Returns A filter effect to apply to the Clip. <ul>   <li>`blur` - blur the scene</li>   <li>`boost` - boost contrast and saturation</li>   <li>`contrast` - increase contrast</li>   <li>`darken` - darken the scene</li>   <li>`greyscale` - remove colour</li>   <li>`lighten` - lighten the scene</li>   <li>`muted` - reduce saturation and contrast</li>   <li>`negative` - negative colors</li> </ul>
     * @return {module:model/Clip.FilterEnum}
     */
    getFilter() {
        return this.filter;
    }

    /**
     * Sets A filter effect to apply to the Clip. <ul>   <li>`blur` - blur the scene</li>   <li>`boost` - boost contrast and saturation</li>   <li>`contrast` - increase contrast</li>   <li>`darken` - darken the scene</li>   <li>`greyscale` - remove colour</li>   <li>`lighten` - lighten the scene</li>   <li>`muted` - reduce saturation and contrast</li>   <li>`negative` - negative colors</li> </ul>
     * @param {module:model/Clip.FilterEnum} filter A filter effect to apply to the Clip. <ul>   <li>`blur` - blur the scene</li>   <li>`boost` - boost contrast and saturation</li>   <li>`contrast` - increase contrast</li>   <li>`darken` - darken the scene</li>   <li>`greyscale` - remove colour</li>   <li>`lighten` - lighten the scene</li>   <li>`muted` - reduce saturation and contrast</li>   <li>`negative` - negative colors</li> </ul>
     */
    setFilter(filter) {
        this['filter'] = filter;
        return this;
    }
/**
     * Returns Sets the opacity of the Clip where 1 is opaque and 0 is transparent.
     * @return {Number}
     */
    getOpacity() {
        return this.opacity;
    }

    /**
     * Sets Sets the opacity of the Clip where 1 is opaque and 0 is transparent.
     * @param {Number} opacity Sets the opacity of the Clip where 1 is opaque and 0 is transparent.
     */
    setOpacity(opacity) {
        this['opacity'] = opacity;
        return this;
    }
/**
     * @return {module:model/Transformation}
     */
    getTransform() {
        return this.transform;
    }

    /**
     * @param {module:model/Transformation} transform
     */
    setTransform(transform) {
        this['transform'] = transform;
        return this;
    }

}

Clip.RequiredProperties = ["asset", "start", "length"];

/**
 * @member {module:model/Asset} asset
 */
Clip.prototype['asset'] = undefined;

/**
 * The start position of the Clip on the timeline, in seconds.
 * @member {Number} start
 */
Clip.prototype['start'] = undefined;

/**
 * The length, in seconds, the Clip should play for.
 * @member {Number} length
 */
Clip.prototype['length'] = undefined;

/**
 * Set how the asset should be scaled to fit the viewport using one of the following options:    <ul>     <li>`crop` <b>(default)</b> - scale the asset to fill the viewport while maintaining the aspect ratio. The asset will be cropped if it exceeds the bounds of the viewport.</li>     <li>`cover` - stretch the asset to fill the viewport without maintaining the aspect ratio.</li>     <li>`contain` - fit the entire asset within the viewport while maintaining the original aspect ratio.</li>     <li>`none` - preserves the original asset dimensions and does not apply any scaling.</li>   </ul>
 * @member {module:model/Clip.FitEnum} fit
 */
Clip.prototype['fit'] = undefined;

/**
 * Scale the asset to a fraction of the viewport size - i.e. setting the scale to 0.5 will scale asset to half the size of the viewport. This is useful for picture-in-picture video and  scaling images such as logos and watermarks.
 * @member {Number} scale
 */
Clip.prototype['scale'] = undefined;

/**
 * Place the asset in one of nine predefined positions of the viewport. This is most effective for when the asset is scaled and you want to position the element to a specific position. <ul>   <li>`top` - top (center)</li>   <li>`topRight` - top right</li>   <li>`right` - right (center)</li>   <li>`bottomRight` - bottom right</li>   <li>`bottom` - bottom (center)</li>   <li>`bottomLeft` - bottom left</li>   <li>`left` - left (center)</li>   <li>`topLeft` - top left</li>   <li>`center` - center</li> </ul>
 * @member {module:model/Clip.PositionEnum} position
 */
Clip.prototype['position'] = undefined;

/**
 * @member {module:model/Offset} offset
 */
Clip.prototype['offset'] = undefined;

/**
 * @member {module:model/Transition} transition
 */
Clip.prototype['transition'] = undefined;

/**
 * A motion effect to apply to the Clip. <ul>   <li>`zoomIn` - slow zoom in</li>   <li>`zoomOut` - slow zoom out</li>   <li>`slideLeft` - slow slide (pan) left</li>   <li>`slideRight` - slow slide (pan) right</li>   <li>`slideUp` - slow slide (pan) up</li>   <li>`slideDown` - slow slide (pan) down</li> </ul> The motion effect speed can also be controlled by appending `Fast` or `Slow` to the effect, e.g. `zoomInFast` or `slideRightSlow`.
 * @member {module:model/Clip.EffectEnum} effect
 */
Clip.prototype['effect'] = undefined;

/**
 * A filter effect to apply to the Clip. <ul>   <li>`blur` - blur the scene</li>   <li>`boost` - boost contrast and saturation</li>   <li>`contrast` - increase contrast</li>   <li>`darken` - darken the scene</li>   <li>`greyscale` - remove colour</li>   <li>`lighten` - lighten the scene</li>   <li>`muted` - reduce saturation and contrast</li>   <li>`negative` - negative colors</li> </ul>
 * @member {module:model/Clip.FilterEnum} filter
 */
Clip.prototype['filter'] = undefined;

/**
 * Sets the opacity of the Clip where 1 is opaque and 0 is transparent.
 * @member {Number} opacity
 */
Clip.prototype['opacity'] = undefined;

/**
 * @member {module:model/Transformation} transform
 */
Clip.prototype['transform'] = undefined;





/**
 * Allowed values for the <code>fit</code> property.
 * @enum {String}
 * @readonly
 */
Clip['FitEnum'] = {

    /**
     * value: "cover"
     * @const
     */
    "cover": "cover",

    /**
     * value: "contain"
     * @const
     */
    "contain": "contain",

    /**
     * value: "crop"
     * @const
     */
    "crop": "crop",

    /**
     * value: "none"
     * @const
     */
    "none": "none"
};


/**
 * Allowed values for the <code>position</code> property.
 * @enum {String}
 * @readonly
 */
Clip['PositionEnum'] = {

    /**
     * value: "top"
     * @const
     */
    "top": "top",

    /**
     * value: "topRight"
     * @const
     */
    "topRight": "topRight",

    /**
     * value: "right"
     * @const
     */
    "right": "right",

    /**
     * value: "bottomRight"
     * @const
     */
    "bottomRight": "bottomRight",

    /**
     * value: "bottom"
     * @const
     */
    "bottom": "bottom",

    /**
     * value: "bottomLeft"
     * @const
     */
    "bottomLeft": "bottomLeft",

    /**
     * value: "left"
     * @const
     */
    "left": "left",

    /**
     * value: "topLeft"
     * @const
     */
    "topLeft": "topLeft",

    /**
     * value: "center"
     * @const
     */
    "center": "center"
};


/**
 * Allowed values for the <code>effect</code> property.
 * @enum {String}
 * @readonly
 */
Clip['EffectEnum'] = {

    /**
     * value: "zoomIn"
     * @const
     */
    "zoomIn": "zoomIn",

    /**
     * value: "zoomInSlow"
     * @const
     */
    "zoomInSlow": "zoomInSlow",

    /**
     * value: "zoomInFast"
     * @const
     */
    "zoomInFast": "zoomInFast",

    /**
     * value: "zoomOut"
     * @const
     */
    "zoomOut": "zoomOut",

    /**
     * value: "zoomOutSlow"
     * @const
     */
    "zoomOutSlow": "zoomOutSlow",

    /**
     * value: "zoomOutFast"
     * @const
     */
    "zoomOutFast": "zoomOutFast",

    /**
     * value: "slideLeft"
     * @const
     */
    "slideLeft": "slideLeft",

    /**
     * value: "slideLeftSlow"
     * @const
     */
    "slideLeftSlow": "slideLeftSlow",

    /**
     * value: "slideLeftFast"
     * @const
     */
    "slideLeftFast": "slideLeftFast",

    /**
     * value: "slideRight"
     * @const
     */
    "slideRight": "slideRight",

    /**
     * value: "slideRightSlow"
     * @const
     */
    "slideRightSlow": "slideRightSlow",

    /**
     * value: "slideRightFast"
     * @const
     */
    "slideRightFast": "slideRightFast",

    /**
     * value: "slideUp"
     * @const
     */
    "slideUp": "slideUp",

    /**
     * value: "slideUpSlow"
     * @const
     */
    "slideUpSlow": "slideUpSlow",

    /**
     * value: "slideUpFast"
     * @const
     */
    "slideUpFast": "slideUpFast",

    /**
     * value: "slideDown"
     * @const
     */
    "slideDown": "slideDown",

    /**
     * value: "slideDownSlow"
     * @const
     */
    "slideDownSlow": "slideDownSlow",

    /**
     * value: "slideDownFast"
     * @const
     */
    "slideDownFast": "slideDownFast"
};


/**
 * Allowed values for the <code>filter</code> property.
 * @enum {String}
 * @readonly
 */
Clip['FilterEnum'] = {

    /**
     * value: "blur"
     * @const
     */
    "blur": "blur",

    /**
     * value: "boost"
     * @const
     */
    "boost": "boost",

    /**
     * value: "contrast"
     * @const
     */
    "contrast": "contrast",

    /**
     * value: "darken"
     * @const
     */
    "darken": "darken",

    /**
     * value: "greyscale"
     * @const
     */
    "greyscale": "greyscale",

    /**
     * value: "lighten"
     * @const
     */
    "lighten": "lighten",

    /**
     * value: "muted"
     * @const
     */
    "muted": "muted",

    /**
     * value: "negative"
     * @const
     */
    "negative": "negative"
};



export default Clip;

