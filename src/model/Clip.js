/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.io/docs/guide/) documentation.  There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>  The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b> 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 5.4.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Asset', 'model/Offset', 'model/Transformation', 'model/Transition'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Asset'), require('./Offset'), require('./Transformation'), require('./Transition'));
  } else {
    // Browser globals (root is window)
    if (!root.ShotstackSdk) {
      root.ShotstackSdk = {};
    }
    root.ShotstackSdk.Clip = factory(root.ShotstackSdk.ApiClient, root.ShotstackSdk.Asset, root.ShotstackSdk.Offset, root.ShotstackSdk.Transformation, root.ShotstackSdk.Transition);
  }
}(this, function(ApiClient, Asset, Offset, Transformation, Transition) {
  'use strict';



  /**
   * The Clip model module.
   * @module model/Clip
   * @version v1
   */

  /**
   * Constructs a new <code>Clip</code>.
   * A clip is a container for a specific type of asset, i.e. a title, image, video, audio or html. You use a Clip to define when an asset will display on the timeline, how long it will play for and transitions, filters and effects to apply to it.
   * @alias module:model/Clip
   * @class
   * @param asset {module:model/Asset} 
   * @param start {Number} The start position of the Clip on the timeline, in seconds.
   * @param length {Number} The length, in seconds, the Clip should play for.
   */
  var exports = function(asset, start, length) {
    var _this = this;

    _this['asset'] = asset;
    _this['start'] = start;
    _this['length'] = length;
  };

  /**
   * Constructs a <code>Clip</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Clip} obj Optional instance to populate.
   * @return {module:model/Clip} The populated <code>Clip</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('asset')) {
        obj['asset'] = Asset.constructFromObject(data['asset']);
      }
      if (data.hasOwnProperty('start')) {
        obj['start'] = ApiClient.convertToType(data['start'], 'Number');
      }
      if (data.hasOwnProperty('length')) {
        obj['length'] = ApiClient.convertToType(data['length'], 'Number');
      }
      if (data.hasOwnProperty('fit')) {
        obj['fit'] = ApiClient.convertToType(data['fit'], 'String');
      }
      if (data.hasOwnProperty('scale')) {
        obj['scale'] = ApiClient.convertToType(data['scale'], 'Number');
      }
      if (data.hasOwnProperty('position')) {
        obj['position'] = ApiClient.convertToType(data['position'], 'String');
      }
      if (data.hasOwnProperty('offset')) {
        obj['offset'] = Offset.constructFromObject(data['offset']);
      }
      if (data.hasOwnProperty('transition')) {
        obj['transition'] = Transition.constructFromObject(data['transition']);
      }
      if (data.hasOwnProperty('effect')) {
        obj['effect'] = ApiClient.convertToType(data['effect'], 'String');
      }
      if (data.hasOwnProperty('filter')) {
        obj['filter'] = ApiClient.convertToType(data['filter'], 'String');
      }
      if (data.hasOwnProperty('opacity')) {
        obj['opacity'] = ApiClient.convertToType(data['opacity'], 'Number');
      }
      if (data.hasOwnProperty('transform')) {
        obj['transform'] = Transformation.constructFromObject(data['transform']);
      }
    }
    return obj;
  }

  /**
   * @member {module:model/Asset} asset
   */
  exports.prototype['asset'] = undefined;
  /**
   * The start position of the Clip on the timeline, in seconds.
   * @member {Number} start
   */
  exports.prototype['start'] = undefined;
  /**
   * The length, in seconds, the Clip should play for.
   * @member {Number} length
   */
  exports.prototype['length'] = undefined;
  /**
   * Set how the asset should be scaled to fit the viewport using one of the following options:    <ul>     <li>`crop` <b>(default)</b> - scale the asset to fill the viewport while maintaining the aspect ratio. The asset will be cropped if it exceeds the bounds of the viewport.</li>     <li>`cover` - stretch the asset to fill the viewport without maintaining the aspect ratio.</li>     <li>`contain` - fit the entire asset within the viewport while maintaining the original aspect ratio.</li>     <li>`none` - preserves the original asset dimensions and does not apply any scaling.</li>   </ul>
   * @member {module:model/Clip.FitEnum} fit
   */
  exports.prototype['fit'] = undefined;
  /**
   * Scale the asset to a fraction of the viewport size - i.e. setting the scale to 0.5 will scale asset to half the size of the viewport. This is useful for picture-in-picture video and  scaling images such as logos and watermarks.
   * @member {Number} scale
   */
  exports.prototype['scale'] = undefined;
  /**
   * Place the asset in one of nine predefined positions of the viewport. This is most effective for when the asset is scaled and you want to position the element to a specific position. <ul>   <li>`top` - top (center)</li>   <li>`topRight` - top right</li>   <li>`right` - right (center)</li>   <li>`bottomRight` - bottom right</li>   <li>`bottom` - bottom (center)</li>   <li>`bottomLeft` - bottom left</li>   <li>`left` - left (center)</li>   <li>`topLeft` - top left</li>   <li>`center` - center</li> </ul>
   * @member {module:model/Clip.PositionEnum} position
   */
  exports.prototype['position'] = undefined;
  /**
   * @member {module:model/Offset} offset
   */
  exports.prototype['offset'] = undefined;
  /**
   * @member {module:model/Transition} transition
   */
  exports.prototype['transition'] = undefined;
  /**
   * A motion effect to apply to the Clip. <ul>   <li>`zoomIn` - slow zoom in</li>   <li>`zoomOut` - slow zoom out</li>   <li>`slideLeft` - slow slide (pan) left</li>   <li>`slideRight` - slow slide (pan) right</li>   <li>`slideUp` - slow slide (pan) up</li>   <li>`slideDown` - slow slide (pan) down</li> </ul> The motion effect speed can also be controlled by appending `Fast` or `Slow` to the effect, e.g. `zoomInFast` or `slideRightSlow`.
   * @member {module:model/Clip.EffectEnum} effect
   */
  exports.prototype['effect'] = undefined;
  /**
   * A filter effect to apply to the Clip. <ul>   <li>`boost` - boost contrast and saturation</li>   <li>`contrast` - increase contrast</li>   <li>`darken` - darken the scene</li>   <li>`greyscale` - remove colour</li>   <li>`lighten` - lighten the scene</li>   <li>`muted` - reduce saturation and contrast</li>   <li>`negative` - negative colors</li> </ul>
   * @member {module:model/Clip.FilterEnum} filter
   */
  exports.prototype['filter'] = undefined;
  /**
   * Sets the opacity of the Clip where 1 is opaque and 0 is transparent.
   * @member {Number} opacity
   */
  exports.prototype['opacity'] = undefined;
  /**
   * @member {module:model/Transformation} transform
   */
  exports.prototype['transform'] = undefined;


  /**
   * @return {module:model/Asset}
   */
  exports.prototype.getAsset = function() {
    return this['asset'];
  }

  /**
   * @param {module:model/Asset} asset
   */
  exports.prototype.setAsset = function(asset) {
    this['asset'] = asset;
    return this;
  }


  /**
   * Returns The start position of the Clip on the timeline, in seconds.
   * @return {Number}
   */
  exports.prototype.getStart = function() {
    return this['start'];
  }

  /**
   * Sets The start position of the Clip on the timeline, in seconds.
   * @param {Number} start The start position of the Clip on the timeline, in seconds.
   */
  exports.prototype.setStart = function(start) {
    this['start'] = start;
    return this;
  }


  /**
   * Returns The length, in seconds, the Clip should play for.
   * @return {Number}
   */
  exports.prototype.getLength = function() {
    return this['length'];
  }

  /**
   * Sets The length, in seconds, the Clip should play for.
   * @param {Number} length The length, in seconds, the Clip should play for.
   */
  exports.prototype.setLength = function(length) {
    this['length'] = length;
    return this;
  }


  /**
   * Returns Set how the asset should be scaled to fit the viewport using one of the following options:    <ul>     <li>`crop` <b>(default)</b> - scale the asset to fill the viewport while maintaining the aspect ratio. The asset will be cropped if it exceeds the bounds of the viewport.</li>     <li>`cover` - stretch the asset to fill the viewport without maintaining the aspect ratio.</li>     <li>`contain` - fit the entire asset within the viewport while maintaining the original aspect ratio.</li>     <li>`none` - preserves the original asset dimensions and does not apply any scaling.</li>   </ul>
   * @return {module:model/Clip.FitEnum}
   */
  exports.prototype.getFit = function() {
    return this['fit'];
  }

  /**
   * Sets Set how the asset should be scaled to fit the viewport using one of the following options:    <ul>     <li>`crop` <b>(default)</b> - scale the asset to fill the viewport while maintaining the aspect ratio. The asset will be cropped if it exceeds the bounds of the viewport.</li>     <li>`cover` - stretch the asset to fill the viewport without maintaining the aspect ratio.</li>     <li>`contain` - fit the entire asset within the viewport while maintaining the original aspect ratio.</li>     <li>`none` - preserves the original asset dimensions and does not apply any scaling.</li>   </ul>
   * @param {module:model/Clip.FitEnum} fit Set how the asset should be scaled to fit the viewport using one of the following options:    <ul>     <li>`crop` <b>(default)</b> - scale the asset to fill the viewport while maintaining the aspect ratio. The asset will be cropped if it exceeds the bounds of the viewport.</li>     <li>`cover` - stretch the asset to fill the viewport without maintaining the aspect ratio.</li>     <li>`contain` - fit the entire asset within the viewport while maintaining the original aspect ratio.</li>     <li>`none` - preserves the original asset dimensions and does not apply any scaling.</li>   </ul>
   */
  exports.prototype.setFit = function(fit) {
    this['fit'] = fit;
    return this;
  }


  /**
   * Returns Scale the asset to a fraction of the viewport size - i.e. setting the scale to 0.5 will scale asset to half the size of the viewport. This is useful for picture-in-picture video and  scaling images such as logos and watermarks.
   * @return {Number}
   */
  exports.prototype.getScale = function() {
    return this['scale'];
  }

  /**
   * Sets Scale the asset to a fraction of the viewport size - i.e. setting the scale to 0.5 will scale asset to half the size of the viewport. This is useful for picture-in-picture video and  scaling images such as logos and watermarks.
   * @param {Number} scale Scale the asset to a fraction of the viewport size - i.e. setting the scale to 0.5 will scale asset to half the size of the viewport. This is useful for picture-in-picture video and  scaling images such as logos and watermarks.
   */
  exports.prototype.setScale = function(scale) {
    this['scale'] = scale;
    return this;
  }


  /**
   * Returns Place the asset in one of nine predefined positions of the viewport. This is most effective for when the asset is scaled and you want to position the element to a specific position. <ul>   <li>`top` - top (center)</li>   <li>`topRight` - top right</li>   <li>`right` - right (center)</li>   <li>`bottomRight` - bottom right</li>   <li>`bottom` - bottom (center)</li>   <li>`bottomLeft` - bottom left</li>   <li>`left` - left (center)</li>   <li>`topLeft` - top left</li>   <li>`center` - center</li> </ul>
   * @return {module:model/Clip.PositionEnum}
   */
  exports.prototype.getPosition = function() {
    return this['position'];
  }

  /**
   * Sets Place the asset in one of nine predefined positions of the viewport. This is most effective for when the asset is scaled and you want to position the element to a specific position. <ul>   <li>`top` - top (center)</li>   <li>`topRight` - top right</li>   <li>`right` - right (center)</li>   <li>`bottomRight` - bottom right</li>   <li>`bottom` - bottom (center)</li>   <li>`bottomLeft` - bottom left</li>   <li>`left` - left (center)</li>   <li>`topLeft` - top left</li>   <li>`center` - center</li> </ul>
   * @param {module:model/Clip.PositionEnum} position Place the asset in one of nine predefined positions of the viewport. This is most effective for when the asset is scaled and you want to position the element to a specific position. <ul>   <li>`top` - top (center)</li>   <li>`topRight` - top right</li>   <li>`right` - right (center)</li>   <li>`bottomRight` - bottom right</li>   <li>`bottom` - bottom (center)</li>   <li>`bottomLeft` - bottom left</li>   <li>`left` - left (center)</li>   <li>`topLeft` - top left</li>   <li>`center` - center</li> </ul>
   */
  exports.prototype.setPosition = function(position) {
    this['position'] = position;
    return this;
  }


  /**
   * @return {module:model/Offset}
   */
  exports.prototype.getOffset = function() {
    return this['offset'];
  }

  /**
   * @param {module:model/Offset} offset
   */
  exports.prototype.setOffset = function(offset) {
    this['offset'] = offset;
    return this;
  }


  /**
   * @return {module:model/Transition}
   */
  exports.prototype.getTransition = function() {
    return this['transition'];
  }

  /**
   * @param {module:model/Transition} transition
   */
  exports.prototype.setTransition = function(transition) {
    this['transition'] = transition;
    return this;
  }


  /**
   * Returns A motion effect to apply to the Clip. <ul>   <li>`zoomIn` - slow zoom in</li>   <li>`zoomOut` - slow zoom out</li>   <li>`slideLeft` - slow slide (pan) left</li>   <li>`slideRight` - slow slide (pan) right</li>   <li>`slideUp` - slow slide (pan) up</li>   <li>`slideDown` - slow slide (pan) down</li> </ul> The motion effect speed can also be controlled by appending `Fast` or `Slow` to the effect, e.g. `zoomInFast` or `slideRightSlow`.
   * @return {module:model/Clip.EffectEnum}
   */
  exports.prototype.getEffect = function() {
    return this['effect'];
  }

  /**
   * Sets A motion effect to apply to the Clip. <ul>   <li>`zoomIn` - slow zoom in</li>   <li>`zoomOut` - slow zoom out</li>   <li>`slideLeft` - slow slide (pan) left</li>   <li>`slideRight` - slow slide (pan) right</li>   <li>`slideUp` - slow slide (pan) up</li>   <li>`slideDown` - slow slide (pan) down</li> </ul> The motion effect speed can also be controlled by appending `Fast` or `Slow` to the effect, e.g. `zoomInFast` or `slideRightSlow`.
   * @param {module:model/Clip.EffectEnum} effect A motion effect to apply to the Clip. <ul>   <li>`zoomIn` - slow zoom in</li>   <li>`zoomOut` - slow zoom out</li>   <li>`slideLeft` - slow slide (pan) left</li>   <li>`slideRight` - slow slide (pan) right</li>   <li>`slideUp` - slow slide (pan) up</li>   <li>`slideDown` - slow slide (pan) down</li> </ul> The motion effect speed can also be controlled by appending `Fast` or `Slow` to the effect, e.g. `zoomInFast` or `slideRightSlow`.
   */
  exports.prototype.setEffect = function(effect) {
    this['effect'] = effect;
    return this;
  }


  /**
   * Returns A filter effect to apply to the Clip. <ul>   <li>`boost` - boost contrast and saturation</li>   <li>`contrast` - increase contrast</li>   <li>`darken` - darken the scene</li>   <li>`greyscale` - remove colour</li>   <li>`lighten` - lighten the scene</li>   <li>`muted` - reduce saturation and contrast</li>   <li>`negative` - negative colors</li> </ul>
   * @return {module:model/Clip.FilterEnum}
   */
  exports.prototype.getFilter = function() {
    return this['filter'];
  }

  /**
   * Sets A filter effect to apply to the Clip. <ul>   <li>`boost` - boost contrast and saturation</li>   <li>`contrast` - increase contrast</li>   <li>`darken` - darken the scene</li>   <li>`greyscale` - remove colour</li>   <li>`lighten` - lighten the scene</li>   <li>`muted` - reduce saturation and contrast</li>   <li>`negative` - negative colors</li> </ul>
   * @param {module:model/Clip.FilterEnum} filter A filter effect to apply to the Clip. <ul>   <li>`boost` - boost contrast and saturation</li>   <li>`contrast` - increase contrast</li>   <li>`darken` - darken the scene</li>   <li>`greyscale` - remove colour</li>   <li>`lighten` - lighten the scene</li>   <li>`muted` - reduce saturation and contrast</li>   <li>`negative` - negative colors</li> </ul>
   */
  exports.prototype.setFilter = function(filter) {
    this['filter'] = filter;
    return this;
  }


  /**
   * Returns Sets the opacity of the Clip where 1 is opaque and 0 is transparent.
   * @return {Number}
   */
  exports.prototype.getOpacity = function() {
    return this['opacity'];
  }

  /**
   * Sets Sets the opacity of the Clip where 1 is opaque and 0 is transparent.
   * @param {Number} opacity Sets the opacity of the Clip where 1 is opaque and 0 is transparent.
   */
  exports.prototype.setOpacity = function(opacity) {
    this['opacity'] = opacity;
    return this;
  }


  /**
   * @return {module:model/Transformation}
   */
  exports.prototype.getTransform = function() {
    return this['transform'];
  }

  /**
   * @param {module:model/Transformation} transform
   */
  exports.prototype.setTransform = function(transform) {
    this['transform'] = transform;
    return this;
  }


  /**
   * Allowed values for the <code>fit</code> property.
   * @enum {String}
   * @readonly
   */
  exports.FitEnum = {
    /**
     * value: "cover"
     * @const
     */
    "cover": "cover",
    /**
     * value: "contain"
     * @const
     */
    "contain": "contain",
    /**
     * value: "crop"
     * @const
     */
    "crop": "crop",
    /**
     * value: "none"
     * @const
     */
    "none": "none"  };

  /**
   * Allowed values for the <code>position</code> property.
   * @enum {String}
   * @readonly
   */
  exports.PositionEnum = {
    /**
     * value: "top"
     * @const
     */
    "top": "top",
    /**
     * value: "topRight"
     * @const
     */
    "topRight": "topRight",
    /**
     * value: "right"
     * @const
     */
    "right": "right",
    /**
     * value: "bottomRight"
     * @const
     */
    "bottomRight": "bottomRight",
    /**
     * value: "bottom"
     * @const
     */
    "bottom": "bottom",
    /**
     * value: "bottomLeft"
     * @const
     */
    "bottomLeft": "bottomLeft",
    /**
     * value: "left"
     * @const
     */
    "left": "left",
    /**
     * value: "topLeft"
     * @const
     */
    "topLeft": "topLeft",
    /**
     * value: "center"
     * @const
     */
    "center": "center"  };

  /**
   * Allowed values for the <code>effect</code> property.
   * @enum {String}
   * @readonly
   */
  exports.EffectEnum = {
    /**
     * value: "zoomIn"
     * @const
     */
    "zoomIn": "zoomIn",
    /**
     * value: "zoomInSlow"
     * @const
     */
    "zoomInSlow": "zoomInSlow",
    /**
     * value: "zoomInFast"
     * @const
     */
    "zoomInFast": "zoomInFast",
    /**
     * value: "zoomOut"
     * @const
     */
    "zoomOut": "zoomOut",
    /**
     * value: "zoomOutSlow"
     * @const
     */
    "zoomOutSlow": "zoomOutSlow",
    /**
     * value: "zoomOutFast"
     * @const
     */
    "zoomOutFast": "zoomOutFast",
    /**
     * value: "slideLeft"
     * @const
     */
    "slideLeft": "slideLeft",
    /**
     * value: "slideLeftSLow"
     * @const
     */
    "slideLeftSLow": "slideLeftSLow",
    /**
     * value: "slideLeftFast"
     * @const
     */
    "slideLeftFast": "slideLeftFast",
    /**
     * value: "slideRight"
     * @const
     */
    "slideRight": "slideRight",
    /**
     * value: "slideRightSlow"
     * @const
     */
    "slideRightSlow": "slideRightSlow",
    /**
     * value: "slideRightFast"
     * @const
     */
    "slideRightFast": "slideRightFast",
    /**
     * value: "slideUp"
     * @const
     */
    "slideUp": "slideUp",
    /**
     * value: "slideUpSlow"
     * @const
     */
    "slideUpSlow": "slideUpSlow",
    /**
     * value: "slideUpFast"
     * @const
     */
    "slideUpFast": "slideUpFast",
    /**
     * value: "slideDown"
     * @const
     */
    "slideDown": "slideDown",
    /**
     * value: "slideDownSlow"
     * @const
     */
    "slideDownSlow": "slideDownSlow",
    /**
     * value: "slideDownFast"
     * @const
     */
    "slideDownFast": "slideDownFast"  };

  /**
   * Allowed values for the <code>filter</code> property.
   * @enum {String}
   * @readonly
   */
  exports.FilterEnum = {
    /**
     * value: "boost"
     * @const
     */
    "boost": "boost",
    /**
     * value: "contrast"
     * @const
     */
    "contrast": "contrast",
    /**
     * value: "darken"
     * @const
     */
    "darken": "darken",
    /**
     * value: "greyscale"
     * @const
     */
    "greyscale": "greyscale",
    /**
     * value: "lighten"
     * @const
     */
    "lighten": "lighten",
    /**
     * value: "muted"
     * @const
     */
    "muted": "muted",
    /**
     * value: "negative"
     * @const
     */
    "negative": "negative"  };


  return exports;
}));


