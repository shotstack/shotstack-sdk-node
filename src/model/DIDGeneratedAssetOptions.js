/**
 * Shotstack
 * Official Node SDK for the Shotstack Cloud Video Editing API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DIDTextToAvatarOptions from './DIDTextToAvatarOptions';

/**
 * The DIDGeneratedAssetOptions model module.
 * @module model/DIDGeneratedAssetOptions
 * @version 0.2.6
 */
class DIDGeneratedAssetOptions {
    /**
     * Constructs a new <code>DIDGeneratedAssetOptions</code>.
     * Generate assets using the third party D-ID provider AI services.  The following AI generation services are available: &lt;ul&gt;   &lt;li&gt;&lt;a href&#x3D;\&quot;#tocs_didtexttoavataroptions\&quot;&gt;DidTextToAvatarOptions&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;
     * @alias module:model/DIDGeneratedAssetOptions
     * @param {(module:model/DIDTextToAvatarOptions)} instance The actual instance to initialize DIDGeneratedAssetOptions.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "DIDTextToAvatarOptions") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                DIDTextToAvatarOptions.validateJSON(instance); // throw an exception if no match
                // create DIDTextToAvatarOptions from JS object
                this.actualInstance = DIDTextToAvatarOptions.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into DIDTextToAvatarOptions
            errorMessages.push("Failed to construct DIDTextToAvatarOptions: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `DIDGeneratedAssetOptions` with oneOf schemas DIDTextToAvatarOptions. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `DIDGeneratedAssetOptions` with oneOf schemas DIDTextToAvatarOptions. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>DIDGeneratedAssetOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DIDGeneratedAssetOptions} obj Optional instance to populate.
     * @return {module:model/DIDGeneratedAssetOptions} The populated <code>DIDGeneratedAssetOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        return new DIDGeneratedAssetOptions(data);
    }

    /**
     * Gets the actual instance, which can be <code>DIDTextToAvatarOptions</code>.
     * @return {(module:model/DIDTextToAvatarOptions)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>DIDTextToAvatarOptions</code>.
     * @param {(module:model/DIDTextToAvatarOptions)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = DIDGeneratedAssetOptions.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of DIDGeneratedAssetOptions from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/DIDGeneratedAssetOptions} An instance of DIDGeneratedAssetOptions.
     */
    static fromJSON = function(json_string){
        return DIDGeneratedAssetOptions.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * The type of asset to generate - set to `text-to-avatar` for text-to-avatar.
 * @member {module:model/DIDGeneratedAssetOptions.TypeEnum} type
 */
DIDGeneratedAssetOptions.prototype['type'] = undefined;

/**
 * The text or script that the avatar will narrate.
 * @member {String} text
 */
DIDGeneratedAssetOptions.prototype['text'] = undefined;

/**
 * The avatar character to generate. Select from the list of available avatars: <ul>   <li>`jack`</li>   <li>`lana`</li>   <li>`lily`</li>   <li>`matt`</li>   <li>`rian`</li> </ul>
 * @member {module:model/DIDGeneratedAssetOptions.AvatarEnum} avatar
 */
DIDGeneratedAssetOptions.prototype['avatar'] = undefined;

/**
 * The background color of the video.
 * @member {String} background
 */
DIDGeneratedAssetOptions.prototype['background'] = undefined;


DIDGeneratedAssetOptions.OneOf = ["DIDTextToAvatarOptions"];

export default DIDGeneratedAssetOptions;

