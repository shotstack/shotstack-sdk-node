/**
 * Shotstack
 * Official Node SDK for the Shotstack Cloud Video Editing API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ShotstackImageToVideoOptions from './ShotstackImageToVideoOptions';
import ShotstackTextGeneratorOptions from './ShotstackTextGeneratorOptions';
import ShotstackTextToImageOptions from './ShotstackTextToImageOptions';
import ShotstackTextToSpeechOptions from './ShotstackTextToSpeechOptions';

/**
 * The ShotstackGeneratedAssetOptions model module.
 * @module model/ShotstackGeneratedAssetOptions
 * @version 0.2.6
 */
class ShotstackGeneratedAssetOptions {
    /**
     * Constructs a new <code>ShotstackGeneratedAssetOptions</code>.
     * Generate assets using the native Shotstack provider AI services.  The following AI generation services are available: &lt;ul&gt;   &lt;li&gt;&lt;a href&#x3D;\&quot;#tocs_shotstacktexttospeechoptions\&quot;&gt;ShotstackTextToSpeechOptions&lt;/a&gt;&lt;/li&gt;   &lt;li&gt;&lt;a href&#x3D;\&quot;#tocs_shotstacktexttoimageoptions\&quot;&gt;ShotstackTextToImageOptions&lt;/a&gt;&lt;/li&gt;   &lt;li&gt;&lt;a href&#x3D;\&quot;#tocs_shotstackimagetovideooptions\&quot;&gt;ShotstackImageToVideoOptions&lt;/a&gt;&lt;/li&gt;   &lt;li&gt;&lt;a href&#x3D;\&quot;#tocs_shotstacktextgeneratoroptions\&quot;&gt;ShotstackTextGeneratorOptions&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;
     * @alias module:model/ShotstackGeneratedAssetOptions
     * @param {(module:model/ShotstackImageToVideoOptions|module:model/ShotstackTextGeneratorOptions|module:model/ShotstackTextToImageOptions|module:model/ShotstackTextToSpeechOptions)} instance The actual instance to initialize ShotstackGeneratedAssetOptions.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "ShotstackTextToSpeechOptions") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ShotstackTextToSpeechOptions.validateJSON(instance); // throw an exception if no match
                // create ShotstackTextToSpeechOptions from JS object
                this.actualInstance = ShotstackTextToSpeechOptions.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ShotstackTextToSpeechOptions
            errorMessages.push("Failed to construct ShotstackTextToSpeechOptions: " + err)
        }

        try {
            if (typeof instance === "ShotstackTextToImageOptions") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ShotstackTextToImageOptions.validateJSON(instance); // throw an exception if no match
                // create ShotstackTextToImageOptions from JS object
                this.actualInstance = ShotstackTextToImageOptions.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ShotstackTextToImageOptions
            errorMessages.push("Failed to construct ShotstackTextToImageOptions: " + err)
        }

        try {
            if (typeof instance === "ShotstackTextGeneratorOptions") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ShotstackTextGeneratorOptions.validateJSON(instance); // throw an exception if no match
                // create ShotstackTextGeneratorOptions from JS object
                this.actualInstance = ShotstackTextGeneratorOptions.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ShotstackTextGeneratorOptions
            errorMessages.push("Failed to construct ShotstackTextGeneratorOptions: " + err)
        }

        try {
            if (typeof instance === "ShotstackImageToVideoOptions") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ShotstackImageToVideoOptions.validateJSON(instance); // throw an exception if no match
                // create ShotstackImageToVideoOptions from JS object
                this.actualInstance = ShotstackImageToVideoOptions.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ShotstackImageToVideoOptions
            errorMessages.push("Failed to construct ShotstackImageToVideoOptions: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `ShotstackGeneratedAssetOptions` with oneOf schemas ShotstackImageToVideoOptions, ShotstackTextGeneratorOptions, ShotstackTextToImageOptions, ShotstackTextToSpeechOptions. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `ShotstackGeneratedAssetOptions` with oneOf schemas ShotstackImageToVideoOptions, ShotstackTextGeneratorOptions, ShotstackTextToImageOptions, ShotstackTextToSpeechOptions. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>ShotstackGeneratedAssetOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ShotstackGeneratedAssetOptions} obj Optional instance to populate.
     * @return {module:model/ShotstackGeneratedAssetOptions} The populated <code>ShotstackGeneratedAssetOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        return new ShotstackGeneratedAssetOptions(data);
    }

    /**
     * Gets the actual instance, which can be <code>ShotstackImageToVideoOptions</code>, <code>ShotstackTextGeneratorOptions</code>, <code>ShotstackTextToImageOptions</code>, <code>ShotstackTextToSpeechOptions</code>.
     * @return {(module:model/ShotstackImageToVideoOptions|module:model/ShotstackTextGeneratorOptions|module:model/ShotstackTextToImageOptions|module:model/ShotstackTextToSpeechOptions)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>ShotstackImageToVideoOptions</code>, <code>ShotstackTextGeneratorOptions</code>, <code>ShotstackTextToImageOptions</code>, <code>ShotstackTextToSpeechOptions</code>.
     * @param {(module:model/ShotstackImageToVideoOptions|module:model/ShotstackTextGeneratorOptions|module:model/ShotstackTextToImageOptions|module:model/ShotstackTextToSpeechOptions)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = ShotstackGeneratedAssetOptions.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of ShotstackGeneratedAssetOptions from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/ShotstackGeneratedAssetOptions} An instance of ShotstackGeneratedAssetOptions.
     */
    static fromJSON = function(json_string){
        return ShotstackGeneratedAssetOptions.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * The type of asset to generate - set to `text-to-speech` for text-to-speech.
 * @member {module:model/ShotstackGeneratedAssetOptions.TypeEnum} type
 * @default 'text-to-speech'
 */
ShotstackGeneratedAssetOptions.prototype['type'] = 'text-to-speech';

/**
 * The text to convert to speech.
 * @member {String} text
 */
ShotstackGeneratedAssetOptions.prototype['text'] = undefined;

/**
 * The voice to use for the text-to-speech conversion. You must pair the correct voice with the correct language. For each language there is a language code that must be set in the `language` property. The voice must be available for the language code or the conversion will fail. i.e. To use the voice `Zeina` for Arabic you must set the `language` to `arb`. Select a voice from the list of available voices, the language code is in brackets: <ul>   <li>Arabic - Gulf (ar-AE)</li>   <ul>     <li>`Hala`</li>   </ul>   <li>Dutch - Belgian (nl-BE)</li>   <ul>     <li>`Lisa`</li>   </ul>   <li>Catalan (ca-ES)</li>   <ul>     <li>`Arlet`</li>   </ul>   <li>Chinese - Cantonese (yue-CN)</li>   <ul>     <li>`Hiujin`</li>   </ul>   <li>Chinese - Mandarin (cmn-CN)</li>   <ul>     <li>`Zhiyu`</li>   </ul>   <li>Danish (da-DK)</li>   <ul>     <li>`Sofie`</li>   </ul>   <li>Dutch (nl-NL)</li>   <ul>     <li>`Laura`</li>   </ul>   <li>English - Australian (en-AU)</li>   <ul>     <li>`Olivia`</li>   </ul>   <li>English - British (en-GB)</li>   <ul>     <li>`Amy`</li>     <li>`Emma`</li>     <li>`Brian`</li>     <li>`Arthur`</li>   </ul>   <li>English - Indian (en-IN)</li>   <ul>     <li>`Kajal`</li>   </ul>   <li>English - Ireland (en-IE)</li>   <ul>     <li>`Niamh`</li>   </ul>   <li>English - New Zealand (en-NZ)</li>   <ul>     <li>`Aria`</li>   </ul>   <li>English - South African (en-ZA)</li>   <ul>     <li>`Ayanda`</li>   </ul>   <li>English - US (en-US)</li>   <ul>     <li>`Ivy`</li>     <li>`Joanna`</li>     <li>`Kendra`</li>     <li>`Kimberly`</li>     <li>`Salli`</li>     <li>`Joey`</li>     <li>`Justin`</li>     <li>`Kevin`</li>     <li>`Matthew`</li>     <li>`Ruth`</li>     <li>`Stephen`</li>   </ul>   <li>Finnish (fi-FI)</li>   <ul>     <li>`Suvi`</li>   </ul>   <li>French (fr-FR)</li>   <ul>     <li>`Léa`</li>     <li>`Rémi`</li>   </ul>   <li>French - Canadian (fr-CA)</li>   <ul>     <li>`Gabrielle`</li>     <li>`Liam`</li>   </ul>   <li>German (de-DE)</li>   <ul>     <li>`Vicki`</li>     <li>`Daniel`</li>   </ul>   <li>German - Austrian (de-AT)</li>   <ul>     <li>`Hannah`</li>   </ul>   <li>Hindi (hi-IN)</li>   <ul>     <li>`Kajal`</li>   </ul>   <li>Italian (it-IT)</li>   <ul>     <li>`Bianca`</li>     <li>`Adriano`</li>   </ul>   <li>Japanese (ja-JP)</li>   <ul>     <li>`Takumi`</li>     <li>`Kazuha`</li>     <li>`Tomoko`</li>   </ul>   <li>Korean (ko-KR)</li>   <ul>     <li>`Seoyeon`</li>   </ul>   <li>Norwegian (nb-NO)</li>   <ul>     <li>`Ida`</li>   </ul>   <li>Polish (pl-PL)</li>   <ul>     <li>`Ola`</li>   </ul>   <li>Portuguese - Brazilian (pt-BR)</li>   <ul>     <li>`Camila`</li>     <li>`Vitória` or `Vitoria`</li>     <li>`Thiago`</li>   </ul>   <li>Portuguese - European (pt-PT)</li>   <ul>     <li>`Inês` or `Ines`</li>   </ul>   <li>Spanish (es-ES)</li>   <ul>     <li>`Lucia`</li>     <li>`Sergio`</li>   </ul>   <li>Spanish - Mexican (es-MX)</li>   <ul>     <li>`Mia`</li>     <li>`Andrés`</li>   </ul>   <li>Spanish - US (es-US)</li>   <ul>     <li>`Lupe`</li>     <li>`Pedro`</li>   </ul>   <li>Swedish (sv-SE)</li>   <ul>     <li>`Elin`</li>   </ul> </ul>
 * @member {module:model/ShotstackGeneratedAssetOptions.VoiceEnum} voice
 */
ShotstackGeneratedAssetOptions.prototype['voice'] = undefined;

/**
 * The language code for the text-to-speech conversion. You must pair the correct language with the correct voice (see voice parameter above). Select a language from the list of available languages: <ul>   <li>`cmn-CN`</li>   <li>`da-DK`</li>   <li>`de-DE`</li>   <li>`en-AU`</li>   <li>`en-GB`</li>   <li>`en-IN`</li>   <li>`en-US`</li>   <li>`es-ES`</li>   <li>`es-MX`</li>   <li>`es-US`</li>   <li>`fr-CA`</li>   <li>`fr-FR`</li>   <li>`it-IT`</li>   <li>`ja-JP`</li>   <li>`hi-IN`</li>   <li>`ko-KR`</li>   <li>`nb-NO`</li>   <li>`nl-NL`</li>   <li>`pl-PL`</li>   <li>`pt-BR`</li>   <li>`pt-PT`</li>   <li>`sv-SE`</li>   <li>`en-NZ`</li>   <li>`en-ZA`</li>   <li>`ca-ES`</li>   <li>`de-AT`</li>   <li>`yue-CN`</li>   <li>`ar-AE`</li>   <li>`fi-FI`</li> </ul>
 * @member {module:model/ShotstackGeneratedAssetOptions.LanguageEnum} language
 * @default 'en-US'
 */
ShotstackGeneratedAssetOptions.prototype['language'] = 'en-US';

/**
 * Set the voice to newscaster mode.<br /><br /> *Only Matthew and Joanna for US English (en-US), Lupe for US Spanish (es-US), and Amy for British English (en-GB) are available in the newscaster voice.
 * @member {Boolean} newscaster
 * @default false
 */
ShotstackGeneratedAssetOptions.prototype['newscaster'] = false;

/**
 * The text prompt to generate text from.
 * @member {String} prompt
 */
ShotstackGeneratedAssetOptions.prototype['prompt'] = undefined;

/**
 * The width of the image in pixels.
 * @member {Number} width
 */
ShotstackGeneratedAssetOptions.prototype['width'] = undefined;

/**
 * The height of the image in pixels.
 * @member {Number} height
 */
ShotstackGeneratedAssetOptions.prototype['height'] = undefined;

/**
 * The URL of the image to convert to video. The URL must be publicly accessible or include credentials. The image dimensions must exactly match one of the following: 1024px x 576px, 576px x 1024px or 768px x 768px.
 * @member {String} imageUrl
 */
ShotstackGeneratedAssetOptions.prototype['imageUrl'] = undefined;

/**
 * The guidance scale determines how closely the generated video will match the image. Lower numbers allow for more creative freedom. A number between 0 and 10.
 * @member {Number} guidanceScale
 * @default 1.8
 */
ShotstackGeneratedAssetOptions.prototype['guidanceScale'] = 1.8;

/**
 * The amount of motion in the video. A number between 1 and 255.
 * @member {Number} motion
 * @default 127
 */
ShotstackGeneratedAssetOptions.prototype['motion'] = 127;


ShotstackGeneratedAssetOptions.OneOf = ["ShotstackImageToVideoOptions", "ShotstackTextGeneratorOptions", "ShotstackTextToImageOptions", "ShotstackTextToSpeechOptions"];

export default ShotstackGeneratedAssetOptions;

