/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.io/docs/guide/) documentation.  There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>  The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b> 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 5.4.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.ShotstackSdk) {
      root.ShotstackSdk = {};
    }
    root.ShotstackSdk.AudioAsset = factory(root.ShotstackSdk.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';



  /**
   * The AudioAsset model module.
   * @module model/AudioAsset
   * @version v1
   */

  /**
   * Constructs a new <code>AudioAsset</code>.
   * The AudioAsset is used to add sound effects and audio at specific intervals on the timeline. The src must be a publicly accessible URL to an audio resource such  as an mp3 file.
   * @alias module:model/AudioAsset
   * @class
   * @param type {String} The type of asset - set to `audio` for audio assets.
   * @param src {String} The audio source URL. The URL must be publicly accessible or include credentials.
   */
  var exports = function(type, src) {
    var _this = this;

    _this['type'] = type || 'audio';
    _this['src'] = src;
  };

  /**
   * Constructs a <code>AudioAsset</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/AudioAsset} obj Optional instance to populate.
   * @return {module:model/AudioAsset} The populated <code>AudioAsset</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('src')) {
        obj['src'] = ApiClient.convertToType(data['src'], 'String');
      }
      if (data.hasOwnProperty('trim')) {
        obj['trim'] = ApiClient.convertToType(data['trim'], 'Number');
      }
      if (data.hasOwnProperty('volume')) {
        obj['volume'] = ApiClient.convertToType(data['volume'], 'Number');
      }
      if (data.hasOwnProperty('effect')) {
        obj['effect'] = ApiClient.convertToType(data['effect'], 'String');
      }
    }
    return obj;
  }

  /**
   * The type of asset - set to `audio` for audio assets.
   * @member {String} type
   * @default 'audio'
   */
  exports.prototype['type'] = 'audio';
  /**
   * The audio source URL. The URL must be publicly accessible or include credentials.
   * @member {String} src
   */
  exports.prototype['src'] = undefined;
  /**
   * The start trim point of the audio clip, in seconds (defaults to 0). Audio will start from the in trim point. The audio will play until the file ends or the Clip length is reached.
   * @member {Number} trim
   */
  exports.prototype['trim'] = undefined;
  /**
   * Set the volume for the audio clip between 0 and 1 where 0 is muted and 1 is full volume (defaults to 1).
   * @member {Number} volume
   */
  exports.prototype['volume'] = undefined;
  /**
   * The effect to apply to the audio asset <ul>   <li>`fadeIn` - fade volume in only</li>   <li>`fadeOut` - fade volume out only</li>   <li>`fadeInFadeOut` - fade volume in and out</li> </ul>
   * @member {module:model/AudioAsset.EffectEnum} effect
   */
  exports.prototype['effect'] = undefined;


  /**
   * Returns The type of asset - set to `audio` for audio assets.
   * @return {String}
   */
  exports.prototype.getType = function() {
    return this['type'];
  }

  /**
   * Sets The type of asset - set to `audio` for audio assets.
   * @param {String} type The type of asset - set to `audio` for audio assets.
   */
  exports.prototype.setType = function(type) {
    this['type'] = type;
    return this;
  }


  /**
   * Returns The audio source URL. The URL must be publicly accessible or include credentials.
   * @return {String}
   */
  exports.prototype.getSrc = function() {
    return this['src'];
  }

  /**
   * Sets The audio source URL. The URL must be publicly accessible or include credentials.
   * @param {String} src The audio source URL. The URL must be publicly accessible or include credentials.
   */
  exports.prototype.setSrc = function(src) {
    this['src'] = src;
    return this;
  }


  /**
   * Returns The start trim point of the audio clip, in seconds (defaults to 0). Audio will start from the in trim point. The audio will play until the file ends or the Clip length is reached.
   * @return {Number}
   */
  exports.prototype.getTrim = function() {
    return this['trim'];
  }

  /**
   * Sets The start trim point of the audio clip, in seconds (defaults to 0). Audio will start from the in trim point. The audio will play until the file ends or the Clip length is reached.
   * @param {Number} trim The start trim point of the audio clip, in seconds (defaults to 0). Audio will start from the in trim point. The audio will play until the file ends or the Clip length is reached.
   */
  exports.prototype.setTrim = function(trim) {
    this['trim'] = trim;
    return this;
  }


  /**
   * Returns Set the volume for the audio clip between 0 and 1 where 0 is muted and 1 is full volume (defaults to 1).
   * @return {Number}
   */
  exports.prototype.getVolume = function() {
    return this['volume'];
  }

  /**
   * Sets Set the volume for the audio clip between 0 and 1 where 0 is muted and 1 is full volume (defaults to 1).
   * @param {Number} volume Set the volume for the audio clip between 0 and 1 where 0 is muted and 1 is full volume (defaults to 1).
   */
  exports.prototype.setVolume = function(volume) {
    this['volume'] = volume;
    return this;
  }


  /**
   * Returns The effect to apply to the audio asset <ul>   <li>`fadeIn` - fade volume in only</li>   <li>`fadeOut` - fade volume out only</li>   <li>`fadeInFadeOut` - fade volume in and out</li> </ul>
   * @return {module:model/AudioAsset.EffectEnum}
   */
  exports.prototype.getEffect = function() {
    return this['effect'];
  }

  /**
   * Sets The effect to apply to the audio asset <ul>   <li>`fadeIn` - fade volume in only</li>   <li>`fadeOut` - fade volume out only</li>   <li>`fadeInFadeOut` - fade volume in and out</li> </ul>
   * @param {module:model/AudioAsset.EffectEnum} effect The effect to apply to the audio asset <ul>   <li>`fadeIn` - fade volume in only</li>   <li>`fadeOut` - fade volume out only</li>   <li>`fadeInFadeOut` - fade volume in and out</li> </ul>
   */
  exports.prototype.setEffect = function(effect) {
    this['effect'] = effect;
    return this;
  }


  /**
   * Allowed values for the <code>effect</code> property.
   * @enum {String}
   * @readonly
   */
  exports.EffectEnum = {
    /**
     * value: "fadeIn"
     * @const
     */
    "fadeIn": "fadeIn",
    /**
     * value: "fadeOut"
     * @const
     */
    "fadeOut": "fadeOut",
    /**
     * value: "fadeInFadeOut"
     * @const
     */
    "fadeInFadeOut": "fadeInFadeOut"  };


  return exports;
}));


