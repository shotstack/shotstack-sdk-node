/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.io/docs/guide/) documentation.  There are three API's, one for editing and generating assets (Edit API), one for managing hosted assets (Serve API) and one for ingesting and transforming source assets (Ingest API).  Each API has it's own base URL and collection of endpoints. Each API uses the same set of API keys.  **[Edit API](#shotstack-edit)** - [https://api.shotstack.io/edit/{version}](#)<br> Edit videos, images and audio assets in the cloud using a simple JSON schema and templates.  **[Serve API](#shotstack-serve)** - [https://api.shotstack.io/serve/{version}](#)<br> Inspect and manage the hosting of assets generated by the Edit and Ingest APIs.  **[Ingest API](#shotstack-ingest)** - [https://api.shotstack.io/ingest/{version}](#)<br> Ingest (upload, store and transform) source footage, images, audio and fonts to be used by the Edit API.  **[Create API](#shotstack-create)** - [https://api.shotstack.io/create/{version}](#)<br> Generate images, videos, voice overs and text using built in and third party generative AI providers. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Destinations from './Destinations';

/**
 * The Transfer model module.
 * @module model/Transfer
 * @version 0.2.6
 */
class Transfer {
    /**
     * Constructs a new <code>Transfer</code>.
     * The asset URL to fetch and transfer to a destination.
     * @alias module:model/Transfer
     * @param url {String} The file URL to fetch and transfer.
     * @param id {String} An identifier for the asset which must be provided by the client. The identifier does not need to be unique.
     * @param destinations {Array.<module:model/Destinations>} Specify the storage locations and hosting services to send the file to.
     */
    constructor(url, id, destinations) { 
        
        Transfer.initialize(this, url, id, destinations);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, url, id, destinations) { 
        obj['url'] = url;
        obj['id'] = id;
        obj['destinations'] = destinations;
    }

    /**
     * Constructs a <code>Transfer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Transfer} obj Optional instance to populate.
     * @return {module:model/Transfer} The populated <code>Transfer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Transfer();

            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('destinations')) {
                obj['destinations'] = ApiClient.convertToType(data['destinations'], [Destinations]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Transfer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Transfer</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Transfer.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['destinations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['destinations'])) {
                throw new Error("Expected the field `destinations` to be an array in the JSON data but got " + data['destinations']);
            }
            // validate the optional field `destinations` (array)
            for (const item of data['destinations']) {
                Destinations.validateJSON(item);
            };
        }

        return true;
    }

/**
     * Returns The file URL to fetch and transfer.
     * @return {String}
     */
    getUrl() {
        return this.url;
    }

    /**
     * Sets The file URL to fetch and transfer.
     * @param {String} url The file URL to fetch and transfer.
     */
    setUrl(url) {
        this['url'] = url;
        return this;
    }
/**
     * Returns An identifier for the asset which must be provided by the client. The identifier does not need to be unique.
     * @return {String}
     */
    getId() {
        return this.id;
    }

    /**
     * Sets An identifier for the asset which must be provided by the client. The identifier does not need to be unique.
     * @param {String} id An identifier for the asset which must be provided by the client. The identifier does not need to be unique.
     */
    setId(id) {
        this['id'] = id;
        return this;
    }
/**
     * Returns Specify the storage locations and hosting services to send the file to.
     * @return {Array.<module:model/Destinations>}
     */
    getDestinations() {
        return this.destinations;
    }

    /**
     * Sets Specify the storage locations and hosting services to send the file to.
     * @param {Array.<module:model/Destinations>} destinations Specify the storage locations and hosting services to send the file to.
     */
    setDestinations(destinations) {
        this['destinations'] = destinations;
        return this;
    }

}

Transfer.RequiredProperties = ["url", "id", "destinations"];

/**
 * The file URL to fetch and transfer.
 * @member {String} url
 */
Transfer.prototype['url'] = undefined;

/**
 * An identifier for the asset which must be provided by the client. The identifier does not need to be unique.
 * @member {String} id
 */
Transfer.prototype['id'] = undefined;

/**
 * Specify the storage locations and hosting services to send the file to.
 * @member {Array.<module:model/Destinations>} destinations
 */
Transfer.prototype['destinations'] = undefined;






export default Transfer;

