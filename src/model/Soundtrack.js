/**
 * Shotstack
 * Official Node SDK for the Shotstack Cloud Video Editing API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Soundtrack model module.
 * @module model/Soundtrack
 * @version 0.2.6
 */
class Soundtrack {
    /**
     * Constructs a new <code>Soundtrack</code>.
     * A music or audio file in mp3 format that plays for the duration of the rendered video or the length of the audio file, which ever is shortest.
     * @alias module:model/Soundtrack
     * @param src {String} The URL of the mp3 audio file. The URL must be publicly accessible or include credentials.
     */
    constructor(src) { 
        
        Soundtrack.initialize(this, src);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, src) { 
        obj['src'] = src;
    }

    /**
     * Constructs a <code>Soundtrack</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Soundtrack} obj Optional instance to populate.
     * @return {module:model/Soundtrack} The populated <code>Soundtrack</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Soundtrack();

            if (data.hasOwnProperty('src')) {
                obj['src'] = ApiClient.convertToType(data['src'], 'String');
            }
            if (data.hasOwnProperty('effect')) {
                obj['effect'] = ApiClient.convertToType(data['effect'], 'String');
            }
            if (data.hasOwnProperty('volume')) {
                obj['volume'] = ApiClient.convertToType(data['volume'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Soundtrack</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Soundtrack</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Soundtrack.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['src'] && !(typeof data['src'] === 'string' || data['src'] instanceof String)) {
            throw new Error("Expected the field `src` to be a primitive type in the JSON string but got " + data['src']);
        }
        // ensure the json data is a string
        if (data['effect'] && !(typeof data['effect'] === 'string' || data['effect'] instanceof String)) {
            throw new Error("Expected the field `effect` to be a primitive type in the JSON string but got " + data['effect']);
        }

        return true;
    }

/**
     * Returns The URL of the mp3 audio file. The URL must be publicly accessible or include credentials.
     * @return {String}
     */
    getSrc() {
        return this.src;
    }

    /**
     * Sets The URL of the mp3 audio file. The URL must be publicly accessible or include credentials.
     * @param {String} src The URL of the mp3 audio file. The URL must be publicly accessible or include credentials.
     */
    setSrc(src) {
        this['src'] = src;
        return this;
    }
/**
     * Returns The effect to apply to the audio file <ul>   <li>`fadeIn` - fade volume in only</li>   <li>`fadeOut` - fade volume out only</li>   <li>`fadeInFadeOut` - fade volume in and out</li> </ul>
     * @return {module:model/Soundtrack.EffectEnum}
     */
    getEffect() {
        return this.effect;
    }

    /**
     * Sets The effect to apply to the audio file <ul>   <li>`fadeIn` - fade volume in only</li>   <li>`fadeOut` - fade volume out only</li>   <li>`fadeInFadeOut` - fade volume in and out</li> </ul>
     * @param {module:model/Soundtrack.EffectEnum} effect The effect to apply to the audio file <ul>   <li>`fadeIn` - fade volume in only</li>   <li>`fadeOut` - fade volume out only</li>   <li>`fadeInFadeOut` - fade volume in and out</li> </ul>
     */
    setEffect(effect) {
        this['effect'] = effect;
        return this;
    }
/**
     * Returns Set the volume for the soundtrack between 0 and 1 where 0 is muted and 1 is full volume (defaults to 1).
     * @return {Number}
     */
    getVolume() {
        return this.volume;
    }

    /**
     * Sets Set the volume for the soundtrack between 0 and 1 where 0 is muted and 1 is full volume (defaults to 1).
     * @param {Number} volume Set the volume for the soundtrack between 0 and 1 where 0 is muted and 1 is full volume (defaults to 1).
     */
    setVolume(volume) {
        this['volume'] = volume;
        return this;
    }

}

Soundtrack.RequiredProperties = ["src"];

/**
 * The URL of the mp3 audio file. The URL must be publicly accessible or include credentials.
 * @member {String} src
 */
Soundtrack.prototype['src'] = undefined;

/**
 * The effect to apply to the audio file <ul>   <li>`fadeIn` - fade volume in only</li>   <li>`fadeOut` - fade volume out only</li>   <li>`fadeInFadeOut` - fade volume in and out</li> </ul>
 * @member {module:model/Soundtrack.EffectEnum} effect
 */
Soundtrack.prototype['effect'] = undefined;

/**
 * Set the volume for the soundtrack between 0 and 1 where 0 is muted and 1 is full volume (defaults to 1).
 * @member {Number} volume
 */
Soundtrack.prototype['volume'] = undefined;





/**
 * Allowed values for the <code>effect</code> property.
 * @enum {String}
 * @readonly
 */
Soundtrack['EffectEnum'] = {

    /**
     * value: "fadeIn"
     * @const
     */
    "fadeIn": "fadeIn",

    /**
     * value: "fadeOut"
     * @const
     */
    "fadeOut": "fadeOut",

    /**
     * value: "fadeInFadeOut"
     * @const
     */
    "fadeInFadeOut": "fadeInFadeOut"
};



export default Soundtrack;

