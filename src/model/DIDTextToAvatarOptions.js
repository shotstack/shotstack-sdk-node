/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.io/docs/guide/) documentation.  There are three API's, one for editing and generating assets (Edit API), one for managing hosted assets (Serve API) and one for ingesting and transforming source assets (Ingest API).  Each API has it's own base URL and collection of endpoints. Each API uses the same set of API keys.  **[Edit API](#shotstack-edit)** - [https://api.shotstack.io/edit/{version}](#)<br> Edit videos, images and audio assets in the cloud using a simple JSON schema and templates.  **[Serve API](#shotstack-serve)** - [https://api.shotstack.io/serve/{version}](#)<br> Inspect and manage the hosting of assets generated by the Edit and Ingest APIs.  **[Ingest API](#shotstack-ingest)** - [https://api.shotstack.io/ingest/{version}](#)<br> Ingest (upload, store and transform) source footage, images, audio and fonts to be used by the Edit API.  **[Create API](#shotstack-create)** - [https://api.shotstack.io/create/{version}](#)<br> Generate images, videos, voice overs and text using built in and third party generative AI providers. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DIDTextToAvatarOptions model module.
 * @module model/DIDTextToAvatarOptions
 * @version 0.2.6
 */
class DIDTextToAvatarOptions {
    /**
     * Constructs a new <code>DIDTextToAvatarOptions</code>.
     * Options for the D-ID text-to-avatar service. Set the text to be converted to an avatar and configure the avatar and background. The output will be generated as an MP4 video file.
     * @alias module:model/DIDTextToAvatarOptions
     * @param type {module:model/DIDTextToAvatarOptions.TypeEnum} The type of asset to generate - set to `text-to-avatar` for text-to-avatar.
     * @param text {String} The text or script that the avatar will narrate.
     * @param avatar {module:model/DIDTextToAvatarOptions.AvatarEnum} The avatar character to generate. Select from the list of available avatars: <ul>   <li>`jack`</li>   <li>`lana`</li>   <li>`lily`</li>   <li>`matt`</li>   <li>`rian`</li> </ul>
     */
    constructor(type, text, avatar) { 
        
        DIDTextToAvatarOptions.initialize(this, type, text, avatar);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, text, avatar) { 
        obj['type'] = type;
        obj['text'] = text;
        obj['avatar'] = avatar;
    }

    /**
     * Constructs a <code>DIDTextToAvatarOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DIDTextToAvatarOptions} obj Optional instance to populate.
     * @return {module:model/DIDTextToAvatarOptions} The populated <code>DIDTextToAvatarOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DIDTextToAvatarOptions();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('avatar')) {
                obj['avatar'] = ApiClient.convertToType(data['avatar'], 'String');
            }
            if (data.hasOwnProperty('background')) {
                obj['background'] = ApiClient.convertToType(data['background'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DIDTextToAvatarOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DIDTextToAvatarOptions</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DIDTextToAvatarOptions.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // ensure the json data is a string
        if (data['avatar'] && !(typeof data['avatar'] === 'string' || data['avatar'] instanceof String)) {
            throw new Error("Expected the field `avatar` to be a primitive type in the JSON string but got " + data['avatar']);
        }
        // ensure the json data is a string
        if (data['background'] && !(typeof data['background'] === 'string' || data['background'] instanceof String)) {
            throw new Error("Expected the field `background` to be a primitive type in the JSON string but got " + data['background']);
        }

        return true;
    }

/**
     * Returns The type of asset to generate - set to `text-to-avatar` for text-to-avatar.
     * @return {module:model/DIDTextToAvatarOptions.TypeEnum}
     */
    getType() {
        return this.type;
    }

    /**
     * Sets The type of asset to generate - set to `text-to-avatar` for text-to-avatar.
     * @param {module:model/DIDTextToAvatarOptions.TypeEnum} type The type of asset to generate - set to `text-to-avatar` for text-to-avatar.
     */
    setType(type) {
        this['type'] = type;
        return this;
    }
/**
     * Returns The text or script that the avatar will narrate.
     * @return {String}
     */
    getText() {
        return this.text;
    }

    /**
     * Sets The text or script that the avatar will narrate.
     * @param {String} text The text or script that the avatar will narrate.
     */
    setText(text) {
        this['text'] = text;
        return this;
    }
/**
     * Returns The avatar character to generate. Select from the list of available avatars: <ul>   <li>`jack`</li>   <li>`lana`</li>   <li>`lily`</li>   <li>`matt`</li>   <li>`rian`</li> </ul>
     * @return {module:model/DIDTextToAvatarOptions.AvatarEnum}
     */
    getAvatar() {
        return this.avatar;
    }

    /**
     * Sets The avatar character to generate. Select from the list of available avatars: <ul>   <li>`jack`</li>   <li>`lana`</li>   <li>`lily`</li>   <li>`matt`</li>   <li>`rian`</li> </ul>
     * @param {module:model/DIDTextToAvatarOptions.AvatarEnum} avatar The avatar character to generate. Select from the list of available avatars: <ul>   <li>`jack`</li>   <li>`lana`</li>   <li>`lily`</li>   <li>`matt`</li>   <li>`rian`</li> </ul>
     */
    setAvatar(avatar) {
        this['avatar'] = avatar;
        return this;
    }
/**
     * Returns The background color of the video.
     * @return {String}
     */
    getBackground() {
        return this.background;
    }

    /**
     * Sets The background color of the video.
     * @param {String} background The background color of the video.
     */
    setBackground(background) {
        this['background'] = background;
        return this;
    }

}

DIDTextToAvatarOptions.RequiredProperties = ["type", "text", "avatar"];

/**
 * The type of asset to generate - set to `text-to-avatar` for text-to-avatar.
 * @member {module:model/DIDTextToAvatarOptions.TypeEnum} type
 */
DIDTextToAvatarOptions.prototype['type'] = undefined;

/**
 * The text or script that the avatar will narrate.
 * @member {String} text
 */
DIDTextToAvatarOptions.prototype['text'] = undefined;

/**
 * The avatar character to generate. Select from the list of available avatars: <ul>   <li>`jack`</li>   <li>`lana`</li>   <li>`lily`</li>   <li>`matt`</li>   <li>`rian`</li> </ul>
 * @member {module:model/DIDTextToAvatarOptions.AvatarEnum} avatar
 */
DIDTextToAvatarOptions.prototype['avatar'] = undefined;

/**
 * The background color of the video.
 * @member {String} background
 */
DIDTextToAvatarOptions.prototype['background'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
DIDTextToAvatarOptions['TypeEnum'] = {

    /**
     * value: "text-to-avatar"
     * @const
     */
    "text-to-avatar": "text-to-avatar"
};


/**
 * Allowed values for the <code>avatar</code> property.
 * @enum {String}
 * @readonly
 */
DIDTextToAvatarOptions['AvatarEnum'] = {

    /**
     * value: "jack"
     * @const
     */
    "jack": "jack",

    /**
     * value: "lana"
     * @const
     */
    "lana": "lana",

    /**
     * value: "lily"
     * @const
     */
    "lily": "lily",

    /**
     * value: "matt"
     * @const
     */
    "matt": "matt",

    /**
     * value: "rian"
     * @const
     */
    "rian": "rian"
};



export default DIDTextToAvatarOptions;

