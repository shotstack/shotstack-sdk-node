/**
 * Shotstack
 * Official Node SDK for the Shotstack Cloud Video Editing API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UploadResponseAttributes model module.
 * @module model/UploadResponseAttributes
 * @version 0.2.6
 */
class UploadResponseAttributes {
    /**
     * Constructs a new <code>UploadResponseAttributes</code>.
     * The id and attributes of the upload file including the signed URL to send the binary file data to.
     * @alias module:model/UploadResponseAttributes
     * @param id {String} The source id.
     * @param url {String} The signed URL to use in a PUT request to send the binary file to.
     * @param expires {String} The time the upload request will expire. The signed URL will expire after one hour. Upload must complete within one hour.
     */
    constructor(id, url, expires) { 
        
        UploadResponseAttributes.initialize(this, id, url, expires);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, url, expires) { 
        obj['id'] = id;
        obj['url'] = url;
        obj['expires'] = expires;
    }

    /**
     * Constructs a <code>UploadResponseAttributes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UploadResponseAttributes} obj Optional instance to populate.
     * @return {module:model/UploadResponseAttributes} The populated <code>UploadResponseAttributes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UploadResponseAttributes();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('expires')) {
                obj['expires'] = ApiClient.convertToType(data['expires'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UploadResponseAttributes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UploadResponseAttributes</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UploadResponseAttributes.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['expires'] && !(typeof data['expires'] === 'string' || data['expires'] instanceof String)) {
            throw new Error("Expected the field `expires` to be a primitive type in the JSON string but got " + data['expires']);
        }

        return true;
    }

/**
     * Returns The source id.
     * @return {String}
     */
    getId() {
        return this.id;
    }

    /**
     * Sets The source id.
     * @param {String} id The source id.
     */
    setId(id) {
        this['id'] = id;
        return this;
    }
/**
     * Returns The signed URL to use in a PUT request to send the binary file to.
     * @return {String}
     */
    getUrl() {
        return this.url;
    }

    /**
     * Sets The signed URL to use in a PUT request to send the binary file to.
     * @param {String} url The signed URL to use in a PUT request to send the binary file to.
     */
    setUrl(url) {
        this['url'] = url;
        return this;
    }
/**
     * Returns The time the upload request will expire. The signed URL will expire after one hour. Upload must complete within one hour.
     * @return {String}
     */
    getExpires() {
        return this.expires;
    }

    /**
     * Sets The time the upload request will expire. The signed URL will expire after one hour. Upload must complete within one hour.
     * @param {String} expires The time the upload request will expire. The signed URL will expire after one hour. Upload must complete within one hour.
     */
    setExpires(expires) {
        this['expires'] = expires;
        return this;
    }

}

UploadResponseAttributes.RequiredProperties = ["id", "url", "expires"];

/**
 * The source id.
 * @member {String} id
 */
UploadResponseAttributes.prototype['id'] = undefined;

/**
 * The signed URL to use in a PUT request to send the binary file to.
 * @member {String} url
 */
UploadResponseAttributes.prototype['url'] = undefined;

/**
 * The time the upload request will expire. The signed URL will expire after one hour. Upload must complete within one hour.
 * @member {String} expires
 */
UploadResponseAttributes.prototype['expires'] = undefined;






export default UploadResponseAttributes;

