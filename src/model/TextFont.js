"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Shotstack
 * Official Node SDK for the Shotstack Cloud Video Editing API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
 * The TextFont model module.
 * @module model/TextFont
 * @version 0.2.9
 */
var TextFont = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>TextFont</code>.
   * Font properties for text.
   * @alias module:model/TextFont
   */
  function TextFont() {
    _classCallCheck(this, TextFont);
    TextFont.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  return _createClass(TextFont, [{
    key: "getFamily",
    value:
    /**
         * Returns The font family name. This must be Family name embedded in the font, i.e. \"Open Sans\".
         * @return {String}
         */
    function getFamily() {
      return this.family;
    }

    /**
     * Sets The font family name. This must be Family name embedded in the font, i.e. \"Open Sans\".
     * @param {String} family The font family name. This must be Family name embedded in the font, i.e. \"Open Sans\".
     */
  }, {
    key: "setFamily",
    value: function setFamily(family) {
      this['family'] = family;
      return this;
    }
    /**
         * Returns The text color using hexadecimal color notation.
         * @return {String}
         */
  }, {
    key: "getColor",
    value: function getColor() {
      return this.color;
    }

    /**
     * Sets The text color using hexadecimal color notation.
     * @param {String} color The text color using hexadecimal color notation.
     */
  }, {
    key: "setColor",
    value: function setColor(color) {
      this['color'] = color;
      return this;
    }
    /**
         * Returns The opacity of the text where 1 is opaque and 0 is transparent.
         * @return {Number}
         */
  }, {
    key: "getOpacity",
    value: function getOpacity() {
      return this.opacity;
    }

    /**
     * Sets The opacity of the text where 1 is opaque and 0 is transparent.
     * @param {Number} opacity The opacity of the text where 1 is opaque and 0 is transparent.
     */
  }, {
    key: "setOpacity",
    value: function setOpacity(opacity) {
      this['opacity'] = opacity;
      return this;
    }
    /**
         * Returns The size of the font in pixels (px).
         * @return {Number}
         */
  }, {
    key: "getSize",
    value: function getSize() {
      return this.size;
    }

    /**
     * Sets The size of the font in pixels (px).
     * @param {Number} size The size of the font in pixels (px).
     */
  }, {
    key: "setSize",
    value: function setSize(size) {
      this['size'] = size;
      return this;
    }
    /**
         * Returns The weight of the font. 100 is lightest, 900 is heaviest (boldest).
         * @return {Number}
         */
  }, {
    key: "getWeight",
    value: function getWeight() {
      return this.weight;
    }

    /**
     * Sets The weight of the font. 100 is lightest, 900 is heaviest (boldest).
     * @param {Number} weight The weight of the font. 100 is lightest, 900 is heaviest (boldest).
     */
  }, {
    key: "setWeight",
    value: function setWeight(weight) {
      this['weight'] = weight;
      return this;
    }
    /**
         * Returns The line height of the font as a ratio of the font size.
         * @return {Number}
         */
  }, {
    key: "getLineHeight",
    value: function getLineHeight() {
      return this.lineHeight;
    }

    /**
     * Sets The line height of the font as a ratio of the font size.
     * @param {Number} lineHeight The line height of the font as a ratio of the font size.
     */
  }, {
    key: "setLineHeight",
    value: function setLineHeight(lineHeight) {
      this['lineHeight'] = lineHeight;
      return this;
    }
  }], [{
    key: "initialize",
    value: function initialize(obj) {}

    /**
     * Constructs a <code>TextFont</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TextFont} obj Optional instance to populate.
     * @return {module:model/TextFont} The populated <code>TextFont</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new TextFont();
        if (data.hasOwnProperty('family')) {
          obj['family'] = _ApiClient["default"].convertToType(data['family'], 'String');
        }
        if (data.hasOwnProperty('color')) {
          obj['color'] = _ApiClient["default"].convertToType(data['color'], 'String');
        }
        if (data.hasOwnProperty('opacity')) {
          obj['opacity'] = _ApiClient["default"].convertToType(data['opacity'], 'Number');
        }
        if (data.hasOwnProperty('size')) {
          obj['size'] = _ApiClient["default"].convertToType(data['size'], 'Number');
        }
        if (data.hasOwnProperty('weight')) {
          obj['weight'] = _ApiClient["default"].convertToType(data['weight'], 'Number');
        }
        if (data.hasOwnProperty('lineHeight')) {
          obj['lineHeight'] = _ApiClient["default"].convertToType(data['lineHeight'], 'Number');
        }
      }
      return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TextFont</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TextFont</code>.
     */
  }, {
    key: "validateJSON",
    value: function validateJSON(data) {
      // ensure the json data is a string
      if (data['family'] && !(typeof data['family'] === 'string' || data['family'] instanceof String)) {
        throw new Error("Expected the field `family` to be a primitive type in the JSON string but got " + data['family']);
      }
      // ensure the json data is a string
      if (data['color'] && !(typeof data['color'] === 'string' || data['color'] instanceof String)) {
        throw new Error("Expected the field `color` to be a primitive type in the JSON string but got " + data['color']);
      }
      return true;
    }
  }]);
}();
/**
 * The font family name. This must be Family name embedded in the font, i.e. \"Open Sans\".
 * @member {String} family
 */
TextFont.prototype['family'] = undefined;

/**
 * The text color using hexadecimal color notation.
 * @member {String} color
 */
TextFont.prototype['color'] = undefined;

/**
 * The opacity of the text where 1 is opaque and 0 is transparent.
 * @member {Number} opacity
 */
TextFont.prototype['opacity'] = undefined;

/**
 * The size of the font in pixels (px).
 * @member {Number} size
 */
TextFont.prototype['size'] = undefined;

/**
 * The weight of the font. 100 is lightest, 900 is heaviest (boldest).
 * @member {Number} weight
 */
TextFont.prototype['weight'] = undefined;

/**
 * The line height of the font as a ratio of the font size.
 * @member {Number} lineHeight
 */
TextFont.prototype['lineHeight'] = undefined;
var _default = exports["default"] = TextFont;