/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.io/docs/guide/) documentation.  There are three API's, one for editing and generating assets (Edit API), one for managing hosted assets (Serve API) and one for ingesting and transforming source assets (Ingest API).  Each API has it's own base URL and collection of endpoints. Each API uses the same set of API keys.  **[Edit API](#shotstack-edit)** - [https://api.shotstack.io/edit/{version}](#)<br> Edit videos, images and audio assets in the cloud using a simple JSON schema and templates.  **[Serve API](#shotstack-serve)** - [https://api.shotstack.io/serve/{version}](#)<br> Inspect and manage the hosting of assets generated by the Edit and Ingest APIs.  **[Ingest API](#shotstack-ingest)** - [https://api.shotstack.io/ingest/{version}](#)<br> Ingest (upload, store and transform) source footage, images, audio and fonts to be used by the Edit API.  **[Create API](#shotstack-create)** - [https://api.shotstack.io/create/{version}](#)<br> Generate images, videos, voice overs and text using built in and third party generative AI providers. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Crop model module.
 * @module model/Crop
 * @version 0.2.6
 */
class Crop {
    /**
     * Constructs a new <code>Crop</code>.
     * Crop the sides of an asset by a relative amount. The size of the crop is specified using a scale between 0 and 1, relative to the screen width - i.e a left crop of 0.5 will crop half of the asset from the left, a top crop  of 0.25 will crop the top by quarter of the asset.
     * @alias module:model/Crop
     */
    constructor() { 
        
        Crop.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Crop</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Crop} obj Optional instance to populate.
     * @return {module:model/Crop} The populated <code>Crop</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Crop();

            if (data.hasOwnProperty('top')) {
                obj['top'] = ApiClient.convertToType(data['top'], 'Number');
            }
            if (data.hasOwnProperty('bottom')) {
                obj['bottom'] = ApiClient.convertToType(data['bottom'], 'Number');
            }
            if (data.hasOwnProperty('left')) {
                obj['left'] = ApiClient.convertToType(data['left'], 'Number');
            }
            if (data.hasOwnProperty('right')) {
                obj['right'] = ApiClient.convertToType(data['right'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Crop</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Crop</code>.
     */
    static validateJSON(data) {

        return true;
    }

/**
     * Returns Crop from the top of the asset
     * minimum: 0
     * maximum: 1
     * @return {Number}
     */
    getTop() {
        return this.top;
    }

    /**
     * Sets Crop from the top of the asset
     * @param {Number} top Crop from the top of the asset
     */
    setTop(top) {
        this['top'] = top;
        return this;
    }
/**
     * Returns Crop from the bottom of the asset
     * minimum: 0
     * maximum: 1
     * @return {Number}
     */
    getBottom() {
        return this.bottom;
    }

    /**
     * Sets Crop from the bottom of the asset
     * @param {Number} bottom Crop from the bottom of the asset
     */
    setBottom(bottom) {
        this['bottom'] = bottom;
        return this;
    }
/**
     * Returns Crop from the left of the asset
     * minimum: 0
     * maximum: 1
     * @return {Number}
     */
    getLeft() {
        return this.left;
    }

    /**
     * Sets Crop from the left of the asset
     * @param {Number} left Crop from the left of the asset
     */
    setLeft(left) {
        this['left'] = left;
        return this;
    }
/**
     * Returns Crop from the left of the asset
     * minimum: 0
     * maximum: 1
     * @return {Number}
     */
    getRight() {
        return this.right;
    }

    /**
     * Sets Crop from the left of the asset
     * @param {Number} right Crop from the left of the asset
     */
    setRight(right) {
        this['right'] = right;
        return this;
    }

}



/**
 * Crop from the top of the asset
 * @member {Number} top
 */
Crop.prototype['top'] = undefined;

/**
 * Crop from the bottom of the asset
 * @member {Number} bottom
 */
Crop.prototype['bottom'] = undefined;

/**
 * Crop from the left of the asset
 * @member {Number} left
 */
Crop.prototype['left'] = undefined;

/**
 * Crop from the left of the asset
 * @member {Number} right
 */
Crop.prototype['right'] = undefined;






export default Crop;

