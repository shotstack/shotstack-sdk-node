/**
 * Shotstack
 * Official Node SDK for the Shotstack Cloud Video Editing API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RenderResponseData from './RenderResponseData';

/**
 * The RenderResponse model module.
 * @module model/RenderResponse
 * @version 0.2.6
 */
class RenderResponse {
    /**
     * Constructs a new <code>RenderResponse</code>.
     * The response received after a [render status request](#get-render-status) is submitted. The response includes  details about status of a render and the output URL.
     * @alias module:model/RenderResponse
     * @param success {Boolean} `true` if status available, else `false`.
     * @param message {String} `OK` or an error message.
     * @param response {module:model/RenderResponseData} 
     */
    constructor(success, message, response) { 
        
        RenderResponse.initialize(this, success, message, response);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, success, message, response) { 
        obj['success'] = success;
        obj['message'] = message;
        obj['response'] = response;
    }

    /**
     * Constructs a <code>RenderResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RenderResponse} obj Optional instance to populate.
     * @return {module:model/RenderResponse} The populated <code>RenderResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RenderResponse();

            if (data.hasOwnProperty('success')) {
                obj['success'] = ApiClient.convertToType(data['success'], 'Boolean');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('response')) {
                obj['response'] = RenderResponseData.constructFromObject(data['response']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RenderResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RenderResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RenderResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // validate the optional field `response`
        if (data['response']) { // data not null
          RenderResponseData.validateJSON(data['response']);
        }

        return true;
    }

/**
     * Returns `true` if status available, else `false`.
     * @return {Boolean}
     */
    getSuccess() {
        return this.success;
    }

    /**
     * Sets `true` if status available, else `false`.
     * @param {Boolean} success `true` if status available, else `false`.
     */
    setSuccess(success) {
        this['success'] = success;
        return this;
    }
/**
     * Returns `OK` or an error message.
     * @return {String}
     */
    getMessage() {
        return this.message;
    }

    /**
     * Sets `OK` or an error message.
     * @param {String} message `OK` or an error message.
     */
    setMessage(message) {
        this['message'] = message;
        return this;
    }
/**
     * @return {module:model/RenderResponseData}
     */
    getResponse() {
        return this.response;
    }

    /**
     * @param {module:model/RenderResponseData} response
     */
    setResponse(response) {
        this['response'] = response;
        return this;
    }

}

RenderResponse.RequiredProperties = ["success", "message", "response"];

/**
 * `true` if status available, else `false`.
 * @member {Boolean} success
 */
RenderResponse.prototype['success'] = undefined;

/**
 * `OK` or an error message.
 * @member {String} message
 */
RenderResponse.prototype['message'] = undefined;

/**
 * @member {module:model/RenderResponseData} response
 */
RenderResponse.prototype['response'] = undefined;






export default RenderResponse;

