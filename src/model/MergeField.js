/**
 * Shotstack
 * Official Node SDK for the Shotstack Cloud Video Editing API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MergeField model module.
 * @module model/MergeField
 * @version 0.2.6
 */
class MergeField {
    /**
     * Constructs a new <code>MergeField</code>.
     * A merge field consists of a key; &#x60;find&#x60;, and a value; &#x60;replace&#x60;. Merge fields can be used to replace placeholders within the JSON edit to create re-usable templates. Placeholders should be a string with double brace delimiters, i.e. &#x60;\&quot;{{NAME}}\&quot;&#x60;. A placeholder can be used for any value within the JSON edit.
     * @alias module:model/MergeField
     * @param find {String} The string to find <u>without</u> delimiters.
     * @param replace {Object} The replacement value. The replacement can be any valid JSON type - string, boolean, number, etc...
     */
    constructor(find, replace) { 
        
        MergeField.initialize(this, find, replace);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, find, replace) { 
        obj['find'] = find;
        obj['replace'] = replace;
    }

    /**
     * Constructs a <code>MergeField</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MergeField} obj Optional instance to populate.
     * @return {module:model/MergeField} The populated <code>MergeField</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MergeField();

            if (data.hasOwnProperty('find')) {
                obj['find'] = ApiClient.convertToType(data['find'], 'String');
            }
            if (data.hasOwnProperty('replace')) {
                obj['replace'] = ApiClient.convertToType(data['replace'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MergeField</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MergeField</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MergeField.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['find'] && !(typeof data['find'] === 'string' || data['find'] instanceof String)) {
            throw new Error("Expected the field `find` to be a primitive type in the JSON string but got " + data['find']);
        }

        return true;
    }

/**
     * Returns The string to find <u>without</u> delimiters.
     * @return {String}
     */
    getFind() {
        return this.find;
    }

    /**
     * Sets The string to find <u>without</u> delimiters.
     * @param {String} find The string to find <u>without</u> delimiters.
     */
    setFind(find) {
        this['find'] = find;
        return this;
    }
/**
     * Returns The replacement value. The replacement can be any valid JSON type - string, boolean, number, etc...
     * @return {Object}
     */
    getReplace() {
        return this.replace;
    }

    /**
     * Sets The replacement value. The replacement can be any valid JSON type - string, boolean, number, etc...
     * @param {Object} replace The replacement value. The replacement can be any valid JSON type - string, boolean, number, etc...
     */
    setReplace(replace) {
        this['replace'] = replace;
        return this;
    }

}

MergeField.RequiredProperties = ["find", "replace"];

/**
 * The string to find <u>without</u> delimiters.
 * @member {String} find
 */
MergeField.prototype['find'] = undefined;

/**
 * The replacement value. The replacement can be any valid JSON type - string, boolean, number, etc...
 * @member {Object} replace
 */
MergeField.prototype['replace'] = undefined;






export default MergeField;

