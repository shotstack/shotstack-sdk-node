/**
 * Shotstack
 * Official Node SDK for the Shotstack Cloud Video Editing API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Edit from './Edit';

/**
 * The Template model module.
 * @module model/Template
 * @version 0.2.6
 */
class Template {
    /**
     * Constructs a new <code>Template</code>.
     * A template is a saved [Edit](#tocs_edit) than can be loaded and re-used.
     * @alias module:model/Template
     * @param name {String} The template name
     */
    constructor(name) { 
        
        Template.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>Template</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Template} obj Optional instance to populate.
     * @return {module:model/Template} The populated <code>Template</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Template();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('template')) {
                obj['template'] = Edit.constructFromObject(data['template']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Template</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Template</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Template.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `template`
        if (data['template']) { // data not null
          Edit.validateJSON(data['template']);
        }

        return true;
    }

/**
     * Returns The template name
     * @return {String}
     */
    getName() {
        return this.name;
    }

    /**
     * Sets The template name
     * @param {String} name The template name
     */
    setName(name) {
        this['name'] = name;
        return this;
    }
/**
     * @return {module:model/Edit}
     */
    getTemplate() {
        return this.template;
    }

    /**
     * @param {module:model/Edit} template
     */
    setTemplate(template) {
        this['template'] = template;
        return this;
    }

}

Template.RequiredProperties = ["name"];

/**
 * The template name
 * @member {String} name
 */
Template.prototype['name'] = undefined;

/**
 * @member {module:model/Edit} template
 */
Template.prototype['template'] = undefined;






export default Template;

