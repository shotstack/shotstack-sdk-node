"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _CaptionBackground = _interopRequireDefault(require("./CaptionBackground"));
var _CaptionFont = _interopRequireDefault(require("./CaptionFont"));
var _CaptionMargin = _interopRequireDefault(require("./CaptionMargin"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Shotstack
 * Official Node SDK for the Shotstack Cloud Video Editing API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
 * The CaptionAsset model module.
 * @module model/CaptionAsset
 * @version 0.2.9
 */
var CaptionAsset = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>CaptionAsset</code>.
   * The CaptionAsset is used to add captions (subtitles) to a video. It uses a supplied SRT or VTT file which will be read and burnt to the video.  Captions can be applied independently from a video or audio file for greater flexibility with styling and layout. For example you can scale, position or crop a video without modifying the captions.  To sync captions with a video or audio file use a [Video](#tocs_videoasset\&quot;) or [Audio](#tocs_audioasset\&quot;) with matching start and end time. 
   * @alias module:model/CaptionAsset
   * @param type {String} The type of asset - set to `caption` for captions.
   * @param src {String} The URL to an SRT or VTT subtitles file. The URL must be publicly accessible or include credentials.
   */
  function CaptionAsset(type, src) {
    _classCallCheck(this, CaptionAsset);
    CaptionAsset.initialize(this, type, src);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  return _createClass(CaptionAsset, [{
    key: "getType",
    value:
    /**
         * Returns The type of asset - set to `caption` for captions.
         * @return {String}
         */
    function getType() {
      return this.type;
    }

    /**
     * Sets The type of asset - set to `caption` for captions.
     * @param {String} type The type of asset - set to `caption` for captions.
     */
  }, {
    key: "setType",
    value: function setType(type) {
      this['type'] = type;
      return this;
    }
    /**
         * Returns The URL to an SRT or VTT subtitles file. The URL must be publicly accessible or include credentials.
         * @return {String}
         */
  }, {
    key: "getSrc",
    value: function getSrc() {
      return this.src;
    }

    /**
     * Sets The URL to an SRT or VTT subtitles file. The URL must be publicly accessible or include credentials.
     * @param {String} src The URL to an SRT or VTT subtitles file. The URL must be publicly accessible or include credentials.
     */
  }, {
    key: "setSrc",
    value: function setSrc(src) {
      this['src'] = src;
      return this;
    }
    /**
         * @return {module:model/CaptionFont}
         */
  }, {
    key: "getFont",
    value: function getFont() {
      return this.font;
    }

    /**
     * @param {module:model/CaptionFont} font
     */
  }, {
    key: "setFont",
    value: function setFont(font) {
      this['font'] = font;
      return this;
    }
    /**
         * @return {module:model/CaptionBackground}
         */
  }, {
    key: "getBackground",
    value: function getBackground() {
      return this.background;
    }

    /**
     * @param {module:model/CaptionBackground} background
     */
  }, {
    key: "setBackground",
    value: function setBackground(background) {
      this['background'] = background;
      return this;
    }
    /**
         * @return {module:model/CaptionMargin}
         */
  }, {
    key: "getMargin",
    value: function getMargin() {
      return this.margin;
    }

    /**
     * @param {module:model/CaptionMargin} margin
     */
  }, {
    key: "setMargin",
    value: function setMargin(margin) {
      this['margin'] = margin;
      return this;
    }
    /**
         * Returns The start trim point of the captions, in seconds (defaults to 0). Remove the trim length from teh start of the captions and allow it to be synced with video or audio. The captions will play until the file ends or the Clip length is reached.
         * @return {Number}
         */
  }, {
    key: "getTrim",
    value: function getTrim() {
      return this.trim;
    }

    /**
     * Sets The start trim point of the captions, in seconds (defaults to 0). Remove the trim length from teh start of the captions and allow it to be synced with video or audio. The captions will play until the file ends or the Clip length is reached.
     * @param {Number} trim The start trim point of the captions, in seconds (defaults to 0). Remove the trim length from teh start of the captions and allow it to be synced with video or audio. The captions will play until the file ends or the Clip length is reached.
     */
  }, {
    key: "setTrim",
    value: function setTrim(trim) {
      this['trim'] = trim;
      return this;
    }
    /**
         * Returns Adjust the playback speed of the captions between 0 (paused) and 10 (10x normal speed) where 1 is normal speed (defaults to 1). Adjusting the speed will also adjust the duration of the clip and may require you to  adjust the Clip length. For example, if you set speed to 0.5, the clip will need to be 2x as long to play the entire captions (i.e. original length / 0.5). If you set speed to 2, the clip will need to be half as long to play the entire captions (i.e. original length / 2).
         * minimum: 0
         * maximum: 10
         * @return {Number}
         */
  }, {
    key: "getSpeed",
    value: function getSpeed() {
      return this.speed;
    }

    /**
     * Sets Adjust the playback speed of the captions between 0 (paused) and 10 (10x normal speed) where 1 is normal speed (defaults to 1). Adjusting the speed will also adjust the duration of the clip and may require you to  adjust the Clip length. For example, if you set speed to 0.5, the clip will need to be 2x as long to play the entire captions (i.e. original length / 0.5). If you set speed to 2, the clip will need to be half as long to play the entire captions (i.e. original length / 2).
     * @param {Number} speed Adjust the playback speed of the captions between 0 (paused) and 10 (10x normal speed) where 1 is normal speed (defaults to 1). Adjusting the speed will also adjust the duration of the clip and may require you to  adjust the Clip length. For example, if you set speed to 0.5, the clip will need to be 2x as long to play the entire captions (i.e. original length / 0.5). If you set speed to 2, the clip will need to be half as long to play the entire captions (i.e. original length / 2).
     */
  }, {
    key: "setSpeed",
    value: function setSpeed(speed) {
      this['speed'] = speed;
      return this;
    }
  }], [{
    key: "initialize",
    value: function initialize(obj, type, src) {
      obj['type'] = type || 'caption';
      obj['src'] = src;
    }

    /**
     * Constructs a <code>CaptionAsset</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CaptionAsset} obj Optional instance to populate.
     * @return {module:model/CaptionAsset} The populated <code>CaptionAsset</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new CaptionAsset();
        if (data.hasOwnProperty('type')) {
          obj['type'] = _ApiClient["default"].convertToType(data['type'], 'String');
        }
        if (data.hasOwnProperty('src')) {
          obj['src'] = _ApiClient["default"].convertToType(data['src'], 'String');
        }
        if (data.hasOwnProperty('font')) {
          obj['font'] = _CaptionFont["default"].constructFromObject(data['font']);
        }
        if (data.hasOwnProperty('background')) {
          obj['background'] = _CaptionBackground["default"].constructFromObject(data['background']);
        }
        if (data.hasOwnProperty('margin')) {
          obj['margin'] = _CaptionMargin["default"].constructFromObject(data['margin']);
        }
        if (data.hasOwnProperty('trim')) {
          obj['trim'] = _ApiClient["default"].convertToType(data['trim'], 'Number');
        }
        if (data.hasOwnProperty('speed')) {
          obj['speed'] = _ApiClient["default"].convertToType(data['speed'], 'Number');
        }
      }
      return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CaptionAsset</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CaptionAsset</code>.
     */
  }, {
    key: "validateJSON",
    value: function validateJSON(data) {
      // check to make sure all required properties are present in the JSON string
      var _iterator = _createForOfIteratorHelper(CaptionAsset.RequiredProperties),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var property = _step.value;
          if (!data.hasOwnProperty(property)) {
            throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
          }
        }
        // ensure the json data is a string
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
        throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
      }
      // ensure the json data is a string
      if (data['src'] && !(typeof data['src'] === 'string' || data['src'] instanceof String)) {
        throw new Error("Expected the field `src` to be a primitive type in the JSON string but got " + data['src']);
      }
      // validate the optional field `font`
      if (data['font']) {
        // data not null
        _CaptionFont["default"].validateJSON(data['font']);
      }
      // validate the optional field `background`
      if (data['background']) {
        // data not null
        _CaptionBackground["default"].validateJSON(data['background']);
      }
      // validate the optional field `margin`
      if (data['margin']) {
        // data not null
        _CaptionMargin["default"].validateJSON(data['margin']);
      }
      return true;
    }
  }]);
}();
CaptionAsset.RequiredProperties = ["type", "src"];

/**
 * The type of asset - set to `caption` for captions.
 * @member {String} type
 * @default 'caption'
 */
CaptionAsset.prototype['type'] = 'caption';

/**
 * The URL to an SRT or VTT subtitles file. The URL must be publicly accessible or include credentials.
 * @member {String} src
 */
CaptionAsset.prototype['src'] = undefined;

/**
 * @member {module:model/CaptionFont} font
 */
CaptionAsset.prototype['font'] = undefined;

/**
 * @member {module:model/CaptionBackground} background
 */
CaptionAsset.prototype['background'] = undefined;

/**
 * @member {module:model/CaptionMargin} margin
 */
CaptionAsset.prototype['margin'] = undefined;

/**
 * The start trim point of the captions, in seconds (defaults to 0). Remove the trim length from teh start of the captions and allow it to be synced with video or audio. The captions will play until the file ends or the Clip length is reached.
 * @member {Number} trim
 */
CaptionAsset.prototype['trim'] = undefined;

/**
 * Adjust the playback speed of the captions between 0 (paused) and 10 (10x normal speed) where 1 is normal speed (defaults to 1). Adjusting the speed will also adjust the duration of the clip and may require you to  adjust the Clip length. For example, if you set speed to 0.5, the clip will need to be 2x as long to play the entire captions (i.e. original length / 0.5). If you set speed to 2, the clip will need to be half as long to play the entire captions (i.e. original length / 2).
 * @member {Number} speed
 */
CaptionAsset.prototype['speed'] = undefined;
var _default = exports["default"] = CaptionAsset;