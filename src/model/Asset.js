/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.io/docs/guide/) documentation.  There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>  The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b> 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 5.4.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AudioAsset', 'model/Crop', 'model/HtmlAsset', 'model/ImageAsset', 'model/LumaAsset', 'model/Offset', 'model/TitleAsset', 'model/VideoAsset'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./AudioAsset'), require('./Crop'), require('./HtmlAsset'), require('./ImageAsset'), require('./LumaAsset'), require('./Offset'), require('./TitleAsset'), require('./VideoAsset'));
  } else {
    // Browser globals (root is window)
    if (!root.ShotstackSdk) {
      root.ShotstackSdk = {};
    }
    root.ShotstackSdk.Asset = factory(root.ShotstackSdk.ApiClient, root.ShotstackSdk.AudioAsset, root.ShotstackSdk.Crop, root.ShotstackSdk.HtmlAsset, root.ShotstackSdk.ImageAsset, root.ShotstackSdk.LumaAsset, root.ShotstackSdk.Offset, root.ShotstackSdk.TitleAsset, root.ShotstackSdk.VideoAsset);
  }
}(this, function(ApiClient, AudioAsset, Crop, HtmlAsset, ImageAsset, LumaAsset, Offset, TitleAsset, VideoAsset) {
  'use strict';



  /**
   * The Asset model module.
   * @module model/Asset
   * @version v1
   */

  /**
   * Constructs a new <code>Asset</code>.
   * The type of asset to display for the duration of the Clip. Value must be one of: &lt;ul&gt;   &lt;li&gt;&lt;a href&#x3D;\&quot;#tocs_videoasset\&quot;&gt;VideoAsset&lt;/a&gt;&lt;/li&gt;   &lt;li&gt;&lt;a href&#x3D;\&quot;#tocs_imageasset\&quot;&gt;ImageAsset&lt;/a&gt;&lt;/li&gt;   &lt;li&gt;&lt;a href&#x3D;\&quot;#tocs_titleasset\&quot;&gt;TitleAsset&lt;/a&gt;&lt;/li&gt;   &lt;li&gt;&lt;a href&#x3D;\&quot;#tocs_htmlasset\&quot;&gt;HtmlAsset&lt;/a&gt;&lt;/li&gt;   &lt;li&gt;&lt;a href&#x3D;\&quot;#tocs_audioasset\&quot;&gt;AudioAsset&lt;/a&gt;&lt;/li&gt;   &lt;li&gt;&lt;a href&#x3D;\&quot;#tocs_lumaasset\&quot;&gt;LumaAsset&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;
   * @alias module:model/Asset
   * @class
   * @implements module:model/VideoAsset
   * @implements module:model/ImageAsset
   * @implements module:model/TitleAsset
   * @implements module:model/HtmlAsset
   * @implements module:model/AudioAsset
   * @implements module:model/LumaAsset
   * @param type {String} The type of asset - set to `luma` for luma mattes.
   * @param src {String} The luma matte source URL. The URL must be publicly accessible or include credentials.
   * @param text {String} The title text string - i.e. \"My Title\".
   * @param html {String} The HTML text string. See list of [supported HTML tags](https://shotstack.io/docs/guide/architecting-an-application/html-support#supported-html-tags).
   */
  var exports = function(type, src, text, html) {
    var _this = this;

    VideoAsset.call(_this, type, src);
    ImageAsset.call(_this, type, src);
    TitleAsset.call(_this, type, text);
    HtmlAsset.call(_this, type, html);
    AudioAsset.call(_this, type, src);
    LumaAsset.call(_this, type, src);
    _this['type'] = type || 'luma';
    _this['src'] = src;
    _this['text'] = text;
    _this['html'] = html;
  };

  /**
   * Constructs a <code>Asset</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Asset} obj Optional instance to populate.
   * @return {module:model/Asset} The populated <code>Asset</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      VideoAsset.constructFromObject(data, obj);
      ImageAsset.constructFromObject(data, obj);
      TitleAsset.constructFromObject(data, obj);
      HtmlAsset.constructFromObject(data, obj);
      AudioAsset.constructFromObject(data, obj);
      LumaAsset.constructFromObject(data, obj);
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('src')) {
        obj['src'] = ApiClient.convertToType(data['src'], 'String');
      }
      if (data.hasOwnProperty('trim')) {
        obj['trim'] = ApiClient.convertToType(data['trim'], 'Number');
      }
      if (data.hasOwnProperty('volume')) {
        obj['volume'] = ApiClient.convertToType(data['volume'], 'Number');
      }
      if (data.hasOwnProperty('volumeEffect')) {
        obj['volumeEffect'] = ApiClient.convertToType(data['volumeEffect'], 'String');
      }
      if (data.hasOwnProperty('crop')) {
        obj['crop'] = Crop.constructFromObject(data['crop']);
      }
      if (data.hasOwnProperty('text')) {
        obj['text'] = ApiClient.convertToType(data['text'], 'String');
      }
      if (data.hasOwnProperty('style')) {
        obj['style'] = ApiClient.convertToType(data['style'], 'String');
      }
      if (data.hasOwnProperty('color')) {
        obj['color'] = ApiClient.convertToType(data['color'], 'String');
      }
      if (data.hasOwnProperty('size')) {
        obj['size'] = ApiClient.convertToType(data['size'], 'String');
      }
      if (data.hasOwnProperty('background')) {
        obj['background'] = ApiClient.convertToType(data['background'], 'String');
      }
      if (data.hasOwnProperty('position')) {
        obj['position'] = ApiClient.convertToType(data['position'], 'String');
      }
      if (data.hasOwnProperty('offset')) {
        obj['offset'] = Offset.constructFromObject(data['offset']);
      }
      if (data.hasOwnProperty('html')) {
        obj['html'] = ApiClient.convertToType(data['html'], 'String');
      }
      if (data.hasOwnProperty('css')) {
        obj['css'] = ApiClient.convertToType(data['css'], 'String');
      }
      if (data.hasOwnProperty('width')) {
        obj['width'] = ApiClient.convertToType(data['width'], 'Number');
      }
      if (data.hasOwnProperty('height')) {
        obj['height'] = ApiClient.convertToType(data['height'], 'Number');
      }
      if (data.hasOwnProperty('effect')) {
        obj['effect'] = ApiClient.convertToType(data['effect'], 'String');
      }
    }
    return obj;
  }

  /**
   * The type of asset - set to `luma` for luma mattes.
   * @member {String} type
   * @default 'luma'
   */
  exports.prototype['type'] = 'luma';
  /**
   * The luma matte source URL. The URL must be publicly accessible or include credentials.
   * @member {String} src
   */
  exports.prototype['src'] = undefined;
  /**
   * The start trim point of the luma matte clip, in seconds (defaults to 0). Videos will start from the in trim point. A luma matte video will play until the file ends or the Clip length is reached.
   * @member {Number} trim
   */
  exports.prototype['trim'] = undefined;
  /**
   * Set the volume for the audio clip between 0 and 1 where 0 is muted and 1 is full volume (defaults to 1).
   * @member {Number} volume
   */
  exports.prototype['volume'] = undefined;
  /**
   * The volume effect to apply to the video asset <ul>   <li>`fadeIn` - fade volume in only</li>   <li>`fadeOut` - fade volume out only</li>   <li>`fadeInFadeOut` - fade volume in and out</li> </ul>
   * @member {module:model/Asset.VolumeEffectEnum} volumeEffect
   */
  exports.prototype['volumeEffect'] = undefined;
  /**
   * @member {module:model/Crop} crop
   */
  exports.prototype['crop'] = undefined;
  /**
   * The title text string - i.e. \"My Title\".
   * @member {String} text
   */
  exports.prototype['text'] = undefined;
  /**
   * Uses a preset to apply font properties and styling to the title. <ul>   <li>`minimal`</li>   <li>`blockbuster`</li>   <li>`vogue`</li>   <li>`sketchy`</li>   <li>`skinny`</li>   <li>`chunk`</li>   <li>`chunkLight`</li>   <li>`marker`</li>   <li>`future`</li>   <li>`subtitle`</li> </ul>
   * @member {module:model/Asset.StyleEnum} style
   */
  exports.prototype['style'] = undefined;
  /**
   * Set the text color using hexadecimal color notation. Transparency is supported by setting the first two characters of the hex string (opposite to HTML),  i.e. #80ffffff will be white with  50% transparency.
   * @member {String} color
   */
  exports.prototype['color'] = undefined;
  /**
   * Set the relative size of the text using predefined sizes from xx-small to xx-large. <ul>   <li>`xx-small`</li>   <li>`x-small`</li>   <li>`small`</li>   <li>`medium`</li>   <li>`large`</li>   <li>`x-large`</li>   <li>`xx-large`</li> </ul>
   * @member {module:model/Asset.SizeEnum} size
   */
  exports.prototype['size'] = undefined;
  /**
   * Apply a background color behind the HTML bounding box using. Set the text color using hexadecimal  color notation. Transparency is supported by setting the first two characters of the hex string  (opposite to HTML), i.e. #80ffffff will be white with 50% transparency.
   * @member {String} background
   */
  exports.prototype['background'] = undefined;
  /**
   * Place the HTML in one of nine predefined positions within the HTML area. <ul>   <li>`top` - top (center)</li>   <li>`topRight` - top right</li>   <li>`right` - right (center)</li>   <li>`bottomRight` - bottom right</li>   <li>`bottom` - bottom (center)</li>   <li>`bottomLeft` - bottom left</li>   <li>`left` - left (center)</li>   <li>`topLeft` - top left</li>   <li>`center` - center</li> </ul>
   * @member {module:model/Asset.PositionEnum} position
   */
  exports.prototype['position'] = undefined;
  /**
   * @member {module:model/Offset} offset
   */
  exports.prototype['offset'] = undefined;
  /**
   * The HTML text string. See list of [supported HTML tags](https://shotstack.io/docs/guide/architecting-an-application/html-support#supported-html-tags).
   * @member {String} html
   */
  exports.prototype['html'] = undefined;
  /**
   * The CSS text string to apply styling to the HTML. See list of  [support CSS properties](https://shotstack.io/docs/guide/architecting-an-application/html-support#supported-css-properties).
   * @member {String} css
   */
  exports.prototype['css'] = undefined;
  /**
   * Set the width of the HTML asset bounding box in pixels. Text will wrap to fill the bounding box.
   * @member {Number} width
   */
  exports.prototype['width'] = undefined;
  /**
   * Set the width of the HTML asset bounding box in pixels. Text and elements will be masked if they exceed the  height of the bounding box.
   * @member {Number} height
   */
  exports.prototype['height'] = undefined;
  /**
   * The effect to apply to the audio asset <ul>   <li>`fadeIn` - fade volume in only</li>   <li>`fadeOut` - fade volume out only</li>   <li>`fadeInFadeOut` - fade volume in and out</li> </ul>
   * @member {module:model/Asset.EffectEnum} effect
   */
  exports.prototype['effect'] = undefined;

  // Implement VideoAsset interface:
  /**
   * The type of asset - set to `video` for videos.
   * @member {String} type
   * @default 'video'
   */
exports.prototype['type'] = 'video';

  /**
   * The video source URL. The URL must be publicly accessible or include credentials.
   * @member {String} src
   */
exports.prototype['src'] = undefined;

  /**
   * The start trim point of the video clip, in seconds (defaults to 0). Videos will start from the in trim point. The video will play until the file ends or the Clip length is reached.
   * @member {Number} trim
   */
exports.prototype['trim'] = undefined;

  /**
   * Set the volume for the video clip between 0 and 1 where 0 is muted and 1 is full volume (defaults to 1).
   * @member {Number} volume
   */
exports.prototype['volume'] = undefined;

  /**
   * The volume effect to apply to the video asset <ul>   <li>`fadeIn` - fade volume in only</li>   <li>`fadeOut` - fade volume out only</li>   <li>`fadeInFadeOut` - fade volume in and out</li> </ul>
   * @member {module:model/VideoAsset.VolumeEffectEnum} volumeEffect
   */
exports.prototype['volumeEffect'] = undefined;

  /**
   * @member {module:model/Crop} crop
   */
exports.prototype['crop'] = undefined;

  // Implement ImageAsset interface:
  /**
   * The type of asset - set to `image` for images.
   * @member {String} type
   * @default 'image'
   */
exports.prototype['type'] = 'image';

  /**
   * The image source URL. The URL must be publicly accessible or include credentials.
   * @member {String} src
   */
exports.prototype['src'] = undefined;

  /**
   * @member {module:model/Crop} crop
   */
exports.prototype['crop'] = undefined;

  // Implement TitleAsset interface:
  /**
   * The type of asset - set to `title` for titles.
   * @member {String} type
   * @default 'title'
   */
exports.prototype['type'] = 'title';

  /**
   * The title text string - i.e. \"My Title\".
   * @member {String} text
   */
exports.prototype['text'] = undefined;

  /**
   * Uses a preset to apply font properties and styling to the title. <ul>   <li>`minimal`</li>   <li>`blockbuster`</li>   <li>`vogue`</li>   <li>`sketchy`</li>   <li>`skinny`</li>   <li>`chunk`</li>   <li>`chunkLight`</li>   <li>`marker`</li>   <li>`future`</li>   <li>`subtitle`</li> </ul>
   * @member {module:model/TitleAsset.StyleEnum} style
   */
exports.prototype['style'] = undefined;

  /**
   * Set the text color using hexadecimal color notation. Transparency is supported by setting the first two characters of the hex string (opposite to HTML),  i.e. #80ffffff will be white with  50% transparency.
   * @member {String} color
   */
exports.prototype['color'] = undefined;

  /**
   * Set the relative size of the text using predefined sizes from xx-small to xx-large. <ul>   <li>`xx-small`</li>   <li>`x-small`</li>   <li>`small`</li>   <li>`medium`</li>   <li>`large`</li>   <li>`x-large`</li>   <li>`xx-large`</li> </ul>
   * @member {module:model/TitleAsset.SizeEnum} size
   */
exports.prototype['size'] = undefined;

  /**
   * Apply a background color behind the text. Set the text color using hexadecimal color notation. Transparency is supported by setting the first two characters of the hex string (opposite to HTML),  i.e. #80ffffff will be white with 50% transparency. Omit to use transparent background.
   * @member {String} background
   */
exports.prototype['background'] = undefined;

  /**
   * Place the title in one of nine predefined positions of the viewport. <ul>   <li>`top` - top (center)</li>   <li>`topRight` - top right</li>   <li>`right` - right (center)</li>   <li>`bottomRight` - bottom right</li>   <li>`bottom` - bottom (center)</li>   <li>`bottomLeft` - bottom left</li>   <li>`left` - left (center)</li>   <li>`topLeft` - top left</li>   <li>`center` - center</li> </ul>
   * @member {module:model/TitleAsset.PositionEnum} position
   */
exports.prototype['position'] = undefined;

  /**
   * @member {module:model/Offset} offset
   */
exports.prototype['offset'] = undefined;

  // Implement HtmlAsset interface:
  /**
   * The type of asset - set to `html` for HTML.
   * @member {String} type
   * @default 'html'
   */
exports.prototype['type'] = 'html';

  /**
   * The HTML text string. See list of [supported HTML tags](https://shotstack.io/docs/guide/architecting-an-application/html-support#supported-html-tags).
   * @member {String} html
   */
exports.prototype['html'] = undefined;

  /**
   * The CSS text string to apply styling to the HTML. See list of  [support CSS properties](https://shotstack.io/docs/guide/architecting-an-application/html-support#supported-css-properties).
   * @member {String} css
   */
exports.prototype['css'] = undefined;

  /**
   * Set the width of the HTML asset bounding box in pixels. Text will wrap to fill the bounding box.
   * @member {Number} width
   */
exports.prototype['width'] = undefined;

  /**
   * Set the width of the HTML asset bounding box in pixels. Text and elements will be masked if they exceed the  height of the bounding box.
   * @member {Number} height
   */
exports.prototype['height'] = undefined;

  /**
   * Apply a background color behind the HTML bounding box using. Set the text color using hexadecimal  color notation. Transparency is supported by setting the first two characters of the hex string  (opposite to HTML), i.e. #80ffffff will be white with 50% transparency.
   * @member {String} background
   */
exports.prototype['background'] = undefined;

  /**
   * Place the HTML in one of nine predefined positions within the HTML area. <ul>   <li>`top` - top (center)</li>   <li>`topRight` - top right</li>   <li>`right` - right (center)</li>   <li>`bottomRight` - bottom right</li>   <li>`bottom` - bottom (center)</li>   <li>`bottomLeft` - bottom left</li>   <li>`left` - left (center)</li>   <li>`topLeft` - top left</li>   <li>`center` - center</li> </ul>
   * @member {module:model/HtmlAsset.PositionEnum} position
   */
exports.prototype['position'] = undefined;

  // Implement AudioAsset interface:
  /**
   * The type of asset - set to `audio` for audio assets.
   * @member {String} type
   * @default 'audio'
   */
exports.prototype['type'] = 'audio';

  /**
   * The audio source URL. The URL must be publicly accessible or include credentials.
   * @member {String} src
   */
exports.prototype['src'] = undefined;

  /**
   * The start trim point of the audio clip, in seconds (defaults to 0). Audio will start from the in trim point. The audio will play until the file ends or the Clip length is reached.
   * @member {Number} trim
   */
exports.prototype['trim'] = undefined;

  /**
   * Set the volume for the audio clip between 0 and 1 where 0 is muted and 1 is full volume (defaults to 1).
   * @member {Number} volume
   */
exports.prototype['volume'] = undefined;

  /**
   * The effect to apply to the audio asset <ul>   <li>`fadeIn` - fade volume in only</li>   <li>`fadeOut` - fade volume out only</li>   <li>`fadeInFadeOut` - fade volume in and out</li> </ul>
   * @member {module:model/AudioAsset.EffectEnum} effect
   */
exports.prototype['effect'] = undefined;

  // Implement LumaAsset interface:
  /**
   * The type of asset - set to `luma` for luma mattes.
   * @member {String} type
   * @default 'luma'
   */
exports.prototype['type'] = 'luma';

  /**
   * The luma matte source URL. The URL must be publicly accessible or include credentials.
   * @member {String} src
   */
exports.prototype['src'] = undefined;

  /**
   * The start trim point of the luma matte clip, in seconds (defaults to 0). Videos will start from the in trim point. A luma matte video will play until the file ends or the Clip length is reached.
   * @member {Number} trim
   */
exports.prototype['trim'] = undefined;


  /**
   * Returns The type of asset - set to `luma` for luma mattes.
   * @return {String}
   */
  exports.prototype.getType = function() {
    return this['type'];
  }

  /**
   * Sets The type of asset - set to `luma` for luma mattes.
   * @param {String} type The type of asset - set to `luma` for luma mattes.
   */
  exports.prototype.setType = function(type) {
    this['type'] = type;
    return this;
  }


  /**
   * Returns The luma matte source URL. The URL must be publicly accessible or include credentials.
   * @return {String}
   */
  exports.prototype.getSrc = function() {
    return this['src'];
  }

  /**
   * Sets The luma matte source URL. The URL must be publicly accessible or include credentials.
   * @param {String} src The luma matte source URL. The URL must be publicly accessible or include credentials.
   */
  exports.prototype.setSrc = function(src) {
    this['src'] = src;
    return this;
  }


  /**
   * Returns The start trim point of the luma matte clip, in seconds (defaults to 0). Videos will start from the in trim point. A luma matte video will play until the file ends or the Clip length is reached.
   * @return {Number}
   */
  exports.prototype.getTrim = function() {
    return this['trim'];
  }

  /**
   * Sets The start trim point of the luma matte clip, in seconds (defaults to 0). Videos will start from the in trim point. A luma matte video will play until the file ends or the Clip length is reached.
   * @param {Number} trim The start trim point of the luma matte clip, in seconds (defaults to 0). Videos will start from the in trim point. A luma matte video will play until the file ends or the Clip length is reached.
   */
  exports.prototype.setTrim = function(trim) {
    this['trim'] = trim;
    return this;
  }


  /**
   * Returns Set the volume for the audio clip between 0 and 1 where 0 is muted and 1 is full volume (defaults to 1).
   * @return {Number}
   */
  exports.prototype.getVolume = function() {
    return this['volume'];
  }

  /**
   * Sets Set the volume for the audio clip between 0 and 1 where 0 is muted and 1 is full volume (defaults to 1).
   * @param {Number} volume Set the volume for the audio clip between 0 and 1 where 0 is muted and 1 is full volume (defaults to 1).
   */
  exports.prototype.setVolume = function(volume) {
    this['volume'] = volume;
    return this;
  }


  /**
   * Returns The volume effect to apply to the video asset <ul>   <li>`fadeIn` - fade volume in only</li>   <li>`fadeOut` - fade volume out only</li>   <li>`fadeInFadeOut` - fade volume in and out</li> </ul>
   * @return {module:model/Asset.VolumeEffectEnum}
   */
  exports.prototype.getVolumeEffect = function() {
    return this['volumeEffect'];
  }

  /**
   * Sets The volume effect to apply to the video asset <ul>   <li>`fadeIn` - fade volume in only</li>   <li>`fadeOut` - fade volume out only</li>   <li>`fadeInFadeOut` - fade volume in and out</li> </ul>
   * @param {module:model/Asset.VolumeEffectEnum} volumeEffect The volume effect to apply to the video asset <ul>   <li>`fadeIn` - fade volume in only</li>   <li>`fadeOut` - fade volume out only</li>   <li>`fadeInFadeOut` - fade volume in and out</li> </ul>
   */
  exports.prototype.setVolumeEffect = function(volumeEffect) {
    this['volumeEffect'] = volumeEffect;
    return this;
  }


  /**
   * @return {module:model/Crop}
   */
  exports.prototype.getCrop = function() {
    return this['crop'];
  }

  /**
   * @param {module:model/Crop} crop
   */
  exports.prototype.setCrop = function(crop) {
    this['crop'] = crop;
    return this;
  }


  /**
   * Returns The title text string - i.e. \"My Title\".
   * @return {String}
   */
  exports.prototype.getText = function() {
    return this['text'];
  }

  /**
   * Sets The title text string - i.e. \"My Title\".
   * @param {String} text The title text string - i.e. \"My Title\".
   */
  exports.prototype.setText = function(text) {
    this['text'] = text;
    return this;
  }


  /**
   * Returns Uses a preset to apply font properties and styling to the title. <ul>   <li>`minimal`</li>   <li>`blockbuster`</li>   <li>`vogue`</li>   <li>`sketchy`</li>   <li>`skinny`</li>   <li>`chunk`</li>   <li>`chunkLight`</li>   <li>`marker`</li>   <li>`future`</li>   <li>`subtitle`</li> </ul>
   * @return {module:model/Asset.StyleEnum}
   */
  exports.prototype.getStyle = function() {
    return this['style'];
  }

  /**
   * Sets Uses a preset to apply font properties and styling to the title. <ul>   <li>`minimal`</li>   <li>`blockbuster`</li>   <li>`vogue`</li>   <li>`sketchy`</li>   <li>`skinny`</li>   <li>`chunk`</li>   <li>`chunkLight`</li>   <li>`marker`</li>   <li>`future`</li>   <li>`subtitle`</li> </ul>
   * @param {module:model/Asset.StyleEnum} style Uses a preset to apply font properties and styling to the title. <ul>   <li>`minimal`</li>   <li>`blockbuster`</li>   <li>`vogue`</li>   <li>`sketchy`</li>   <li>`skinny`</li>   <li>`chunk`</li>   <li>`chunkLight`</li>   <li>`marker`</li>   <li>`future`</li>   <li>`subtitle`</li> </ul>
   */
  exports.prototype.setStyle = function(style) {
    this['style'] = style;
    return this;
  }


  /**
   * Returns Set the text color using hexadecimal color notation. Transparency is supported by setting the first two characters of the hex string (opposite to HTML),  i.e. #80ffffff will be white with  50% transparency.
   * @return {String}
   */
  exports.prototype.getColor = function() {
    return this['color'];
  }

  /**
   * Sets Set the text color using hexadecimal color notation. Transparency is supported by setting the first two characters of the hex string (opposite to HTML),  i.e. #80ffffff will be white with  50% transparency.
   * @param {String} color Set the text color using hexadecimal color notation. Transparency is supported by setting the first two characters of the hex string (opposite to HTML),  i.e. #80ffffff will be white with  50% transparency.
   */
  exports.prototype.setColor = function(color) {
    this['color'] = color;
    return this;
  }


  /**
   * Returns Set the relative size of the text using predefined sizes from xx-small to xx-large. <ul>   <li>`xx-small`</li>   <li>`x-small`</li>   <li>`small`</li>   <li>`medium`</li>   <li>`large`</li>   <li>`x-large`</li>   <li>`xx-large`</li> </ul>
   * @return {module:model/Asset.SizeEnum}
   */
  exports.prototype.getSize = function() {
    return this['size'];
  }

  /**
   * Sets Set the relative size of the text using predefined sizes from xx-small to xx-large. <ul>   <li>`xx-small`</li>   <li>`x-small`</li>   <li>`small`</li>   <li>`medium`</li>   <li>`large`</li>   <li>`x-large`</li>   <li>`xx-large`</li> </ul>
   * @param {module:model/Asset.SizeEnum} size Set the relative size of the text using predefined sizes from xx-small to xx-large. <ul>   <li>`xx-small`</li>   <li>`x-small`</li>   <li>`small`</li>   <li>`medium`</li>   <li>`large`</li>   <li>`x-large`</li>   <li>`xx-large`</li> </ul>
   */
  exports.prototype.setSize = function(size) {
    this['size'] = size;
    return this;
  }


  /**
   * Returns Apply a background color behind the HTML bounding box using. Set the text color using hexadecimal  color notation. Transparency is supported by setting the first two characters of the hex string  (opposite to HTML), i.e. #80ffffff will be white with 50% transparency.
   * @return {String}
   */
  exports.prototype.getBackground = function() {
    return this['background'];
  }

  /**
   * Sets Apply a background color behind the HTML bounding box using. Set the text color using hexadecimal  color notation. Transparency is supported by setting the first two characters of the hex string  (opposite to HTML), i.e. #80ffffff will be white with 50% transparency.
   * @param {String} background Apply a background color behind the HTML bounding box using. Set the text color using hexadecimal  color notation. Transparency is supported by setting the first two characters of the hex string  (opposite to HTML), i.e. #80ffffff will be white with 50% transparency.
   */
  exports.prototype.setBackground = function(background) {
    this['background'] = background;
    return this;
  }


  /**
   * Returns Place the HTML in one of nine predefined positions within the HTML area. <ul>   <li>`top` - top (center)</li>   <li>`topRight` - top right</li>   <li>`right` - right (center)</li>   <li>`bottomRight` - bottom right</li>   <li>`bottom` - bottom (center)</li>   <li>`bottomLeft` - bottom left</li>   <li>`left` - left (center)</li>   <li>`topLeft` - top left</li>   <li>`center` - center</li> </ul>
   * @return {module:model/Asset.PositionEnum}
   */
  exports.prototype.getPosition = function() {
    return this['position'];
  }

  /**
   * Sets Place the HTML in one of nine predefined positions within the HTML area. <ul>   <li>`top` - top (center)</li>   <li>`topRight` - top right</li>   <li>`right` - right (center)</li>   <li>`bottomRight` - bottom right</li>   <li>`bottom` - bottom (center)</li>   <li>`bottomLeft` - bottom left</li>   <li>`left` - left (center)</li>   <li>`topLeft` - top left</li>   <li>`center` - center</li> </ul>
   * @param {module:model/Asset.PositionEnum} position Place the HTML in one of nine predefined positions within the HTML area. <ul>   <li>`top` - top (center)</li>   <li>`topRight` - top right</li>   <li>`right` - right (center)</li>   <li>`bottomRight` - bottom right</li>   <li>`bottom` - bottom (center)</li>   <li>`bottomLeft` - bottom left</li>   <li>`left` - left (center)</li>   <li>`topLeft` - top left</li>   <li>`center` - center</li> </ul>
   */
  exports.prototype.setPosition = function(position) {
    this['position'] = position;
    return this;
  }


  /**
   * @return {module:model/Offset}
   */
  exports.prototype.getOffset = function() {
    return this['offset'];
  }

  /**
   * @param {module:model/Offset} offset
   */
  exports.prototype.setOffset = function(offset) {
    this['offset'] = offset;
    return this;
  }


  /**
   * Returns The HTML text string. See list of [supported HTML tags](https://shotstack.io/docs/guide/architecting-an-application/html-support#supported-html-tags).
   * @return {String}
   */
  exports.prototype.getHtml = function() {
    return this['html'];
  }

  /**
   * Sets The HTML text string. See list of [supported HTML tags](https://shotstack.io/docs/guide/architecting-an-application/html-support#supported-html-tags).
   * @param {String} html The HTML text string. See list of [supported HTML tags](https://shotstack.io/docs/guide/architecting-an-application/html-support#supported-html-tags).
   */
  exports.prototype.setHtml = function(html) {
    this['html'] = html;
    return this;
  }


  /**
   * Returns The CSS text string to apply styling to the HTML. See list of  [support CSS properties](https://shotstack.io/docs/guide/architecting-an-application/html-support#supported-css-properties).
   * @return {String}
   */
  exports.prototype.getCss = function() {
    return this['css'];
  }

  /**
   * Sets The CSS text string to apply styling to the HTML. See list of  [support CSS properties](https://shotstack.io/docs/guide/architecting-an-application/html-support#supported-css-properties).
   * @param {String} css The CSS text string to apply styling to the HTML. See list of  [support CSS properties](https://shotstack.io/docs/guide/architecting-an-application/html-support#supported-css-properties).
   */
  exports.prototype.setCss = function(css) {
    this['css'] = css;
    return this;
  }


  /**
   * Returns Set the width of the HTML asset bounding box in pixels. Text will wrap to fill the bounding box.
   * @return {Number}
   */
  exports.prototype.getWidth = function() {
    return this['width'];
  }

  /**
   * Sets Set the width of the HTML asset bounding box in pixels. Text will wrap to fill the bounding box.
   * @param {Number} width Set the width of the HTML asset bounding box in pixels. Text will wrap to fill the bounding box.
   */
  exports.prototype.setWidth = function(width) {
    this['width'] = width;
    return this;
  }


  /**
   * Returns Set the width of the HTML asset bounding box in pixels. Text and elements will be masked if they exceed the  height of the bounding box.
   * @return {Number}
   */
  exports.prototype.getHeight = function() {
    return this['height'];
  }

  /**
   * Sets Set the width of the HTML asset bounding box in pixels. Text and elements will be masked if they exceed the  height of the bounding box.
   * @param {Number} height Set the width of the HTML asset bounding box in pixels. Text and elements will be masked if they exceed the  height of the bounding box.
   */
  exports.prototype.setHeight = function(height) {
    this['height'] = height;
    return this;
  }


  /**
   * Returns The effect to apply to the audio asset <ul>   <li>`fadeIn` - fade volume in only</li>   <li>`fadeOut` - fade volume out only</li>   <li>`fadeInFadeOut` - fade volume in and out</li> </ul>
   * @return {module:model/Asset.EffectEnum}
   */
  exports.prototype.getEffect = function() {
    return this['effect'];
  }

  /**
   * Sets The effect to apply to the audio asset <ul>   <li>`fadeIn` - fade volume in only</li>   <li>`fadeOut` - fade volume out only</li>   <li>`fadeInFadeOut` - fade volume in and out</li> </ul>
   * @param {module:model/Asset.EffectEnum} effect The effect to apply to the audio asset <ul>   <li>`fadeIn` - fade volume in only</li>   <li>`fadeOut` - fade volume out only</li>   <li>`fadeInFadeOut` - fade volume in and out</li> </ul>
   */
  exports.prototype.setEffect = function(effect) {
    this['effect'] = effect;
    return this;
  }


  /**
   * Allowed values for the <code>volumeEffect</code> property.
   * @enum {String}
   * @readonly
   */
  exports.VolumeEffectEnum = {
    /**
     * value: "fadeIn"
     * @const
     */
    "fadeIn": "fadeIn",
    /**
     * value: "fadeOut"
     * @const
     */
    "fadeOut": "fadeOut",
    /**
     * value: "fadeInFadeOut"
     * @const
     */
    "fadeInFadeOut": "fadeInFadeOut"  };

  /**
   * Allowed values for the <code>style</code> property.
   * @enum {String}
   * @readonly
   */
  exports.StyleEnum = {
    /**
     * value: "minimal"
     * @const
     */
    "minimal": "minimal",
    /**
     * value: "blockbuster"
     * @const
     */
    "blockbuster": "blockbuster",
    /**
     * value: "vogue"
     * @const
     */
    "vogue": "vogue",
    /**
     * value: "sketchy"
     * @const
     */
    "sketchy": "sketchy",
    /**
     * value: "skinny"
     * @const
     */
    "skinny": "skinny",
    /**
     * value: "chunk"
     * @const
     */
    "chunk": "chunk",
    /**
     * value: "chunkLight"
     * @const
     */
    "chunkLight": "chunkLight",
    /**
     * value: "marker"
     * @const
     */
    "marker": "marker",
    /**
     * value: "future"
     * @const
     */
    "future": "future",
    /**
     * value: "subtitle"
     * @const
     */
    "subtitle": "subtitle"  };

  /**
   * Allowed values for the <code>size</code> property.
   * @enum {String}
   * @readonly
   */
  exports.SizeEnum = {
    /**
     * value: "xx-small"
     * @const
     */
    "xx-small": "xx-small",
    /**
     * value: "x-small"
     * @const
     */
    "x-small": "x-small",
    /**
     * value: "small"
     * @const
     */
    "small": "small",
    /**
     * value: "medium"
     * @const
     */
    "medium": "medium",
    /**
     * value: "large"
     * @const
     */
    "large": "large",
    /**
     * value: "x-large"
     * @const
     */
    "x-large": "x-large",
    /**
     * value: "xx-large"
     * @const
     */
    "xx-large": "xx-large"  };

  /**
   * Allowed values for the <code>position</code> property.
   * @enum {String}
   * @readonly
   */
  exports.PositionEnum = {
    /**
     * value: "top"
     * @const
     */
    "top": "top",
    /**
     * value: "topRight"
     * @const
     */
    "topRight": "topRight",
    /**
     * value: "right"
     * @const
     */
    "right": "right",
    /**
     * value: "bottomRight"
     * @const
     */
    "bottomRight": "bottomRight",
    /**
     * value: "bottom"
     * @const
     */
    "bottom": "bottom",
    /**
     * value: "bottomLeft"
     * @const
     */
    "bottomLeft": "bottomLeft",
    /**
     * value: "left"
     * @const
     */
    "left": "left",
    /**
     * value: "topLeft"
     * @const
     */
    "topLeft": "topLeft",
    /**
     * value: "center"
     * @const
     */
    "center": "center"  };

  /**
   * Allowed values for the <code>effect</code> property.
   * @enum {String}
   * @readonly
   */
  exports.EffectEnum = {
    /**
     * value: "fadeIn"
     * @const
     */
    "fadeIn": "fadeIn",
    /**
     * value: "fadeOut"
     * @const
     */
    "fadeOut": "fadeOut",
    /**
     * value: "fadeInFadeOut"
     * @const
     */
    "fadeInFadeOut": "fadeInFadeOut"  };


  return exports;
}));


