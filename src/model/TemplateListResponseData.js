/**
 * Shotstack
 * Official Node SDK for the Shotstack Cloud Video Editing API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TemplateListResponseItem from './TemplateListResponseItem';

/**
 * The TemplateListResponseData model module.
 * @module model/TemplateListResponseData
 * @version 0.2.6
 */
class TemplateListResponseData {
    /**
     * Constructs a new <code>TemplateListResponseData</code>.
     * The response data returned with the [TemplateListResponse](#tocs_templatelistresponse).
     * @alias module:model/TemplateListResponseData
     * @param owner {String} The owner id of the templates.
     * @param templates {Array.<module:model/TemplateListResponseItem>} The list of templates.
     */
    constructor(owner, templates) { 
        
        TemplateListResponseData.initialize(this, owner, templates);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, owner, templates) { 
        obj['owner'] = owner;
        obj['templates'] = templates;
    }

    /**
     * Constructs a <code>TemplateListResponseData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TemplateListResponseData} obj Optional instance to populate.
     * @return {module:model/TemplateListResponseData} The populated <code>TemplateListResponseData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TemplateListResponseData();

            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], 'String');
            }
            if (data.hasOwnProperty('templates')) {
                obj['templates'] = ApiClient.convertToType(data['templates'], [TemplateListResponseItem]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TemplateListResponseData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TemplateListResponseData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TemplateListResponseData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['owner'] && !(typeof data['owner'] === 'string' || data['owner'] instanceof String)) {
            throw new Error("Expected the field `owner` to be a primitive type in the JSON string but got " + data['owner']);
        }
        if (data['templates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['templates'])) {
                throw new Error("Expected the field `templates` to be an array in the JSON data but got " + data['templates']);
            }
            // validate the optional field `templates` (array)
            for (const item of data['templates']) {
                TemplateListResponseItem.validateJSON(item);
            };
        }

        return true;
    }

/**
     * Returns The owner id of the templates.
     * @return {String}
     */
    getOwner() {
        return this.owner;
    }

    /**
     * Sets The owner id of the templates.
     * @param {String} owner The owner id of the templates.
     */
    setOwner(owner) {
        this['owner'] = owner;
        return this;
    }
/**
     * Returns The list of templates.
     * @return {Array.<module:model/TemplateListResponseItem>}
     */
    getTemplates() {
        return this.templates;
    }

    /**
     * Sets The list of templates.
     * @param {Array.<module:model/TemplateListResponseItem>} templates The list of templates.
     */
    setTemplates(templates) {
        this['templates'] = templates;
        return this;
    }

}

TemplateListResponseData.RequiredProperties = ["owner", "templates"];

/**
 * The owner id of the templates.
 * @member {String} owner
 */
TemplateListResponseData.prototype['owner'] = undefined;

/**
 * The list of templates.
 * @member {Array.<module:model/TemplateListResponseItem>} templates
 */
TemplateListResponseData.prototype['templates'] = undefined;






export default TemplateListResponseData;

