/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.io/docs/guide/) documentation.  There are three API's, one for editing and generating assets (Edit API), one for managing hosted assets (Serve API) and one for ingesting and transforming source assets (Ingest API).  Each API has it's own base URL and collection of endpoints. Each API uses the same set of API keys.  **[Edit API](#shotstack-edit)** - [https://api.shotstack.io/edit/{version}](#)<br> Edit videos, images and audio assets in the cloud using a simple JSON schema and templates.  **[Serve API](#shotstack-serve)** - [https://api.shotstack.io/serve/{version}](#)<br> Inspect and manage the hosting of assets generated by the Edit and Ingest APIs.  **[Ingest API](#shotstack-ingest)** - [https://api.shotstack.io/ingest/{version}](#)<br> Ingest (upload, store and transform) source footage, images, audio and fonts to be used by the Edit API.  **[Create API](#shotstack-create)** - [https://api.shotstack.io/create/{version}](#)<br> Generate images, videos, voice overs and text using built in and third party generative AI providers. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudStorageDestinationOptions from './GoogleCloudStorageDestinationOptions';

/**
 * The GoogleCloudStorageDestination model module.
 * @module model/GoogleCloudStorageDestination
 * @version 0.2.6
 */
class GoogleCloudStorageDestination {
    /**
     * Constructs a new <code>GoogleCloudStorageDestination</code>.
     * Send videos and assets to a [Google Cloud Storage](https://cloud.google.com/storage) bucket. Send files with your own prefix and filename. Google Cloud credentials are required and added via the [dashboard](https://dashboard.shotstack.io/integrations/google-cloud-storage), not in the request.
     * @alias module:model/GoogleCloudStorageDestination
     * @param provider {String} The destination to send assets to - set to `google-cloud-storage` for Google Cloud Storage.
     */
    constructor(provider) { 
        
        GoogleCloudStorageDestination.initialize(this, provider);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, provider) { 
        obj['provider'] = provider || 'google-cloud-storage';
    }

    /**
     * Constructs a <code>GoogleCloudStorageDestination</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudStorageDestination} obj Optional instance to populate.
     * @return {module:model/GoogleCloudStorageDestination} The populated <code>GoogleCloudStorageDestination</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudStorageDestination();

            if (data.hasOwnProperty('provider')) {
                obj['provider'] = ApiClient.convertToType(data['provider'], 'String');
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = GoogleCloudStorageDestinationOptions.constructFromObject(data['options']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudStorageDestination</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudStorageDestination</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GoogleCloudStorageDestination.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['provider'] && !(typeof data['provider'] === 'string' || data['provider'] instanceof String)) {
            throw new Error("Expected the field `provider` to be a primitive type in the JSON string but got " + data['provider']);
        }
        // validate the optional field `options`
        if (data['options']) { // data not null
          GoogleCloudStorageDestinationOptions.validateJSON(data['options']);
        }

        return true;
    }

/**
     * Returns The destination to send assets to - set to `google-cloud-storage` for Google Cloud Storage.
     * @return {String}
     */
    getProvider() {
        return this.provider;
    }

    /**
     * Sets The destination to send assets to - set to `google-cloud-storage` for Google Cloud Storage.
     * @param {String} provider The destination to send assets to - set to `google-cloud-storage` for Google Cloud Storage.
     */
    setProvider(provider) {
        this['provider'] = provider;
        return this;
    }
/**
     * @return {module:model/GoogleCloudStorageDestinationOptions}
     */
    getOptions() {
        return this.options;
    }

    /**
     * @param {module:model/GoogleCloudStorageDestinationOptions} options
     */
    setOptions(options) {
        this['options'] = options;
        return this;
    }

}

GoogleCloudStorageDestination.RequiredProperties = ["provider"];

/**
 * The destination to send assets to - set to `google-cloud-storage` for Google Cloud Storage.
 * @member {String} provider
 * @default 'google-cloud-storage'
 */
GoogleCloudStorageDestination.prototype['provider'] = 'google-cloud-storage';

/**
 * @member {module:model/GoogleCloudStorageDestinationOptions} options
 */
GoogleCloudStorageDestination.prototype['options'] = undefined;






export default GoogleCloudStorageDestination;

