"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _Enhancements = _interopRequireDefault(require("./Enhancements"));
var _Size = _interopRequireDefault(require("./Size"));
var _Speed = _interopRequireDefault(require("./Speed"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Shotstack
 * Official Node SDK for the Shotstack Cloud Video Editing API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
 * The Rendition model module.
 * @module model/Rendition
 * @version 0.2.9
 */
var Rendition = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>Rendition</code>.
   * A rendition is a new output file that is generated from the source. The rendition can be encoded to a different format and have transformations applied to it such as resizing, cropping, etc...
   * @alias module:model/Rendition
   */
  function Rendition() {
    _classCallCheck(this, Rendition);
    Rendition.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  return _createClass(Rendition, [{
    key: "getFormat",
    value:
    /**
         * Returns The output format to encode the file to. You can only encode a file to the same type, i.e. a video to a video or an image to an image. You can't encode a video as an image. The following formats are available: <ul>   <li>`mp4` - mp4 video file (video only)</li>   <li>`webm` - webm video file (video only)</li>   <li>`mov` - mov video file (video only)</li>   <li>`avi` - avi video file (video only)</li>   <li>`mkv` - mkv video file (video only)</li>   <li>`ogv` - ogv video file (video only)</li>   <li>`wmv` - wmv video file (video only)</li>   <li>`avif` - avif video file (video only)</li>   <li>`gif` - animated gif file (video only)</li>   <li>`jpg` - jpg image file (image only)</li>   <li>`png` - png image file (image only)</li>   <li>`webp` - webp image file (image only)</li>   <li>`tif` - tif image file (image only)</li>   <li>`mp3` - mp3 audio file (audio only)</li>   <li>`wav` - wav audio file (audio only)</li> </ul>
         * @return {module:model/Rendition.FormatEnum}
         */
    function getFormat() {
      return this.format;
    }

    /**
     * Sets The output format to encode the file to. You can only encode a file to the same type, i.e. a video to a video or an image to an image. You can't encode a video as an image. The following formats are available: <ul>   <li>`mp4` - mp4 video file (video only)</li>   <li>`webm` - webm video file (video only)</li>   <li>`mov` - mov video file (video only)</li>   <li>`avi` - avi video file (video only)</li>   <li>`mkv` - mkv video file (video only)</li>   <li>`ogv` - ogv video file (video only)</li>   <li>`wmv` - wmv video file (video only)</li>   <li>`avif` - avif video file (video only)</li>   <li>`gif` - animated gif file (video only)</li>   <li>`jpg` - jpg image file (image only)</li>   <li>`png` - png image file (image only)</li>   <li>`webp` - webp image file (image only)</li>   <li>`tif` - tif image file (image only)</li>   <li>`mp3` - mp3 audio file (audio only)</li>   <li>`wav` - wav audio file (audio only)</li> </ul>
     * @param {module:model/Rendition.FormatEnum} format The output format to encode the file to. You can only encode a file to the same type, i.e. a video to a video or an image to an image. You can't encode a video as an image. The following formats are available: <ul>   <li>`mp4` - mp4 video file (video only)</li>   <li>`webm` - webm video file (video only)</li>   <li>`mov` - mov video file (video only)</li>   <li>`avi` - avi video file (video only)</li>   <li>`mkv` - mkv video file (video only)</li>   <li>`ogv` - ogv video file (video only)</li>   <li>`wmv` - wmv video file (video only)</li>   <li>`avif` - avif video file (video only)</li>   <li>`gif` - animated gif file (video only)</li>   <li>`jpg` - jpg image file (image only)</li>   <li>`png` - png image file (image only)</li>   <li>`webp` - webp image file (image only)</li>   <li>`tif` - tif image file (image only)</li>   <li>`mp3` - mp3 audio file (audio only)</li>   <li>`wav` - wav audio file (audio only)</li> </ul>
     */
  }, {
    key: "setFormat",
    value: function setFormat(format) {
      this['format'] = format;
      return this;
    }
    /**
         * @return {module:model/Size}
         */
  }, {
    key: "getSize",
    value: function getSize() {
      return this.size;
    }

    /**
     * @param {module:model/Size} size
     */
  }, {
    key: "setSize",
    value: function setSize(size) {
      this['size'] = size;
      return this;
    }
    /**
         * Returns Set how the rendition should be scaled and cropped when using a size with an aspect ratio that is different from the source. Fit applies to both videos and images. <ul>   <li>`crop` <b>(default)</b> - scale the rendition to fill the output area while maintaining the aspect ratio. The rendition will be cropped if it exceeds the bounds of the output.</li>   <li>`cover` - stretch the rendition to fill the output without maintaining the aspect ratio.</li>   <li>`contain` - fit the entire rendition within the output while maintaining the original aspect ratio.</li> </ul>
         * @return {module:model/Rendition.FitEnum}
         */
  }, {
    key: "getFit",
    value: function getFit() {
      return this.fit;
    }

    /**
     * Sets Set how the rendition should be scaled and cropped when using a size with an aspect ratio that is different from the source. Fit applies to both videos and images. <ul>   <li>`crop` <b>(default)</b> - scale the rendition to fill the output area while maintaining the aspect ratio. The rendition will be cropped if it exceeds the bounds of the output.</li>   <li>`cover` - stretch the rendition to fill the output without maintaining the aspect ratio.</li>   <li>`contain` - fit the entire rendition within the output while maintaining the original aspect ratio.</li> </ul>
     * @param {module:model/Rendition.FitEnum} fit Set how the rendition should be scaled and cropped when using a size with an aspect ratio that is different from the source. Fit applies to both videos and images. <ul>   <li>`crop` <b>(default)</b> - scale the rendition to fill the output area while maintaining the aspect ratio. The rendition will be cropped if it exceeds the bounds of the output.</li>   <li>`cover` - stretch the rendition to fill the output without maintaining the aspect ratio.</li>   <li>`contain` - fit the entire rendition within the output while maintaining the original aspect ratio.</li> </ul>
     */
  }, {
    key: "setFit",
    value: function setFit(fit) {
      this['fit'] = fit;
      return this;
    }
    /**
         * Returns The preset output resolution of the video or image. This is a convenience property that sets the width and height based on industry standard resolutions. The following resolutions are available: <ul>   <li>`preview` - 512px x 288px</li>   <li>`mobile` - 640px x 360px</li>   <li>`sd` - 1024px x 576px</li>   <li>`hd` - 1280px x 720px</li>   <li>`fhd` - 1920px x 1080px</li> </ul>
         * @return {module:model/Rendition.ResolutionEnum}
         */
  }, {
    key: "getResolution",
    value: function getResolution() {
      return this.resolution;
    }

    /**
     * Sets The preset output resolution of the video or image. This is a convenience property that sets the width and height based on industry standard resolutions. The following resolutions are available: <ul>   <li>`preview` - 512px x 288px</li>   <li>`mobile` - 640px x 360px</li>   <li>`sd` - 1024px x 576px</li>   <li>`hd` - 1280px x 720px</li>   <li>`fhd` - 1920px x 1080px</li> </ul>
     * @param {module:model/Rendition.ResolutionEnum} resolution The preset output resolution of the video or image. This is a convenience property that sets the width and height based on industry standard resolutions. The following resolutions are available: <ul>   <li>`preview` - 512px x 288px</li>   <li>`mobile` - 640px x 360px</li>   <li>`sd` - 1024px x 576px</li>   <li>`hd` - 1280px x 720px</li>   <li>`fhd` - 1920px x 1080px</li> </ul>
     */
  }, {
    key: "setResolution",
    value: function setResolution(resolution) {
      this['resolution'] = resolution;
      return this;
    }
    /**
         * Returns Adjust the visual quality of the video or image. The higher the value, the sharper the image quality but the larger file size and slower the encoding process. When specifying quality, the goal is to balance file size vs visual quality. Quality is a value between 1 and 100 where 1 is fully compressed with low image quality and 100 is close to lossless with high image quality and large file size. Sane values are between 50 and 75. Omitting the quality parameter will result in an asset optimised for encoding speed, file size and visual quality.
         * minimum: 1
         * maximum: 100
         * @return {Number}
         */
  }, {
    key: "getQuality",
    value: function getQuality() {
      return this.quality;
    }

    /**
     * Sets Adjust the visual quality of the video or image. The higher the value, the sharper the image quality but the larger file size and slower the encoding process. When specifying quality, the goal is to balance file size vs visual quality. Quality is a value between 1 and 100 where 1 is fully compressed with low image quality and 100 is close to lossless with high image quality and large file size. Sane values are between 50 and 75. Omitting the quality parameter will result in an asset optimised for encoding speed, file size and visual quality.
     * @param {Number} quality Adjust the visual quality of the video or image. The higher the value, the sharper the image quality but the larger file size and slower the encoding process. When specifying quality, the goal is to balance file size vs visual quality. Quality is a value between 1 and 100 where 1 is fully compressed with low image quality and 100 is close to lossless with high image quality and large file size. Sane values are between 50 and 75. Omitting the quality parameter will result in an asset optimised for encoding speed, file size and visual quality.
     */
  }, {
    key: "setQuality",
    value: function setQuality(quality) {
      this['quality'] = quality;
      return this;
    }
    /**
         * Returns Change the frame rate of a video asset. <ul>   <li>`12` - 12fps</li>   <li>`15` - 15fps</li>   <li>`24` - 24fps</li>   <li>`23.976` - 23.976fps</li>   <li>`25` (default) - 25fps</li>   <li>`29.97` - 29.97fps</li>   <li>`30` - 30fps</li>   <li>`48` - 48fps</li>   <li>`50` - 50fps</li>   <li>`59.94` - 59.94fps</li>   <li>`60` - 60fps</li> </ul>
         * @return {module:model/Rendition.FpsEnum}
         */
  }, {
    key: "getFps",
    value: function getFps() {
      return this.fps;
    }

    /**
     * Sets Change the frame rate of a video asset. <ul>   <li>`12` - 12fps</li>   <li>`15` - 15fps</li>   <li>`24` - 24fps</li>   <li>`23.976` - 23.976fps</li>   <li>`25` (default) - 25fps</li>   <li>`29.97` - 29.97fps</li>   <li>`30` - 30fps</li>   <li>`48` - 48fps</li>   <li>`50` - 50fps</li>   <li>`59.94` - 59.94fps</li>   <li>`60` - 60fps</li> </ul>
     * @param {module:model/Rendition.FpsEnum} fps Change the frame rate of a video asset. <ul>   <li>`12` - 12fps</li>   <li>`15` - 15fps</li>   <li>`24` - 24fps</li>   <li>`23.976` - 23.976fps</li>   <li>`25` (default) - 25fps</li>   <li>`29.97` - 29.97fps</li>   <li>`30` - 30fps</li>   <li>`48` - 48fps</li>   <li>`50` - 50fps</li>   <li>`59.94` - 59.94fps</li>   <li>`60` - 60fps</li> </ul>
     */
  }, {
    key: "setFps",
    value: function setFps(fps) {
      this['fps'] = fps;
      return this;
    }
    /**
         * @return {module:model/Speed}
         */
  }, {
    key: "getSpeed",
    value: function getSpeed() {
      return this.speed;
    }

    /**
     * @param {module:model/Speed} speed
     */
  }, {
    key: "setSpeed",
    value: function setSpeed(speed) {
      this['speed'] = speed;
      return this;
    }
    /**
         * Returns The keyframe interval is useful to optimize playback, seeking and smoother scrubbing in browsers. The value sets the number of frames between a keyframe. The lower the number, the larger the file. Try a value between 10 and 25 for smooth scrubbing.
         * minimum: 1
         * maximum: 300
         * @return {Number}
         */
  }, {
    key: "getKeyframeInterval",
    value: function getKeyframeInterval() {
      return this.keyframeInterval;
    }

    /**
     * Sets The keyframe interval is useful to optimize playback, seeking and smoother scrubbing in browsers. The value sets the number of frames between a keyframe. The lower the number, the larger the file. Try a value between 10 and 25 for smooth scrubbing.
     * @param {Number} keyframeInterval The keyframe interval is useful to optimize playback, seeking and smoother scrubbing in browsers. The value sets the number of frames between a keyframe. The lower the number, the larger the file. Try a value between 10 and 25 for smooth scrubbing.
     */
  }, {
    key: "setKeyframeInterval",
    value: function setKeyframeInterval(keyframeInterval) {
      this['keyframeInterval'] = keyframeInterval;
      return this;
    }
    /**
         * Returns Attempt to fix audio and video sync issues. This can occur when recording devices, such as smartphones and  web cams use compression techniques like [Variable Frame Rate](https://en.wikipedia.org/wiki/Variable_frame_rate)  (VFR) which can cause audio and video to go out of sync. This option will attempt to fix the sync issues.
         * @return {Boolean}
         */
  }, {
    key: "getFixOffset",
    value: function getFixOffset() {
      return this.fixOffset;
    }

    /**
     * Sets Attempt to fix audio and video sync issues. This can occur when recording devices, such as smartphones and  web cams use compression techniques like [Variable Frame Rate](https://en.wikipedia.org/wiki/Variable_frame_rate)  (VFR) which can cause audio and video to go out of sync. This option will attempt to fix the sync issues.
     * @param {Boolean} fixOffset Attempt to fix audio and video sync issues. This can occur when recording devices, such as smartphones and  web cams use compression techniques like [Variable Frame Rate](https://en.wikipedia.org/wiki/Variable_frame_rate)  (VFR) which can cause audio and video to go out of sync. This option will attempt to fix the sync issues.
     */
  }, {
    key: "setFixOffset",
    value: function setFixOffset(fixOffset) {
      this['fixOffset'] = fixOffset;
      return this;
    }
    /**
         * Returns Automatically reset the rotation of the video based on the orientation metadata in the video file. This is useful for videos recorded on smartphones that have orientation metadata that may not work correctly with certain video editing software, including the Shotstack Edit API.
         * @return {Boolean}
         */
  }, {
    key: "getFixRotation",
    value: function getFixRotation() {
      return this.fixRotation;
    }

    /**
     * Sets Automatically reset the rotation of the video based on the orientation metadata in the video file. This is useful for videos recorded on smartphones that have orientation metadata that may not work correctly with certain video editing software, including the Shotstack Edit API.
     * @param {Boolean} fixRotation Automatically reset the rotation of the video based on the orientation metadata in the video file. This is useful for videos recorded on smartphones that have orientation metadata that may not work correctly with certain video editing software, including the Shotstack Edit API.
     */
  }, {
    key: "setFixRotation",
    value: function setFixRotation(fixRotation) {
      this['fixRotation'] = fixRotation;
      return this;
    }
    /**
         * @return {module:model/Enhancements}
         */
  }, {
    key: "getEnhance",
    value: function getEnhance() {
      return this.enhance;
    }

    /**
     * @param {module:model/Enhancements} enhance
     */
  }, {
    key: "setEnhance",
    value: function setEnhance(enhance) {
      this['enhance'] = enhance;
      return this;
    }
    /**
         * Returns A custom name for the generated rendition file. The file extension will be automatically added based on the format of the rendition. If no filename is provided, the rendition ID will be used.
         * @return {String}
         */
  }, {
    key: "getFilename",
    value: function getFilename() {
      return this.filename;
    }

    /**
     * Sets A custom name for the generated rendition file. The file extension will be automatically added based on the format of the rendition. If no filename is provided, the rendition ID will be used.
     * @param {String} filename A custom name for the generated rendition file. The file extension will be automatically added based on the format of the rendition. If no filename is provided, the rendition ID will be used.
     */
  }, {
    key: "setFilename",
    value: function setFilename(filename) {
      this['filename'] = filename;
      return this;
    }
  }], [{
    key: "initialize",
    value: function initialize(obj) {}

    /**
     * Constructs a <code>Rendition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Rendition} obj Optional instance to populate.
     * @return {module:model/Rendition} The populated <code>Rendition</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new Rendition();
        if (data.hasOwnProperty('format')) {
          obj['format'] = _ApiClient["default"].convertToType(data['format'], 'String');
        }
        if (data.hasOwnProperty('size')) {
          obj['size'] = _Size["default"].constructFromObject(data['size']);
        }
        if (data.hasOwnProperty('fit')) {
          obj['fit'] = _ApiClient["default"].convertToType(data['fit'], 'String');
        }
        if (data.hasOwnProperty('resolution')) {
          obj['resolution'] = _ApiClient["default"].convertToType(data['resolution'], 'String');
        }
        if (data.hasOwnProperty('quality')) {
          obj['quality'] = _ApiClient["default"].convertToType(data['quality'], 'Number');
        }
        if (data.hasOwnProperty('fps')) {
          obj['fps'] = _ApiClient["default"].convertToType(data['fps'], 'Number');
        }
        if (data.hasOwnProperty('speed')) {
          obj['speed'] = _Speed["default"].constructFromObject(data['speed']);
        }
        if (data.hasOwnProperty('keyframeInterval')) {
          obj['keyframeInterval'] = _ApiClient["default"].convertToType(data['keyframeInterval'], 'Number');
        }
        if (data.hasOwnProperty('fixOffset')) {
          obj['fixOffset'] = _ApiClient["default"].convertToType(data['fixOffset'], 'Boolean');
        }
        if (data.hasOwnProperty('fixRotation')) {
          obj['fixRotation'] = _ApiClient["default"].convertToType(data['fixRotation'], 'Boolean');
        }
        if (data.hasOwnProperty('enhance')) {
          obj['enhance'] = _Enhancements["default"].constructFromObject(data['enhance']);
        }
        if (data.hasOwnProperty('filename')) {
          obj['filename'] = _ApiClient["default"].convertToType(data['filename'], 'String');
        }
      }
      return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Rendition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Rendition</code>.
     */
  }, {
    key: "validateJSON",
    value: function validateJSON(data) {
      // ensure the json data is a string
      if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
        throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
      }
      // validate the optional field `size`
      if (data['size']) {
        // data not null
        _Size["default"].validateJSON(data['size']);
      }
      // ensure the json data is a string
      if (data['fit'] && !(typeof data['fit'] === 'string' || data['fit'] instanceof String)) {
        throw new Error("Expected the field `fit` to be a primitive type in the JSON string but got " + data['fit']);
      }
      // ensure the json data is a string
      if (data['resolution'] && !(typeof data['resolution'] === 'string' || data['resolution'] instanceof String)) {
        throw new Error("Expected the field `resolution` to be a primitive type in the JSON string but got " + data['resolution']);
      }
      // validate the optional field `speed`
      if (data['speed']) {
        // data not null
        _Speed["default"].validateJSON(data['speed']);
      }
      // ensure the json data is a string
      if (data['filename'] && !(typeof data['filename'] === 'string' || data['filename'] instanceof String)) {
        throw new Error("Expected the field `filename` to be a primitive type in the JSON string but got " + data['filename']);
      }
      return true;
    }
  }]);
}();
/**
 * The output format to encode the file to. You can only encode a file to the same type, i.e. a video to a video or an image to an image. You can't encode a video as an image. The following formats are available: <ul>   <li>`mp4` - mp4 video file (video only)</li>   <li>`webm` - webm video file (video only)</li>   <li>`mov` - mov video file (video only)</li>   <li>`avi` - avi video file (video only)</li>   <li>`mkv` - mkv video file (video only)</li>   <li>`ogv` - ogv video file (video only)</li>   <li>`wmv` - wmv video file (video only)</li>   <li>`avif` - avif video file (video only)</li>   <li>`gif` - animated gif file (video only)</li>   <li>`jpg` - jpg image file (image only)</li>   <li>`png` - png image file (image only)</li>   <li>`webp` - webp image file (image only)</li>   <li>`tif` - tif image file (image only)</li>   <li>`mp3` - mp3 audio file (audio only)</li>   <li>`wav` - wav audio file (audio only)</li> </ul>
 * @member {module:model/Rendition.FormatEnum} format
 */
Rendition.prototype['format'] = undefined;

/**
 * @member {module:model/Size} size
 */
Rendition.prototype['size'] = undefined;

/**
 * Set how the rendition should be scaled and cropped when using a size with an aspect ratio that is different from the source. Fit applies to both videos and images. <ul>   <li>`crop` <b>(default)</b> - scale the rendition to fill the output area while maintaining the aspect ratio. The rendition will be cropped if it exceeds the bounds of the output.</li>   <li>`cover` - stretch the rendition to fill the output without maintaining the aspect ratio.</li>   <li>`contain` - fit the entire rendition within the output while maintaining the original aspect ratio.</li> </ul>
 * @member {module:model/Rendition.FitEnum} fit
 */
Rendition.prototype['fit'] = undefined;

/**
 * The preset output resolution of the video or image. This is a convenience property that sets the width and height based on industry standard resolutions. The following resolutions are available: <ul>   <li>`preview` - 512px x 288px</li>   <li>`mobile` - 640px x 360px</li>   <li>`sd` - 1024px x 576px</li>   <li>`hd` - 1280px x 720px</li>   <li>`fhd` - 1920px x 1080px</li> </ul>
 * @member {module:model/Rendition.ResolutionEnum} resolution
 */
Rendition.prototype['resolution'] = undefined;

/**
 * Adjust the visual quality of the video or image. The higher the value, the sharper the image quality but the larger file size and slower the encoding process. When specifying quality, the goal is to balance file size vs visual quality. Quality is a value between 1 and 100 where 1 is fully compressed with low image quality and 100 is close to lossless with high image quality and large file size. Sane values are between 50 and 75. Omitting the quality parameter will result in an asset optimised for encoding speed, file size and visual quality.
 * @member {Number} quality
 */
Rendition.prototype['quality'] = undefined;

/**
 * Change the frame rate of a video asset. <ul>   <li>`12` - 12fps</li>   <li>`15` - 15fps</li>   <li>`24` - 24fps</li>   <li>`23.976` - 23.976fps</li>   <li>`25` (default) - 25fps</li>   <li>`29.97` - 29.97fps</li>   <li>`30` - 30fps</li>   <li>`48` - 48fps</li>   <li>`50` - 50fps</li>   <li>`59.94` - 59.94fps</li>   <li>`60` - 60fps</li> </ul>
 * @member {module:model/Rendition.FpsEnum} fps
 */
Rendition.prototype['fps'] = undefined;

/**
 * @member {module:model/Speed} speed
 */
Rendition.prototype['speed'] = undefined;

/**
 * The keyframe interval is useful to optimize playback, seeking and smoother scrubbing in browsers. The value sets the number of frames between a keyframe. The lower the number, the larger the file. Try a value between 10 and 25 for smooth scrubbing.
 * @member {Number} keyframeInterval
 */
Rendition.prototype['keyframeInterval'] = undefined;

/**
 * Attempt to fix audio and video sync issues. This can occur when recording devices, such as smartphones and  web cams use compression techniques like [Variable Frame Rate](https://en.wikipedia.org/wiki/Variable_frame_rate)  (VFR) which can cause audio and video to go out of sync. This option will attempt to fix the sync issues.
 * @member {Boolean} fixOffset
 */
Rendition.prototype['fixOffset'] = undefined;

/**
 * Automatically reset the rotation of the video based on the orientation metadata in the video file. This is useful for videos recorded on smartphones that have orientation metadata that may not work correctly with certain video editing software, including the Shotstack Edit API.
 * @member {Boolean} fixRotation
 */
Rendition.prototype['fixRotation'] = undefined;

/**
 * @member {module:model/Enhancements} enhance
 */
Rendition.prototype['enhance'] = undefined;

/**
 * A custom name for the generated rendition file. The file extension will be automatically added based on the format of the rendition. If no filename is provided, the rendition ID will be used.
 * @member {String} filename
 */
Rendition.prototype['filename'] = undefined;

/**
 * Allowed values for the <code>format</code> property.
 * @enum {String}
 * @readonly
 */
Rendition['FormatEnum'] = {
  /**
   * value: "mp4"
   * @const
   */
  "mp4": "mp4",
  /**
   * value: "webm"
   * @const
   */
  "webm": "webm",
  /**
   * value: "mov"
   * @const
   */
  "mov": "mov",
  /**
   * value: "avi"
   * @const
   */
  "avi": "avi",
  /**
   * value: "mkv"
   * @const
   */
  "mkv": "mkv",
  /**
   * value: "ogv"
   * @const
   */
  "ogv": "ogv",
  /**
   * value: "wmv"
   * @const
   */
  "wmv": "wmv",
  /**
   * value: "avif"
   * @const
   */
  "avif": "avif",
  /**
   * value: "gif"
   * @const
   */
  "gif": "gif",
  /**
   * value: "mp3"
   * @const
   */
  "mp3": "mp3",
  /**
   * value: "wav"
   * @const
   */
  "wav": "wav",
  /**
   * value: "jpg"
   * @const
   */
  "jpg": "jpg",
  /**
   * value: "png"
   * @const
   */
  "png": "png",
  /**
   * value: "webp"
   * @const
   */
  "webp": "webp",
  /**
   * value: "tif"
   * @const
   */
  "tif": "tif"
};

/**
 * Allowed values for the <code>fit</code> property.
 * @enum {String}
 * @readonly
 */
Rendition['FitEnum'] = {
  /**
   * value: "cover"
   * @const
   */
  "cover": "cover",
  /**
   * value: "contain"
   * @const
   */
  "contain": "contain",
  /**
   * value: "crop"
   * @const
   */
  "crop": "crop"
};

/**
 * Allowed values for the <code>resolution</code> property.
 * @enum {String}
 * @readonly
 */
Rendition['ResolutionEnum'] = {
  /**
   * value: "preview"
   * @const
   */
  "preview": "preview",
  /**
   * value: "mobile"
   * @const
   */
  "mobile": "mobile",
  /**
   * value: "sd"
   * @const
   */
  "sd": "sd",
  /**
   * value: "hd"
   * @const
   */
  "hd": "hd",
  /**
   * value: "fhd"
   * @const
   */
  "fhd": "fhd"
};

/**
 * Allowed values for the <code>fps</code> property.
 * @enum {Number}
 * @readonly
 */
Rendition['FpsEnum'] = {
  /**
   * value: 12
   * @const
   */
  "12": 12,
  /**
   * value: 15
   * @const
   */
  "15": 15,
  /**
   * value: 23.976
   * @const
   */
  "23.976": 23.976,
  /**
   * value: 24
   * @const
   */
  "24": 24,
  /**
   * value: 25
   * @const
   */
  "25": 25,
  /**
   * value: 29.97
   * @const
   */
  "29.97": 29.97,
  /**
   * value: 30
   * @const
   */
  "30": 30,
  /**
   * value: 48
   * @const
   */
  "48": 48,
  /**
   * value: 50
   * @const
   */
  "50": 50,
  /**
   * value: 59.94
   * @const
   */
  "59.94": 59.94,
  /**
   * value: 60
   * @const
   */
  "60": 60
};
var _default = exports["default"] = Rendition;