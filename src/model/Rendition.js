/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.io/docs/guide/) documentation.  There are three API's, one for editing and generating assets (Edit API), one for managing hosted assets (Serve API) and one for ingesting and transforming source assets (Ingest API).  Each API has it's own base URL and collection of endpoints. Each API uses the same set of API keys.  **[Edit API](#shotstack-edit)** - [https://api.shotstack.io/edit/{version}](#)<br> Edit videos, images and audio assets in the cloud using a simple JSON schema and templates.  **[Serve API](#shotstack-serve)** - [https://api.shotstack.io/serve/{version}](#)<br> Inspect and manage the hosting of assets generated by the Edit and Ingest APIs.  **[Ingest API](#shotstack-ingest)** - [https://api.shotstack.io/ingest/{version}](#)<br> Ingest (upload, store and transform) source footage, images, audio and fonts to be used by the Edit API.  **[Create API](#shotstack-create)** - [https://api.shotstack.io/create/{version}](#)<br> Generate images, videos, voice overs and text using built in and third party generative AI providers. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Enhancements from './Enhancements';
import Size from './Size';
import Speed from './Speed';

/**
 * The Rendition model module.
 * @module model/Rendition
 * @version 0.2.6
 */
class Rendition {
    /**
     * Constructs a new <code>Rendition</code>.
     * A rendition is a new output file that is generated from the source. The rendition can be encoded to a different format and have transformations applied to it such as resizing, cropping, etc...
     * @alias module:model/Rendition
     */
    constructor() { 
        
        Rendition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Rendition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Rendition} obj Optional instance to populate.
     * @return {module:model/Rendition} The populated <code>Rendition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Rendition();

            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = Size.constructFromObject(data['size']);
            }
            if (data.hasOwnProperty('fit')) {
                obj['fit'] = ApiClient.convertToType(data['fit'], 'String');
            }
            if (data.hasOwnProperty('resolution')) {
                obj['resolution'] = ApiClient.convertToType(data['resolution'], 'String');
            }
            if (data.hasOwnProperty('quality')) {
                obj['quality'] = ApiClient.convertToType(data['quality'], 'Number');
            }
            if (data.hasOwnProperty('fps')) {
                obj['fps'] = ApiClient.convertToType(data['fps'], 'Number');
            }
            if (data.hasOwnProperty('speed')) {
                obj['speed'] = Speed.constructFromObject(data['speed']);
            }
            if (data.hasOwnProperty('keyframeInterval')) {
                obj['keyframeInterval'] = ApiClient.convertToType(data['keyframeInterval'], 'Number');
            }
            if (data.hasOwnProperty('enhance')) {
                obj['enhance'] = Enhancements.constructFromObject(data['enhance']);
            }
            if (data.hasOwnProperty('filename')) {
                obj['filename'] = ApiClient.convertToType(data['filename'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Rendition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Rendition</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // validate the optional field `size`
        if (data['size']) { // data not null
          Size.validateJSON(data['size']);
        }
        // ensure the json data is a string
        if (data['fit'] && !(typeof data['fit'] === 'string' || data['fit'] instanceof String)) {
            throw new Error("Expected the field `fit` to be a primitive type in the JSON string but got " + data['fit']);
        }
        // ensure the json data is a string
        if (data['resolution'] && !(typeof data['resolution'] === 'string' || data['resolution'] instanceof String)) {
            throw new Error("Expected the field `resolution` to be a primitive type in the JSON string but got " + data['resolution']);
        }
        // validate the optional field `speed`
        if (data['speed']) { // data not null
          Speed.validateJSON(data['speed']);
        }
        // ensure the json data is a string
        if (data['filename'] && !(typeof data['filename'] === 'string' || data['filename'] instanceof String)) {
            throw new Error("Expected the field `filename` to be a primitive type in the JSON string but got " + data['filename']);
        }

        return true;
    }

/**
     * Returns The output format to encode the file to. You can only encode a file to the same type, i.e. a video to a video or an image to an image. You can't encode a video as an image. The following formats are available: <ul>   <li>`mp4` - mp4 video file (video only)</li>   <li>`webm` - webm video file (video only)</li>   <li>`mov` - mov video file (video only)</li>   <li>`avi` - avi video file (video only)</li>   <li>`mkv` - mkv video file (video only)</li>   <li>`ogv` - ogv video file (video only)</li>   <li>`wmv` - wmv video file (video only)</li>   <li>`avif` - avif video file (video only)</li>   <li>`gif` - animated gif file (video only)</li>   <li>`jpg` - jpg image file (image only)</li>   <li>`png` - png image file (image only)</li>   <li>`webp` - webp image file (image only)</li>   <li>`tif` - tif image file (image only)</li>   <li>`mp3` - mp3 audio file (audio only)</li>   <li>`wav` - wav audio file (audio only)</li> </ul>
     * @return {module:model/Rendition.FormatEnum}
     */
    getFormat() {
        return this.format;
    }

    /**
     * Sets The output format to encode the file to. You can only encode a file to the same type, i.e. a video to a video or an image to an image. You can't encode a video as an image. The following formats are available: <ul>   <li>`mp4` - mp4 video file (video only)</li>   <li>`webm` - webm video file (video only)</li>   <li>`mov` - mov video file (video only)</li>   <li>`avi` - avi video file (video only)</li>   <li>`mkv` - mkv video file (video only)</li>   <li>`ogv` - ogv video file (video only)</li>   <li>`wmv` - wmv video file (video only)</li>   <li>`avif` - avif video file (video only)</li>   <li>`gif` - animated gif file (video only)</li>   <li>`jpg` - jpg image file (image only)</li>   <li>`png` - png image file (image only)</li>   <li>`webp` - webp image file (image only)</li>   <li>`tif` - tif image file (image only)</li>   <li>`mp3` - mp3 audio file (audio only)</li>   <li>`wav` - wav audio file (audio only)</li> </ul>
     * @param {module:model/Rendition.FormatEnum} format The output format to encode the file to. You can only encode a file to the same type, i.e. a video to a video or an image to an image. You can't encode a video as an image. The following formats are available: <ul>   <li>`mp4` - mp4 video file (video only)</li>   <li>`webm` - webm video file (video only)</li>   <li>`mov` - mov video file (video only)</li>   <li>`avi` - avi video file (video only)</li>   <li>`mkv` - mkv video file (video only)</li>   <li>`ogv` - ogv video file (video only)</li>   <li>`wmv` - wmv video file (video only)</li>   <li>`avif` - avif video file (video only)</li>   <li>`gif` - animated gif file (video only)</li>   <li>`jpg` - jpg image file (image only)</li>   <li>`png` - png image file (image only)</li>   <li>`webp` - webp image file (image only)</li>   <li>`tif` - tif image file (image only)</li>   <li>`mp3` - mp3 audio file (audio only)</li>   <li>`wav` - wav audio file (audio only)</li> </ul>
     */
    setFormat(format) {
        this['format'] = format;
        return this;
    }
/**
     * @return {module:model/Size}
     */
    getSize() {
        return this.size;
    }

    /**
     * @param {module:model/Size} size
     */
    setSize(size) {
        this['size'] = size;
        return this;
    }
/**
     * Returns Set how the rendition should be scaled and cropped when using a size with an aspect ratio that is different from the source. Fit applies to both videos and images. <ul>   <li>`crop` <b>(default)</b> - scale the rendition to fill the output area while maintaining the aspect ratio. The rendition will be cropped if it exceeds the bounds of the output.</li>   <li>`cover` - stretch the rendition to fill the output without maintaining the aspect ratio.</li>   <li>`contain` - fit the entire rendition within the output while maintaining the original aspect ratio.</li> </ul>
     * @return {module:model/Rendition.FitEnum}
     */
    getFit() {
        return this.fit;
    }

    /**
     * Sets Set how the rendition should be scaled and cropped when using a size with an aspect ratio that is different from the source. Fit applies to both videos and images. <ul>   <li>`crop` <b>(default)</b> - scale the rendition to fill the output area while maintaining the aspect ratio. The rendition will be cropped if it exceeds the bounds of the output.</li>   <li>`cover` - stretch the rendition to fill the output without maintaining the aspect ratio.</li>   <li>`contain` - fit the entire rendition within the output while maintaining the original aspect ratio.</li> </ul>
     * @param {module:model/Rendition.FitEnum} fit Set how the rendition should be scaled and cropped when using a size with an aspect ratio that is different from the source. Fit applies to both videos and images. <ul>   <li>`crop` <b>(default)</b> - scale the rendition to fill the output area while maintaining the aspect ratio. The rendition will be cropped if it exceeds the bounds of the output.</li>   <li>`cover` - stretch the rendition to fill the output without maintaining the aspect ratio.</li>   <li>`contain` - fit the entire rendition within the output while maintaining the original aspect ratio.</li> </ul>
     */
    setFit(fit) {
        this['fit'] = fit;
        return this;
    }
/**
     * Returns The preset output resolution of the video or image. This is a convenience property that sets the width and height based on industry standard resolutions. The following resolutions are available: <ul>   <li>`preview` - 512px x 288px</li>   <li>`mobile` - 640px x 360px</li>   <li>`sd` - 1024px x 576px</li>   <li>`hd` - 1280px x 720px</li>   <li>`fhd` - 1920px x 1080px</li> </ul>
     * @return {module:model/Rendition.ResolutionEnum}
     */
    getResolution() {
        return this.resolution;
    }

    /**
     * Sets The preset output resolution of the video or image. This is a convenience property that sets the width and height based on industry standard resolutions. The following resolutions are available: <ul>   <li>`preview` - 512px x 288px</li>   <li>`mobile` - 640px x 360px</li>   <li>`sd` - 1024px x 576px</li>   <li>`hd` - 1280px x 720px</li>   <li>`fhd` - 1920px x 1080px</li> </ul>
     * @param {module:model/Rendition.ResolutionEnum} resolution The preset output resolution of the video or image. This is a convenience property that sets the width and height based on industry standard resolutions. The following resolutions are available: <ul>   <li>`preview` - 512px x 288px</li>   <li>`mobile` - 640px x 360px</li>   <li>`sd` - 1024px x 576px</li>   <li>`hd` - 1280px x 720px</li>   <li>`fhd` - 1920px x 1080px</li> </ul>
     */
    setResolution(resolution) {
        this['resolution'] = resolution;
        return this;
    }
/**
     * Returns Adjust the visual quality of the video or image. The higher the value, the sharper the image quality but the larger file size and slower the encoding process. When specifying quality, the goal is to balance file size vs visual quality. Quality is a value between 1 and 100 where 1 is fully compressed with low image quality and 100 is close to lossless with high image quality and large file size. Sane values are between 50 and 75. Omitting the quality parameter will result in an asset optimised for encoding speed, file size and visual quality.
     * minimum: 1
     * maximum: 100
     * @return {Number}
     */
    getQuality() {
        return this.quality;
    }

    /**
     * Sets Adjust the visual quality of the video or image. The higher the value, the sharper the image quality but the larger file size and slower the encoding process. When specifying quality, the goal is to balance file size vs visual quality. Quality is a value between 1 and 100 where 1 is fully compressed with low image quality and 100 is close to lossless with high image quality and large file size. Sane values are between 50 and 75. Omitting the quality parameter will result in an asset optimised for encoding speed, file size and visual quality.
     * @param {Number} quality Adjust the visual quality of the video or image. The higher the value, the sharper the image quality but the larger file size and slower the encoding process. When specifying quality, the goal is to balance file size vs visual quality. Quality is a value between 1 and 100 where 1 is fully compressed with low image quality and 100 is close to lossless with high image quality and large file size. Sane values are between 50 and 75. Omitting the quality parameter will result in an asset optimised for encoding speed, file size and visual quality.
     */
    setQuality(quality) {
        this['quality'] = quality;
        return this;
    }
/**
     * Returns Change the frame rate of a video asset. <ul>   <li>`12` - 12fps</li>   <li>`15` - 15fps</li>   <li>`24` - 24fps</li>   <li>`23.976` - 23.976fps</li>   <li>`25` (default) - 25fps</li>   <li>`29.97` - 29.97fps</li>   <li>`30` - 30fps</li>   <li>`48` - 48fps</li>   <li>`50` - 50fps</li>   <li>`59.94` - 59.94fps</li>   <li>`60` - 60fps</li> </ul>
     * @return {module:model/Rendition.FpsEnum}
     */
    getFps() {
        return this.fps;
    }

    /**
     * Sets Change the frame rate of a video asset. <ul>   <li>`12` - 12fps</li>   <li>`15` - 15fps</li>   <li>`24` - 24fps</li>   <li>`23.976` - 23.976fps</li>   <li>`25` (default) - 25fps</li>   <li>`29.97` - 29.97fps</li>   <li>`30` - 30fps</li>   <li>`48` - 48fps</li>   <li>`50` - 50fps</li>   <li>`59.94` - 59.94fps</li>   <li>`60` - 60fps</li> </ul>
     * @param {module:model/Rendition.FpsEnum} fps Change the frame rate of a video asset. <ul>   <li>`12` - 12fps</li>   <li>`15` - 15fps</li>   <li>`24` - 24fps</li>   <li>`23.976` - 23.976fps</li>   <li>`25` (default) - 25fps</li>   <li>`29.97` - 29.97fps</li>   <li>`30` - 30fps</li>   <li>`48` - 48fps</li>   <li>`50` - 50fps</li>   <li>`59.94` - 59.94fps</li>   <li>`60` - 60fps</li> </ul>
     */
    setFps(fps) {
        this['fps'] = fps;
        return this;
    }
/**
     * @return {module:model/Speed}
     */
    getSpeed() {
        return this.speed;
    }

    /**
     * @param {module:model/Speed} speed
     */
    setSpeed(speed) {
        this['speed'] = speed;
        return this;
    }
/**
     * Returns The keyframe interval is useful to optimize playback, seeking and smoother scrubbing in browsers. The value sets the number of frames between a keyframe. The lower the number, the larger the file. Try a value between 10 and 25 for smooth scrubbing.
     * minimum: 1
     * maximum: 300
     * @return {Number}
     */
    getKeyframeInterval() {
        return this.keyframeInterval;
    }

    /**
     * Sets The keyframe interval is useful to optimize playback, seeking and smoother scrubbing in browsers. The value sets the number of frames between a keyframe. The lower the number, the larger the file. Try a value between 10 and 25 for smooth scrubbing.
     * @param {Number} keyframeInterval The keyframe interval is useful to optimize playback, seeking and smoother scrubbing in browsers. The value sets the number of frames between a keyframe. The lower the number, the larger the file. Try a value between 10 and 25 for smooth scrubbing.
     */
    setKeyframeInterval(keyframeInterval) {
        this['keyframeInterval'] = keyframeInterval;
        return this;
    }
/**
     * @return {module:model/Enhancements}
     */
    getEnhance() {
        return this.enhance;
    }

    /**
     * @param {module:model/Enhancements} enhance
     */
    setEnhance(enhance) {
        this['enhance'] = enhance;
        return this;
    }
/**
     * Returns A custom name for the generated rendition file. The file extension will be automatically added based on the format of the rendition. If no filename is provided, the rendition ID will be used.
     * @return {String}
     */
    getFilename() {
        return this.filename;
    }

    /**
     * Sets A custom name for the generated rendition file. The file extension will be automatically added based on the format of the rendition. If no filename is provided, the rendition ID will be used.
     * @param {String} filename A custom name for the generated rendition file. The file extension will be automatically added based on the format of the rendition. If no filename is provided, the rendition ID will be used.
     */
    setFilename(filename) {
        this['filename'] = filename;
        return this;
    }

}



/**
 * The output format to encode the file to. You can only encode a file to the same type, i.e. a video to a video or an image to an image. You can't encode a video as an image. The following formats are available: <ul>   <li>`mp4` - mp4 video file (video only)</li>   <li>`webm` - webm video file (video only)</li>   <li>`mov` - mov video file (video only)</li>   <li>`avi` - avi video file (video only)</li>   <li>`mkv` - mkv video file (video only)</li>   <li>`ogv` - ogv video file (video only)</li>   <li>`wmv` - wmv video file (video only)</li>   <li>`avif` - avif video file (video only)</li>   <li>`gif` - animated gif file (video only)</li>   <li>`jpg` - jpg image file (image only)</li>   <li>`png` - png image file (image only)</li>   <li>`webp` - webp image file (image only)</li>   <li>`tif` - tif image file (image only)</li>   <li>`mp3` - mp3 audio file (audio only)</li>   <li>`wav` - wav audio file (audio only)</li> </ul>
 * @member {module:model/Rendition.FormatEnum} format
 */
Rendition.prototype['format'] = undefined;

/**
 * @member {module:model/Size} size
 */
Rendition.prototype['size'] = undefined;

/**
 * Set how the rendition should be scaled and cropped when using a size with an aspect ratio that is different from the source. Fit applies to both videos and images. <ul>   <li>`crop` <b>(default)</b> - scale the rendition to fill the output area while maintaining the aspect ratio. The rendition will be cropped if it exceeds the bounds of the output.</li>   <li>`cover` - stretch the rendition to fill the output without maintaining the aspect ratio.</li>   <li>`contain` - fit the entire rendition within the output while maintaining the original aspect ratio.</li> </ul>
 * @member {module:model/Rendition.FitEnum} fit
 */
Rendition.prototype['fit'] = undefined;

/**
 * The preset output resolution of the video or image. This is a convenience property that sets the width and height based on industry standard resolutions. The following resolutions are available: <ul>   <li>`preview` - 512px x 288px</li>   <li>`mobile` - 640px x 360px</li>   <li>`sd` - 1024px x 576px</li>   <li>`hd` - 1280px x 720px</li>   <li>`fhd` - 1920px x 1080px</li> </ul>
 * @member {module:model/Rendition.ResolutionEnum} resolution
 */
Rendition.prototype['resolution'] = undefined;

/**
 * Adjust the visual quality of the video or image. The higher the value, the sharper the image quality but the larger file size and slower the encoding process. When specifying quality, the goal is to balance file size vs visual quality. Quality is a value between 1 and 100 where 1 is fully compressed with low image quality and 100 is close to lossless with high image quality and large file size. Sane values are between 50 and 75. Omitting the quality parameter will result in an asset optimised for encoding speed, file size and visual quality.
 * @member {Number} quality
 */
Rendition.prototype['quality'] = undefined;

/**
 * Change the frame rate of a video asset. <ul>   <li>`12` - 12fps</li>   <li>`15` - 15fps</li>   <li>`24` - 24fps</li>   <li>`23.976` - 23.976fps</li>   <li>`25` (default) - 25fps</li>   <li>`29.97` - 29.97fps</li>   <li>`30` - 30fps</li>   <li>`48` - 48fps</li>   <li>`50` - 50fps</li>   <li>`59.94` - 59.94fps</li>   <li>`60` - 60fps</li> </ul>
 * @member {module:model/Rendition.FpsEnum} fps
 */
Rendition.prototype['fps'] = undefined;

/**
 * @member {module:model/Speed} speed
 */
Rendition.prototype['speed'] = undefined;

/**
 * The keyframe interval is useful to optimize playback, seeking and smoother scrubbing in browsers. The value sets the number of frames between a keyframe. The lower the number, the larger the file. Try a value between 10 and 25 for smooth scrubbing.
 * @member {Number} keyframeInterval
 */
Rendition.prototype['keyframeInterval'] = undefined;

/**
 * @member {module:model/Enhancements} enhance
 */
Rendition.prototype['enhance'] = undefined;

/**
 * A custom name for the generated rendition file. The file extension will be automatically added based on the format of the rendition. If no filename is provided, the rendition ID will be used.
 * @member {String} filename
 */
Rendition.prototype['filename'] = undefined;





/**
 * Allowed values for the <code>format</code> property.
 * @enum {String}
 * @readonly
 */
Rendition['FormatEnum'] = {

    /**
     * value: "mp4"
     * @const
     */
    "mp4": "mp4",

    /**
     * value: "webm"
     * @const
     */
    "webm": "webm",

    /**
     * value: "mov"
     * @const
     */
    "mov": "mov",

    /**
     * value: "avi"
     * @const
     */
    "avi": "avi",

    /**
     * value: "mkv"
     * @const
     */
    "mkv": "mkv",

    /**
     * value: "ogv"
     * @const
     */
    "ogv": "ogv",

    /**
     * value: "wmv"
     * @const
     */
    "wmv": "wmv",

    /**
     * value: "avif"
     * @const
     */
    "avif": "avif",

    /**
     * value: "gif"
     * @const
     */
    "gif": "gif",

    /**
     * value: "mp3"
     * @const
     */
    "mp3": "mp3",

    /**
     * value: "wav"
     * @const
     */
    "wav": "wav",

    /**
     * value: "jpg"
     * @const
     */
    "jpg": "jpg",

    /**
     * value: "png"
     * @const
     */
    "png": "png",

    /**
     * value: "webp"
     * @const
     */
    "webp": "webp",

    /**
     * value: "tif"
     * @const
     */
    "tif": "tif"
};


/**
 * Allowed values for the <code>fit</code> property.
 * @enum {String}
 * @readonly
 */
Rendition['FitEnum'] = {

    /**
     * value: "cover"
     * @const
     */
    "cover": "cover",

    /**
     * value: "contain"
     * @const
     */
    "contain": "contain",

    /**
     * value: "crop"
     * @const
     */
    "crop": "crop"
};


/**
 * Allowed values for the <code>resolution</code> property.
 * @enum {String}
 * @readonly
 */
Rendition['ResolutionEnum'] = {

    /**
     * value: "preview"
     * @const
     */
    "preview": "preview",

    /**
     * value: "mobile"
     * @const
     */
    "mobile": "mobile",

    /**
     * value: "sd"
     * @const
     */
    "sd": "sd",

    /**
     * value: "hd"
     * @const
     */
    "hd": "hd",

    /**
     * value: "fhd"
     * @const
     */
    "fhd": "fhd"
};


/**
 * Allowed values for the <code>fps</code> property.
 * @enum {Number}
 * @readonly
 */
Rendition['FpsEnum'] = {

    /**
     * value: 12
     * @const
     */
    "12": 12,

    /**
     * value: 15
     * @const
     */
    "15": 15,

    /**
     * value: 23.976
     * @const
     */
    "23.976": 23.976,

    /**
     * value: 24
     * @const
     */
    "24": 24,

    /**
     * value: 25
     * @const
     */
    "25": 25,

    /**
     * value: 29.97
     * @const
     */
    "29.97": 29.97,

    /**
     * value: 30
     * @const
     */
    "30": 30,

    /**
     * value: 48
     * @const
     */
    "48": 48,

    /**
     * value: 50
     * @const
     */
    "50": 50,

    /**
     * value: 59.94
     * @const
     */
    "59.94": 59.94,

    /**
     * value: 60
     * @const
     */
    "60": 60
};



export default Rendition;

