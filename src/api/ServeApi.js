/**
 * Shotstack
 * Official Node SDK for the Shotstack Cloud Video Editing API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AssetRenderResponse from '../model/AssetRenderResponse';
import AssetResponse from '../model/AssetResponse';
import Transfer from '../model/Transfer';
import TransferResponse from '../model/TransferResponse';

/**
* Serve service.
* @module api/ServeApi
* @version 0.2.6
*/
export default class ServeApi {

    /**
    * Constructs a new ServeApi. 
    * @alias module:api/ServeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Delete Asset
     * Delete an asset by its asset id. If a render creates multiple assets, such as thumbnail and poster images, each asset must be deleted individually by the asset id.  **Base URL:** <a href=\"#\">https://api.shotstack.io/serve/{version}</a> 
     * @param {String} id The id of the asset in UUID format
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteAssetWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteAsset");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['DeveloperKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/assets/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Asset
     * Delete an asset by its asset id. If a render creates multiple assets, such as thumbnail and poster images, each asset must be deleted individually by the asset id.  **Base URL:** <a href=\"#\">https://api.shotstack.io/serve/{version}</a> 
     * @param {String} id The id of the asset in UUID format
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteAsset(id) {
      return this.deleteAssetWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Asset
     * The Serve API is used to interact with, and delete hosted assets including videos, images, audio files,  thumbnails and poster images. Use this endpoint to fetch an asset by asset id. Note that an asset id is unique for each asset and different from the render id.  **Base URL:** <a href=\"#\">https://api.shotstack.io/serve/{version}</a> 
     * @param {String} id The id of the asset in UUID format
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AssetResponse} and HTTP response
     */
    getAssetWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAsset");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['DeveloperKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssetResponse;
      return this.apiClient.callApi(
        '/assets/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Asset
     * The Serve API is used to interact with, and delete hosted assets including videos, images, audio files,  thumbnails and poster images. Use this endpoint to fetch an asset by asset id. Note that an asset id is unique for each asset and different from the render id.  **Base URL:** <a href=\"#\">https://api.shotstack.io/serve/{version}</a> 
     * @param {String} id The id of the asset in UUID format
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AssetResponse}
     */
    getAsset(id) {
      return this.getAssetWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Asset by Render ID
     * A render may generate more than one file, such as a video, thumbnail and poster image. When the assets are created the only known id is the render id returned by the original [render request](#render-video), status  request or webhook. This endpoint lets you look up one or more assets by the render id.  **Base URL:** <a href=\"#\">https://api.shotstack.io/serve/{version}</a> 
     * @param {String} id The render id associated with the asset in UUID format
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AssetRenderResponse} and HTTP response
     */
    getAssetByRenderIdWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAssetByRenderId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['DeveloperKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssetRenderResponse;
      return this.apiClient.callApi(
        '/assets/render/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Asset by Render ID
     * A render may generate more than one file, such as a video, thumbnail and poster image. When the assets are created the only known id is the render id returned by the original [render request](#render-video), status  request or webhook. This endpoint lets you look up one or more assets by the render id.  **Base URL:** <a href=\"#\">https://api.shotstack.io/serve/{version}</a> 
     * @param {String} id The render id associated with the asset in UUID format
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AssetRenderResponse}
     */
    getAssetByRenderId(id) {
      return this.getAssetByRenderIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Transfer Asset
     * Transfer a file from any publicly available URL to one or more Serve API [destinations](#tocs_destinations).  **Base URL:** <a href=\"#\">https://api.shotstack.io/serve/{version}</a> 
     * @param {module:model/Transfer} transfer Fetch an asset from a URL and send it to one or more destinations.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TransferResponse} and HTTP response
     */
    postServeAssetWithHttpInfo(transfer) {
      let postBody = transfer;
      // verify the required parameter 'transfer' is set
      if (transfer === undefined || transfer === null) {
        throw new Error("Missing the required parameter 'transfer' when calling postServeAsset");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['DeveloperKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransferResponse;
      return this.apiClient.callApi(
        '/assets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Transfer Asset
     * Transfer a file from any publicly available URL to one or more Serve API [destinations](#tocs_destinations).  **Base URL:** <a href=\"#\">https://api.shotstack.io/serve/{version}</a> 
     * @param {module:model/Transfer} transfer Fetch an asset from a URL and send it to one or more destinations.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TransferResponse}
     */
    postServeAsset(transfer) {
      return this.postServeAssetWithHttpInfo(transfer)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
