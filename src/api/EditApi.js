/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.io/docs/guide/) documentation.  There are three API's, one for editing and generating assets (Edit API), one for managing hosted assets (Serve API) and one for ingesting and transforming source assets (Ingest API).  Each API has it's own base URL and collection of endpoints. Each API uses the same set of API keys.  **[Edit API](#shotstack-edit)** - [https://api.shotstack.io/edit/{version}](#)<br> Edit videos, images and audio assets in the cloud using a simple JSON schema and templates.  **[Serve API](#shotstack-serve)** - [https://api.shotstack.io/serve/{version}](#)<br> Inspect and manage the hosting of assets generated by the Edit and Ingest APIs.  **[Ingest API](#shotstack-ingest)** - [https://api.shotstack.io/ingest/{version}](#)<br> Ingest (upload, store and transform) source footage, images, audio and fonts to be used by the Edit API.  **[Create API](#shotstack-create)** - [https://api.shotstack.io/create/{version}](#)<br> Generate images, videos, voice overs and text using built in and third party generative AI providers. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Edit from '../model/Edit';
import ProbeResponse from '../model/ProbeResponse';
import QueuedResponse from '../model/QueuedResponse';
import RenderResponse from '../model/RenderResponse';
import Template from '../model/Template';
import TemplateDataResponse from '../model/TemplateDataResponse';
import TemplateListResponse from '../model/TemplateListResponse';
import TemplateRender from '../model/TemplateRender';
import TemplateResponse from '../model/TemplateResponse';

/**
* Edit service.
* @module api/EditApi
* @version 0.2.6
*/
export default class EditApi {

    /**
    * Constructs a new EditApi. 
    * @alias module:api/EditApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Delete Template
     * Delete a template by its template id.  **Base URL:** <a href=\"#\">https://api.shotstack.io/edit/{version}</a> 
     * @param {String} id The id of the template in UUID format
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteTemplateWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTemplate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['DeveloperKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/templates/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Template
     * Delete a template by its template id.  **Base URL:** <a href=\"#\">https://api.shotstack.io/edit/{version}</a> 
     * @param {String} id The id of the template in UUID format
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteTemplate(id) {
      return this.deleteTemplateWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Render Status
     * Get the rendering status, temporary asset url and details of a render by ID.  **Base URL:** <a href=\"#\">https://api.shotstack.io/edit/{version}</a> 
     * @param {String} id The id of the timeline render task in UUID format
     * @param {Object} opts Optional parameters
     * @param {Boolean} [data] Include the data parameter in the response. The data parameter includes the original timeline, output and other settings sent to the API.<br><br><b>Note:</b> the default is currently `true`, this is deprecated and the default will soon be `false`. If you rely on the data being returned in the response you should explicitly set the parameter to `true`.
     * @param {Boolean} [merged] Used when data is set to true, it will show the [merge fields](#tocs_mergefield) merged in to the data response.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RenderResponse} and HTTP response
     */
    getRenderWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRender");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'data': opts['data'],
        'merged': opts['merged']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['DeveloperKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RenderResponse;
      return this.apiClient.callApi(
        '/render/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Render Status
     * Get the rendering status, temporary asset url and details of a render by ID.  **Base URL:** <a href=\"#\">https://api.shotstack.io/edit/{version}</a> 
     * @param {String} id The id of the timeline render task in UUID format
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.data Include the data parameter in the response. The data parameter includes the original timeline, output and other settings sent to the API.<br><br><b>Note:</b> the default is currently `true`, this is deprecated and the default will soon be `false`. If you rely on the data being returned in the response you should explicitly set the parameter to `true`.
     * @param {Boolean} opts.merged Used when data is set to true, it will show the [merge fields](#tocs_mergefield) merged in to the data response.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RenderResponse}
     */
    getRender(id, opts) {
      return this.getRenderWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve Template
     * Retrieve a template by template id.  **Base URL:** <a href=\"#\">https://api.shotstack.io/edit/{version}</a> 
     * @param {String} id The id of the template in UUID format
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateDataResponse} and HTTP response
     */
    getTemplateWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTemplate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['DeveloperKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TemplateDataResponse;
      return this.apiClient.callApi(
        '/templates/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve Template
     * Retrieve a template by template id.  **Base URL:** <a href=\"#\">https://api.shotstack.io/edit/{version}</a> 
     * @param {String} id The id of the template in UUID format
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateDataResponse}
     */
    getTemplate(id) {
      return this.getTemplateWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Templates
     * Retrieve a list of templates stored against a users account and stage.  **Base URL:** <a href=\"#\">https://api.shotstack.io/edit/{version}</a> 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateListResponse} and HTTP response
     */
    getTemplatesWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['DeveloperKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TemplateListResponse;
      return this.apiClient.callApi(
        '/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Templates
     * Retrieve a list of templates stored against a users account and stage.  **Base URL:** <a href=\"#\">https://api.shotstack.io/edit/{version}</a> 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateListResponse}
     */
    getTemplates() {
      return this.getTemplatesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Render Asset
     * Queue and render the contents of an [Edit](#tocs_edit) as a video, image or audio file.  **Base URL:** <a href=\"#\">https://api.shotstack.io/edit/{version}</a> 
     * @param {module:model/Edit} edit The video, image or audio edit specified using JSON.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/QueuedResponse} and HTTP response
     */
    postRenderWithHttpInfo(edit) {
      let postBody = edit;
      // verify the required parameter 'edit' is set
      if (edit === undefined || edit === null) {
        throw new Error("Missing the required parameter 'edit' when calling postRender");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['DeveloperKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = QueuedResponse;
      return this.apiClient.callApi(
        '/render', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Render Asset
     * Queue and render the contents of an [Edit](#tocs_edit) as a video, image or audio file.  **Base URL:** <a href=\"#\">https://api.shotstack.io/edit/{version}</a> 
     * @param {module:model/Edit} edit The video, image or audio edit specified using JSON.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/QueuedResponse}
     */
    postRender(edit) {
      return this.postRenderWithHttpInfo(edit)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create Template
     * Save an [Edit](#tocs_edit) as a re-usable template. Templates can be retrieved and modified in your application before being rendered. [Merge fields](#tocs_mergefield) can be also used to merge data in to a template and [render](#render-template) it in a single request.  **Base URL:** <a href=\"#\">https://api.shotstack.io/edit/{version}</a> 
     * @param {module:model/Template} template Create a template with a name and [Edit](#tocs_edit).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateResponse} and HTTP response
     */
    postTemplateWithHttpInfo(template) {
      let postBody = template;
      // verify the required parameter 'template' is set
      if (template === undefined || template === null) {
        throw new Error("Missing the required parameter 'template' when calling postTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['DeveloperKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TemplateResponse;
      return this.apiClient.callApi(
        '/templates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Template
     * Save an [Edit](#tocs_edit) as a re-usable template. Templates can be retrieved and modified in your application before being rendered. [Merge fields](#tocs_mergefield) can be also used to merge data in to a template and [render](#render-template) it in a single request.  **Base URL:** <a href=\"#\">https://api.shotstack.io/edit/{version}</a> 
     * @param {module:model/Template} template Create a template with a name and [Edit](#tocs_edit).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateResponse}
     */
    postTemplate(template) {
      return this.postTemplateWithHttpInfo(template)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Render Template
     * Render an asset from a template id and optional merge fields. Merge fields can be used to replace placeholder variables within the [Edit](#tocs_edit).  **Base URL:** <a href=\"#\">https://api.shotstack.io/edit/{version}</a> 
     * @param {module:model/TemplateRender} templateRender Render a template by template id.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/QueuedResponse} and HTTP response
     */
    postTemplateRenderWithHttpInfo(templateRender) {
      let postBody = templateRender;
      // verify the required parameter 'templateRender' is set
      if (templateRender === undefined || templateRender === null) {
        throw new Error("Missing the required parameter 'templateRender' when calling postTemplateRender");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['DeveloperKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = QueuedResponse;
      return this.apiClient.callApi(
        '/templates/render', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Render Template
     * Render an asset from a template id and optional merge fields. Merge fields can be used to replace placeholder variables within the [Edit](#tocs_edit).  **Base URL:** <a href=\"#\">https://api.shotstack.io/edit/{version}</a> 
     * @param {module:model/TemplateRender} templateRender Render a template by template id.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/QueuedResponse}
     */
    postTemplateRender(templateRender) {
      return this.postTemplateRenderWithHttpInfo(templateRender)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Inspect Media
     * Inspects any media asset (image, video, audio) on the internet using a hosted version of [FFprobe](https://ffmpeg.org/ffprobe.html). The probe endpoint returns useful information about an asset such as width, height, duration, rotation, framerate, etc...  **Base URL:** <a href=\"#\">https://api.shotstack.io/edit/{version}</a> 
     * @param {String} url The URL of the media to inspect, must be **URL encoded**.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProbeResponse} and HTTP response
     */
    probeWithHttpInfo(url) {
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling probe");
      }

      let pathParams = {
        'url': url
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['DeveloperKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProbeResponse;
      return this.apiClient.callApi(
        '/probe/{url}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Inspect Media
     * Inspects any media asset (image, video, audio) on the internet using a hosted version of [FFprobe](https://ffmpeg.org/ffprobe.html). The probe endpoint returns useful information about an asset such as width, height, duration, rotation, framerate, etc...  **Base URL:** <a href=\"#\">https://api.shotstack.io/edit/{version}</a> 
     * @param {String} url The URL of the media to inspect, must be **URL encoded**.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProbeResponse}
     */
    probe(url) {
      return this.probeWithHttpInfo(url)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Template
     * Update an existing template by template id.  **Base URL:** <a href=\"#\">https://api.shotstack.io/edit/{version}</a> 
     * @param {String} id The id of the template in UUID format
     * @param {module:model/Template} template Update an individual templates name and [Edit](#tocs_edit). Both template name and template must be provided. If the template parameter is omitted a blank template will be saved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateResponse} and HTTP response
     */
    putTemplateWithHttpInfo(id, template) {
      let postBody = template;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putTemplate");
      }
      // verify the required parameter 'template' is set
      if (template === undefined || template === null) {
        throw new Error("Missing the required parameter 'template' when calling putTemplate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['DeveloperKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TemplateResponse;
      return this.apiClient.callApi(
        '/templates/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update Template
     * Update an existing template by template id.  **Base URL:** <a href=\"#\">https://api.shotstack.io/edit/{version}</a> 
     * @param {String} id The id of the template in UUID format
     * @param {module:model/Template} template Update an individual templates name and [Edit](#tocs_edit). Both template name and template must be provided. If the template parameter is omitted a blank template will be saved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateResponse}
     */
    putTemplate(id, template) {
      return this.putTemplateWithHttpInfo(id, template)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
