"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _Edit = _interopRequireDefault(require("../model/Edit"));
var _ProbeResponse = _interopRequireDefault(require("../model/ProbeResponse"));
var _QueuedResponse = _interopRequireDefault(require("../model/QueuedResponse"));
var _RenderResponse = _interopRequireDefault(require("../model/RenderResponse"));
var _Template = _interopRequireDefault(require("../model/Template"));
var _TemplateDataResponse = _interopRequireDefault(require("../model/TemplateDataResponse"));
var _TemplateListResponse = _interopRequireDefault(require("../model/TemplateListResponse"));
var _TemplateRender = _interopRequireDefault(require("../model/TemplateRender"));
var _TemplateResponse = _interopRequireDefault(require("../model/TemplateResponse"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Shotstack
 * Official Node SDK for the Shotstack Cloud Video Editing API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* Edit service.
* @module api/EditApi
* @version 0.2.9
*/
var EditApi = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new EditApi. 
  * @alias module:api/EditApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function EditApi(apiClient) {
    _classCallCheck(this, EditApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Delete Template
   * Delete a template by its template id.  **Base URL:** <a href=\"#\">https://api.shotstack.io/edit/{version}</a> 
   * @param {String} id The id of the template in UUID format
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  return _createClass(EditApi, [{
    key: "deleteTemplateWithHttpInfo",
    value: function deleteTemplateWithHttpInfo(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTemplate");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['DeveloperKey'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi('/templates/{id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Delete Template
     * Delete a template by its template id.  **Base URL:** <a href=\"#\">https://api.shotstack.io/edit/{version}</a> 
     * @param {String} id The id of the template in UUID format
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
  }, {
    key: "deleteTemplate",
    value: function deleteTemplate(id) {
      return this.deleteTemplateWithHttpInfo(id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get Render Status
     * Get the rendering status, temporary asset url and details of a render by ID.  **Base URL:** <a href=\"#\">https://api.shotstack.io/edit/{version}</a> 
     * @param {String} id The id of the timeline render task in UUID format
     * @param {Object} opts Optional parameters
     * @param {Boolean} [data] Include the data parameter in the response. The data parameter includes the original timeline, output and other settings sent to the API.<br><br><b>Note:</b> the default is currently `true`, this is deprecated and the default will soon be `false`. If you rely on the data being returned in the response you should explicitly set the parameter to `true`.
     * @param {Boolean} [merged] Used when data is set to true, it will show the [merge fields](#tocs_mergefield) merged in to the data response.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RenderResponse} and HTTP response
     */
  }, {
    key: "getRenderWithHttpInfo",
    value: function getRenderWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRender");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {
        'data': opts['data'],
        'merged': opts['merged']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['DeveloperKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _RenderResponse["default"];
      return this.apiClient.callApi('/render/{id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Get Render Status
     * Get the rendering status, temporary asset url and details of a render by ID.  **Base URL:** <a href=\"#\">https://api.shotstack.io/edit/{version}</a> 
     * @param {String} id The id of the timeline render task in UUID format
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.data Include the data parameter in the response. The data parameter includes the original timeline, output and other settings sent to the API.<br><br><b>Note:</b> the default is currently `true`, this is deprecated and the default will soon be `false`. If you rely on the data being returned in the response you should explicitly set the parameter to `true`.
     * @param {Boolean} opts.merged Used when data is set to true, it will show the [merge fields](#tocs_mergefield) merged in to the data response.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RenderResponse}
     */
  }, {
    key: "getRender",
    value: function getRender(id, opts) {
      return this.getRenderWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Retrieve Template
     * Retrieve a template by template id.  **Base URL:** <a href=\"#\">https://api.shotstack.io/edit/{version}</a> 
     * @param {String} id The id of the template in UUID format
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateDataResponse} and HTTP response
     */
  }, {
    key: "getTemplateWithHttpInfo",
    value: function getTemplateWithHttpInfo(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTemplate");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['DeveloperKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _TemplateDataResponse["default"];
      return this.apiClient.callApi('/templates/{id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Retrieve Template
     * Retrieve a template by template id.  **Base URL:** <a href=\"#\">https://api.shotstack.io/edit/{version}</a> 
     * @param {String} id The id of the template in UUID format
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateDataResponse}
     */
  }, {
    key: "getTemplate",
    value: function getTemplate(id) {
      return this.getTemplateWithHttpInfo(id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List Templates
     * Retrieve a list of templates stored against a users account and stage.  **Base URL:** <a href=\"#\">https://api.shotstack.io/edit/{version}</a> 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateListResponse} and HTTP response
     */
  }, {
    key: "getTemplatesWithHttpInfo",
    value: function getTemplatesWithHttpInfo() {
      var postBody = null;
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['DeveloperKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _TemplateListResponse["default"];
      return this.apiClient.callApi('/templates', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List Templates
     * Retrieve a list of templates stored against a users account and stage.  **Base URL:** <a href=\"#\">https://api.shotstack.io/edit/{version}</a> 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateListResponse}
     */
  }, {
    key: "getTemplates",
    value: function getTemplates() {
      return this.getTemplatesWithHttpInfo().then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Render Asset
     * Queue and render the contents of an [Edit](#tocs_edit) as a video, image or audio file.  **Base URL:** <a href=\"#\">https://api.shotstack.io/edit/{version}</a> 
     * @param {module:model/Edit} edit The video, image or audio edit specified using JSON.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/QueuedResponse} and HTTP response
     */
  }, {
    key: "postRenderWithHttpInfo",
    value: function postRenderWithHttpInfo(edit) {
      var postBody = edit;
      // verify the required parameter 'edit' is set
      if (edit === undefined || edit === null) {
        throw new Error("Missing the required parameter 'edit' when calling postRender");
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['DeveloperKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _QueuedResponse["default"];
      return this.apiClient.callApi('/render', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Render Asset
     * Queue and render the contents of an [Edit](#tocs_edit) as a video, image or audio file.  **Base URL:** <a href=\"#\">https://api.shotstack.io/edit/{version}</a> 
     * @param {module:model/Edit} edit The video, image or audio edit specified using JSON.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/QueuedResponse}
     */
  }, {
    key: "postRender",
    value: function postRender(edit) {
      return this.postRenderWithHttpInfo(edit).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Create Template
     * Save an [Edit](#tocs_edit) as a re-usable template. Templates can be retrieved and modified in your application before being rendered. [Merge fields](#tocs_mergefield) can be also used to merge data in to a template and [render](#render-template) it in a single request.  **Base URL:** <a href=\"#\">https://api.shotstack.io/edit/{version}</a> 
     * @param {module:model/Template} template Create a template with a name and [Edit](#tocs_edit).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateResponse} and HTTP response
     */
  }, {
    key: "postTemplateWithHttpInfo",
    value: function postTemplateWithHttpInfo(template) {
      var postBody = template;
      // verify the required parameter 'template' is set
      if (template === undefined || template === null) {
        throw new Error("Missing the required parameter 'template' when calling postTemplate");
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['DeveloperKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _TemplateResponse["default"];
      return this.apiClient.callApi('/templates', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Create Template
     * Save an [Edit](#tocs_edit) as a re-usable template. Templates can be retrieved and modified in your application before being rendered. [Merge fields](#tocs_mergefield) can be also used to merge data in to a template and [render](#render-template) it in a single request.  **Base URL:** <a href=\"#\">https://api.shotstack.io/edit/{version}</a> 
     * @param {module:model/Template} template Create a template with a name and [Edit](#tocs_edit).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateResponse}
     */
  }, {
    key: "postTemplate",
    value: function postTemplate(template) {
      return this.postTemplateWithHttpInfo(template).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Render Template
     * Render an asset from a template id and optional merge fields. Merge fields can be used to replace placeholder variables within the [Edit](#tocs_edit).  **Base URL:** <a href=\"#\">https://api.shotstack.io/edit/{version}</a> 
     * @param {module:model/TemplateRender} templateRender Render a template by template id.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/QueuedResponse} and HTTP response
     */
  }, {
    key: "postTemplateRenderWithHttpInfo",
    value: function postTemplateRenderWithHttpInfo(templateRender) {
      var postBody = templateRender;
      // verify the required parameter 'templateRender' is set
      if (templateRender === undefined || templateRender === null) {
        throw new Error("Missing the required parameter 'templateRender' when calling postTemplateRender");
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['DeveloperKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _QueuedResponse["default"];
      return this.apiClient.callApi('/templates/render', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Render Template
     * Render an asset from a template id and optional merge fields. Merge fields can be used to replace placeholder variables within the [Edit](#tocs_edit).  **Base URL:** <a href=\"#\">https://api.shotstack.io/edit/{version}</a> 
     * @param {module:model/TemplateRender} templateRender Render a template by template id.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/QueuedResponse}
     */
  }, {
    key: "postTemplateRender",
    value: function postTemplateRender(templateRender) {
      return this.postTemplateRenderWithHttpInfo(templateRender).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Inspect Media
     * Inspects any media asset (image, video, audio) on the internet using a hosted version of [FFprobe](https://ffmpeg.org/ffprobe.html). The probe endpoint returns useful information about an asset such as width, height, duration, rotation, framerate, etc...  **Base URL:** <a href=\"#\">https://api.shotstack.io/edit/{version}</a> 
     * @param {String} url The URL of the media to inspect, must be **URL encoded**.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProbeResponse} and HTTP response
     */
  }, {
    key: "probeWithHttpInfo",
    value: function probeWithHttpInfo(url) {
      var postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling probe");
      }
      var pathParams = {
        'url': url
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['DeveloperKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ProbeResponse["default"];
      return this.apiClient.callApi('/probe/{url}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Inspect Media
     * Inspects any media asset (image, video, audio) on the internet using a hosted version of [FFprobe](https://ffmpeg.org/ffprobe.html). The probe endpoint returns useful information about an asset such as width, height, duration, rotation, framerate, etc...  **Base URL:** <a href=\"#\">https://api.shotstack.io/edit/{version}</a> 
     * @param {String} url The URL of the media to inspect, must be **URL encoded**.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProbeResponse}
     */
  }, {
    key: "probe",
    value: function probe(url) {
      return this.probeWithHttpInfo(url).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update Template
     * Update an existing template by template id.  **Base URL:** <a href=\"#\">https://api.shotstack.io/edit/{version}</a> 
     * @param {String} id The id of the template in UUID format
     * @param {module:model/Template} template Update an individual templates name and [Edit](#tocs_edit). Both template name and template must be provided. If the template parameter is omitted a blank template will be saved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateResponse} and HTTP response
     */
  }, {
    key: "putTemplateWithHttpInfo",
    value: function putTemplateWithHttpInfo(id, template) {
      var postBody = template;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putTemplate");
      }
      // verify the required parameter 'template' is set
      if (template === undefined || template === null) {
        throw new Error("Missing the required parameter 'template' when calling putTemplate");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['DeveloperKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _TemplateResponse["default"];
      return this.apiClient.callApi('/templates/{id}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Update Template
     * Update an existing template by template id.  **Base URL:** <a href=\"#\">https://api.shotstack.io/edit/{version}</a> 
     * @param {String} id The id of the template in UUID format
     * @param {module:model/Template} template Update an individual templates name and [Edit](#tocs_edit). Both template name and template must be provided. If the template parameter is omitted a blank template will be saved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateResponse}
     */
  }, {
    key: "putTemplate",
    value: function putTemplate(id, template) {
      return this.putTemplateWithHttpInfo(id, template).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
}();