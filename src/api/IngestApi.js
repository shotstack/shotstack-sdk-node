"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _IngestErrorResponse = _interopRequireDefault(require("../model/IngestErrorResponse"));
var _QueuedSourceResponse = _interopRequireDefault(require("../model/QueuedSourceResponse"));
var _Source = _interopRequireDefault(require("../model/Source"));
var _SourceListResponse = _interopRequireDefault(require("../model/SourceListResponse"));
var _SourceResponse = _interopRequireDefault(require("../model/SourceResponse"));
var _UploadResponse = _interopRequireDefault(require("../model/UploadResponse"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Shotstack
 * Official Node SDK for the Shotstack Cloud Video Editing API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* Ingest service.
* @module api/IngestApi
* @version 0.2.9
*/
var IngestApi = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new IngestApi. 
  * @alias module:api/IngestApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function IngestApi(apiClient) {
    _classCallCheck(this, IngestApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Delete Source
   * Delete an ingested source file by its id.  **Base URL:** <a href=\"#\">https://api.shotstack.io/ingest/{version}</a> 
   * @param {String} id The id of the source file in [KSUID](https://github.com/segmentio/ksuid#what-is-a-ksuid) format.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  return _createClass(IngestApi, [{
    key: "deleteSourceWithHttpInfo",
    value: function deleteSourceWithHttpInfo(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSource");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['DeveloperKey'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi('/sources/{id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Delete Source
     * Delete an ingested source file by its id.  **Base URL:** <a href=\"#\">https://api.shotstack.io/ingest/{version}</a> 
     * @param {String} id The id of the source file in [KSUID](https://github.com/segmentio/ksuid#what-is-a-ksuid) format.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
  }, {
    key: "deleteSource",
    value: function deleteSource(id) {
      return this.deleteSourceWithHttpInfo(id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get Source
     * Fetch a source file details and status by its id.  **Base URL:** <a href=\"#\">https://api.shotstack.io/ingest/{version}</a> 
     * @param {String} id The id of the source file in [KSUID](https://github.com/segmentio/ksuid#what-is-a-ksuid) format.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SourceResponse} and HTTP response
     */
  }, {
    key: "getSourceWithHttpInfo",
    value: function getSourceWithHttpInfo(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSource");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['DeveloperKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _SourceResponse["default"];
      return this.apiClient.callApi('/sources/{id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Get Source
     * Fetch a source file details and status by its id.  **Base URL:** <a href=\"#\">https://api.shotstack.io/ingest/{version}</a> 
     * @param {String} id The id of the source file in [KSUID](https://github.com/segmentio/ksuid#what-is-a-ksuid) format.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SourceResponse}
     */
  }, {
    key: "getSource",
    value: function getSource(id) {
      return this.getSourceWithHttpInfo(id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List Sources
     * Retrieve a list of ingested source files stored against a users account and stage.  **Base URL:** <a href=\"#\">https://api.shotstack.io/ingest/{version}</a> 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SourceListResponse} and HTTP response
     */
  }, {
    key: "getSourcesWithHttpInfo",
    value: function getSourcesWithHttpInfo() {
      var postBody = null;
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['DeveloperKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _SourceListResponse["default"];
      return this.apiClient.callApi('/sources', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List Sources
     * Retrieve a list of ingested source files stored against a users account and stage.  **Base URL:** <a href=\"#\">https://api.shotstack.io/ingest/{version}</a> 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SourceListResponse}
     */
  }, {
    key: "getSources",
    value: function getSources() {
      return this.getSourcesWithHttpInfo().then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Direct Upload
     * Request a signed URL to upload a file to. The response returns a signed URL that you use to upload the file to. The signed URL looks similar to:  https://shotstack-ingest-api-stage-sources.s3.ap-southeast-2.amazonaws.com/5ca6hu7s9k/zzytey4v-32km-kq1z-aftr-3kcuqi0brad2/source?AWSAccessKeyId=ASIAWJV7UWDMGTZLHTXP&Expires=1677209777&Signature=PKR4dGDDdOuMTAQmDASzLGmLOeo%3D&x-amz-acl=public-read&x-amz-security-token=IQoJb3JpZ2luX2VjEGMaDmFwLX......56osBGByztm7WZdbmXzO09KR  In a separate API call, use this signed URL to send a PUT request with the binary file. Using  cURL you can use a command like:      `curl -X PUT -T video.mp4 {data.attributes.url}`      Where **video.mp4** is the file you want to upload and **{data.attributes.url}** is the signed URL returned in the response. The request must be a PUT type.  The SDK does not currently support the PUT request. You can use the SDK to make the request for the signed URL and then use cURL to make the PUT request.  **Base URL:** <a href=\"#\">https://api.shotstack.io/ingest/{version}</a> 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UploadResponse} and HTTP response
     */
  }, {
    key: "getUploadSignedUrlWithHttpInfo",
    value: function getUploadSignedUrlWithHttpInfo() {
      var postBody = null;
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['DeveloperKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _UploadResponse["default"];
      return this.apiClient.callApi('/upload', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Direct Upload
     * Request a signed URL to upload a file to. The response returns a signed URL that you use to upload the file to. The signed URL looks similar to:  https://shotstack-ingest-api-stage-sources.s3.ap-southeast-2.amazonaws.com/5ca6hu7s9k/zzytey4v-32km-kq1z-aftr-3kcuqi0brad2/source?AWSAccessKeyId=ASIAWJV7UWDMGTZLHTXP&Expires=1677209777&Signature=PKR4dGDDdOuMTAQmDASzLGmLOeo%3D&x-amz-acl=public-read&x-amz-security-token=IQoJb3JpZ2luX2VjEGMaDmFwLX......56osBGByztm7WZdbmXzO09KR  In a separate API call, use this signed URL to send a PUT request with the binary file. Using  cURL you can use a command like:      `curl -X PUT -T video.mp4 {data.attributes.url}`      Where **video.mp4** is the file you want to upload and **{data.attributes.url}** is the signed URL returned in the response. The request must be a PUT type.  The SDK does not currently support the PUT request. You can use the SDK to make the request for the signed URL and then use cURL to make the PUT request.  **Base URL:** <a href=\"#\">https://api.shotstack.io/ingest/{version}</a> 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UploadResponse}
     */
  }, {
    key: "getUploadSignedUrl",
    value: function getUploadSignedUrl() {
      return this.getUploadSignedUrlWithHttpInfo().then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Fetch Source
     * Queue a source file to be fetched from a URL and stored by Shotstack. Source files can be videos, images, audio files and fonts. Once ingested, new [output renditions](#tocs_outputs) can be created from the source file.  **Base URL:** <a href=\"#\">https://api.shotstack.io/ingest/{version}</a> 
     * @param {module:model/Source} source Ingest a video, image, audio or font file from the provided URL. Optionally provide a list of output renditions.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/QueuedSourceResponse} and HTTP response
     */
  }, {
    key: "postSourceWithHttpInfo",
    value: function postSourceWithHttpInfo(source) {
      var postBody = source;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling postSource");
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['DeveloperKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _QueuedSourceResponse["default"];
      return this.apiClient.callApi('/sources', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Fetch Source
     * Queue a source file to be fetched from a URL and stored by Shotstack. Source files can be videos, images, audio files and fonts. Once ingested, new [output renditions](#tocs_outputs) can be created from the source file.  **Base URL:** <a href=\"#\">https://api.shotstack.io/ingest/{version}</a> 
     * @param {module:model/Source} source Ingest a video, image, audio or font file from the provided URL. Optionally provide a list of output renditions.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/QueuedSourceResponse}
     */
  }, {
    key: "postSource",
    value: function postSource(source) {
      return this.postSourceWithHttpInfo(source).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
}();