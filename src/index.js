/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.io/docs/guide/) documentation.  There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>  The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b> 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 5.4.0
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Asset', 'model/AssetRenderResponse', 'model/AssetResponse', 'model/AssetResponseAttributes', 'model/AssetResponseData', 'model/AudioAsset', 'model/Clip', 'model/Crop', 'model/Destinations', 'model/Edit', 'model/FlipTransformation', 'model/Font', 'model/HtmlAsset', 'model/ImageAsset', 'model/LumaAsset', 'model/MergeField', 'model/MuxDestination', 'model/MuxDestinationOptions', 'model/Offset', 'model/Output', 'model/Poster', 'model/ProbeResponse', 'model/QueuedResponse', 'model/QueuedResponseData', 'model/Range', 'model/RenderResponse', 'model/RenderResponseData', 'model/RotateTransformation', 'model/S3Destination', 'model/S3DestinationOptions', 'model/ShotstackDestination', 'model/Size', 'model/SkewTransformation', 'model/Soundtrack', 'model/Template', 'model/TemplateDataResponse', 'model/TemplateDataResponseData', 'model/TemplateListResponse', 'model/TemplateListResponseData', 'model/TemplateListResponseItem', 'model/TemplateRender', 'model/TemplateResponse', 'model/TemplateResponseData', 'model/Thumbnail', 'model/Timeline', 'model/TitleAsset', 'model/Track', 'model/Transformation', 'model/Transition', 'model/VideoAsset', 'api/EditApi', 'api/ServeApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/Asset'), require('./model/AssetRenderResponse'), require('./model/AssetResponse'), require('./model/AssetResponseAttributes'), require('./model/AssetResponseData'), require('./model/AudioAsset'), require('./model/Clip'), require('./model/Crop'), require('./model/Destinations'), require('./model/Edit'), require('./model/FlipTransformation'), require('./model/Font'), require('./model/HtmlAsset'), require('./model/ImageAsset'), require('./model/LumaAsset'), require('./model/MergeField'), require('./model/MuxDestination'), require('./model/MuxDestinationOptions'), require('./model/Offset'), require('./model/Output'), require('./model/Poster'), require('./model/ProbeResponse'), require('./model/QueuedResponse'), require('./model/QueuedResponseData'), require('./model/Range'), require('./model/RenderResponse'), require('./model/RenderResponseData'), require('./model/RotateTransformation'), require('./model/S3Destination'), require('./model/S3DestinationOptions'), require('./model/ShotstackDestination'), require('./model/Size'), require('./model/SkewTransformation'), require('./model/Soundtrack'), require('./model/Template'), require('./model/TemplateDataResponse'), require('./model/TemplateDataResponseData'), require('./model/TemplateListResponse'), require('./model/TemplateListResponseData'), require('./model/TemplateListResponseItem'), require('./model/TemplateRender'), require('./model/TemplateResponse'), require('./model/TemplateResponseData'), require('./model/Thumbnail'), require('./model/Timeline'), require('./model/TitleAsset'), require('./model/Track'), require('./model/Transformation'), require('./model/Transition'), require('./model/VideoAsset'), require('./api/EditApi'), require('./api/ServeApi'));
  }
}(function(ApiClient, Asset, AssetRenderResponse, AssetResponse, AssetResponseAttributes, AssetResponseData, AudioAsset, Clip, Crop, Destinations, Edit, FlipTransformation, Font, HtmlAsset, ImageAsset, LumaAsset, MergeField, MuxDestination, MuxDestinationOptions, Offset, Output, Poster, ProbeResponse, QueuedResponse, QueuedResponseData, Range, RenderResponse, RenderResponseData, RotateTransformation, S3Destination, S3DestinationOptions, ShotstackDestination, Size, SkewTransformation, Soundtrack, Template, TemplateDataResponse, TemplateDataResponseData, TemplateListResponse, TemplateListResponseData, TemplateListResponseItem, TemplateRender, TemplateResponse, TemplateResponseData, Thumbnail, Timeline, TitleAsset, Track, Transformation, Transition, VideoAsset, EditApi, ServeApi) {
  'use strict';

  /**
   * Shotstack_is_a_video_image_and_audio_editing_service_that_allows_for_the_automatedgeneration_of_videos_images_and_audio_using_JSON_and_a_RESTful_API_You_arrange_and_configure_an_edit_and_POST_it_to_the_API_which_will_render_your_media_and_provide_a_file_location_when_complete_For_more_details_visit__shotstack_io_https__shotstack_io_or_checkout_our_getting_started_https__shotstack_io_docs_guide__documentation_There_are_two_main_APIs_one_for_editing_and_generating_assets__Edit_API_and_one_for_managing_hosted_assets_Serve_API_The_Edit_API_base_URL_is_bhttps__api_shotstack_io_version_bThe_Serve_API_base_URL_is_bhttps__api_shotstack_io_serve_version_b.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var ShotstackSdk = require('index'); // See note below*.
   * var xxxSvc = new ShotstackSdk.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new ShotstackSdk.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new ShotstackSdk.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new ShotstackSdk.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version v1
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The Asset model constructor.
     * @property {module:model/Asset}
     */
    Asset: Asset,
    /**
     * The AssetRenderResponse model constructor.
     * @property {module:model/AssetRenderResponse}
     */
    AssetRenderResponse: AssetRenderResponse,
    /**
     * The AssetResponse model constructor.
     * @property {module:model/AssetResponse}
     */
    AssetResponse: AssetResponse,
    /**
     * The AssetResponseAttributes model constructor.
     * @property {module:model/AssetResponseAttributes}
     */
    AssetResponseAttributes: AssetResponseAttributes,
    /**
     * The AssetResponseData model constructor.
     * @property {module:model/AssetResponseData}
     */
    AssetResponseData: AssetResponseData,
    /**
     * The AudioAsset model constructor.
     * @property {module:model/AudioAsset}
     */
    AudioAsset: AudioAsset,
    /**
     * The Clip model constructor.
     * @property {module:model/Clip}
     */
    Clip: Clip,
    /**
     * The Crop model constructor.
     * @property {module:model/Crop}
     */
    Crop: Crop,
    /**
     * The Destinations model constructor.
     * @property {module:model/Destinations}
     */
    Destinations: Destinations,
    /**
     * The Edit model constructor.
     * @property {module:model/Edit}
     */
    Edit: Edit,
    /**
     * The FlipTransformation model constructor.
     * @property {module:model/FlipTransformation}
     */
    FlipTransformation: FlipTransformation,
    /**
     * The Font model constructor.
     * @property {module:model/Font}
     */
    Font: Font,
    /**
     * The HtmlAsset model constructor.
     * @property {module:model/HtmlAsset}
     */
    HtmlAsset: HtmlAsset,
    /**
     * The ImageAsset model constructor.
     * @property {module:model/ImageAsset}
     */
    ImageAsset: ImageAsset,
    /**
     * The LumaAsset model constructor.
     * @property {module:model/LumaAsset}
     */
    LumaAsset: LumaAsset,
    /**
     * The MergeField model constructor.
     * @property {module:model/MergeField}
     */
    MergeField: MergeField,
    /**
     * The MuxDestination model constructor.
     * @property {module:model/MuxDestination}
     */
    MuxDestination: MuxDestination,
    /**
     * The MuxDestinationOptions model constructor.
     * @property {module:model/MuxDestinationOptions}
     */
    MuxDestinationOptions: MuxDestinationOptions,
    /**
     * The Offset model constructor.
     * @property {module:model/Offset}
     */
    Offset: Offset,
    /**
     * The Output model constructor.
     * @property {module:model/Output}
     */
    Output: Output,
    /**
     * The Poster model constructor.
     * @property {module:model/Poster}
     */
    Poster: Poster,
    /**
     * The ProbeResponse model constructor.
     * @property {module:model/ProbeResponse}
     */
    ProbeResponse: ProbeResponse,
    /**
     * The QueuedResponse model constructor.
     * @property {module:model/QueuedResponse}
     */
    QueuedResponse: QueuedResponse,
    /**
     * The QueuedResponseData model constructor.
     * @property {module:model/QueuedResponseData}
     */
    QueuedResponseData: QueuedResponseData,
    /**
     * The Range model constructor.
     * @property {module:model/Range}
     */
    Range: Range,
    /**
     * The RenderResponse model constructor.
     * @property {module:model/RenderResponse}
     */
    RenderResponse: RenderResponse,
    /**
     * The RenderResponseData model constructor.
     * @property {module:model/RenderResponseData}
     */
    RenderResponseData: RenderResponseData,
    /**
     * The RotateTransformation model constructor.
     * @property {module:model/RotateTransformation}
     */
    RotateTransformation: RotateTransformation,
    /**
     * The S3Destination model constructor.
     * @property {module:model/S3Destination}
     */
    S3Destination: S3Destination,
    /**
     * The S3DestinationOptions model constructor.
     * @property {module:model/S3DestinationOptions}
     */
    S3DestinationOptions: S3DestinationOptions,
    /**
     * The ShotstackDestination model constructor.
     * @property {module:model/ShotstackDestination}
     */
    ShotstackDestination: ShotstackDestination,
    /**
     * The Size model constructor.
     * @property {module:model/Size}
     */
    Size: Size,
    /**
     * The SkewTransformation model constructor.
     * @property {module:model/SkewTransformation}
     */
    SkewTransformation: SkewTransformation,
    /**
     * The Soundtrack model constructor.
     * @property {module:model/Soundtrack}
     */
    Soundtrack: Soundtrack,
    /**
     * The Template model constructor.
     * @property {module:model/Template}
     */
    Template: Template,
    /**
     * The TemplateDataResponse model constructor.
     * @property {module:model/TemplateDataResponse}
     */
    TemplateDataResponse: TemplateDataResponse,
    /**
     * The TemplateDataResponseData model constructor.
     * @property {module:model/TemplateDataResponseData}
     */
    TemplateDataResponseData: TemplateDataResponseData,
    /**
     * The TemplateListResponse model constructor.
     * @property {module:model/TemplateListResponse}
     */
    TemplateListResponse: TemplateListResponse,
    /**
     * The TemplateListResponseData model constructor.
     * @property {module:model/TemplateListResponseData}
     */
    TemplateListResponseData: TemplateListResponseData,
    /**
     * The TemplateListResponseItem model constructor.
     * @property {module:model/TemplateListResponseItem}
     */
    TemplateListResponseItem: TemplateListResponseItem,
    /**
     * The TemplateRender model constructor.
     * @property {module:model/TemplateRender}
     */
    TemplateRender: TemplateRender,
    /**
     * The TemplateResponse model constructor.
     * @property {module:model/TemplateResponse}
     */
    TemplateResponse: TemplateResponse,
    /**
     * The TemplateResponseData model constructor.
     * @property {module:model/TemplateResponseData}
     */
    TemplateResponseData: TemplateResponseData,
    /**
     * The Thumbnail model constructor.
     * @property {module:model/Thumbnail}
     */
    Thumbnail: Thumbnail,
    /**
     * The Timeline model constructor.
     * @property {module:model/Timeline}
     */
    Timeline: Timeline,
    /**
     * The TitleAsset model constructor.
     * @property {module:model/TitleAsset}
     */
    TitleAsset: TitleAsset,
    /**
     * The Track model constructor.
     * @property {module:model/Track}
     */
    Track: Track,
    /**
     * The Transformation model constructor.
     * @property {module:model/Transformation}
     */
    Transformation: Transformation,
    /**
     * The Transition model constructor.
     * @property {module:model/Transition}
     */
    Transition: Transition,
    /**
     * The VideoAsset model constructor.
     * @property {module:model/VideoAsset}
     */
    VideoAsset: VideoAsset,
    /**
     * The EditApi service constructor.
     * @property {module:api/EditApi}
     */
    EditApi: EditApi,
    /**
     * The ServeApi service constructor.
     * @property {module:api/ServeApi}
     */
    ServeApi: ServeApi
  };

  return exports;
}));
